/*
 * TIMER.h
 *
 *  Created on: 3 may. 2018
 *      Author: InDev
 */

#ifndef TIMER_H_
#define TIMER_H_


#include <stdint.h>
#include "SCB.h"
#include "NVIC.h"
#include "SYSCTL.h"

#define GPTM_BASE               (0x40030000)
#define GPTM0_BASE              (0x40030000)
#define GPTM1_BASE              (0x40031000)
#define GPTM2_BASE              (0x40032000)
#define GPTM3_BASE              (0x40033000)
#define GPTM4_BASE              (0x40034000)
#define GPTM5_BASE              (0x40035000)

#define GPTM_OFFSET             (0x00030000)
#define GPTM0_OFFSET            (0x00030000)
#define GPTM1_OFFSET            (0x00031000)
#define GPTM2_OFFSET            (0x00032000)
#define GPTM3_OFFSET            (0x00033000)
#define GPTM4_OFFSET            (0x00034000)
#define GPTM5_OFFSET            (0x00035000)

#define GPWTM_BASE              (0x40036000)
#define GPWTM0_BASE             (0x40036000)
#define GPWTM1_BASE             (0x40037000)
#define GPWTM2_BASE             (0x4004C000)
#define GPWTM3_BASE             (0x4004D000)
#define GPWTM4_BASE             (0x4004E000)
#define GPWTM5_BASE             (0x4004F000)

#define GPWTM_OFFSET            (0x00036000)
#define GPWTM0_OFFSET           (0x00036000)
#define GPWTM1_OFFSET           (0x00037000)
#define GPWTM2_OFFSET           (0x0004C000)
#define GPWTM3_OFFSET           (0x0004D000)
#define GPWTM4_OFFSET           (0x0004E000)
#define GPWTM5_OFFSET           (0x0004F000)

#define GPTM_BITBANDING_BASE    (0x42000000)
#define GPWTM_BITBANDING_BASE   (0x42000000)

/*************************************************************
 *********************************  STANDARD REGS **************
 **************************************************************/
typedef volatile struct
{
    volatile uint32_t TAMR              : 2;
    volatile uint32_t TACMR             : 1;
    volatile uint32_t TAAMS             : 1;
    volatile uint32_t TACDIR            : 1;
    volatile uint32_t TAMIE             : 1;
    volatile uint32_t TAWOT             : 1;
    volatile uint32_t TASNAPS           : 1;
    volatile uint32_t TAILD             : 1;
    volatile uint32_t TAPWMIE           : 1;
    volatile uint32_t TAMRSU            : 1;
    volatile uint32_t TAPLO             : 1;
    const    uint32_t reserved          : 20;
}GPTMTAMR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TBMR              : 2;
    volatile uint32_t TBCMR             : 1;
    volatile uint32_t TBAMS             : 1;
    volatile uint32_t TBCDIR            : 1;
    volatile uint32_t TBMIE             : 1;
    volatile uint32_t TBWOT             : 1;
    volatile uint32_t TBSNAPS           : 1;
    volatile uint32_t TBILD             : 1;
    volatile uint32_t TBPWMIE           : 1;
    volatile uint32_t TBMRSU            : 1;
    volatile uint32_t TBPLO             : 1;
    const    uint32_t reserved          : 20;
}GPTMTBMR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TAEN              : 1;
    volatile uint32_t TASTALL           : 1;
    volatile uint32_t TAEVENT           : 2;
    volatile uint32_t RTCEN             : 1;
    volatile uint32_t TAOTE             : 1;
    volatile uint32_t TAPWML            : 1;
    const    uint32_t reserved          : 1;
    volatile uint32_t TBEN              : 1;
    volatile uint32_t TBSTALL           : 1;
    volatile uint32_t TBEVENT           : 2;
    const    uint32_t reserved1         : 1;
    volatile uint32_t TBOTE             : 1;
    volatile uint32_t TBPWML            : 1;
    const    uint32_t reserved2         : 17;
}GPTMCTL_TypeDef;

typedef volatile struct
{
    volatile uint32_t TATOIM            : 1;
    volatile uint32_t CAMIM             : 1;
    volatile uint32_t CAEIM             : 1;
    volatile uint32_t RTCIM             : 1;
    volatile uint32_t TAMIM             : 1;
    const    uint32_t reserved          : 3;
    volatile uint32_t TBTOIM            : 1;
    volatile uint32_t CBMIM             : 1;
    volatile uint32_t CBEIM             : 1;
    volatile uint32_t TBMIM             : 1;
    const    uint32_t reserved1         : 4;
    volatile uint32_t WUEIM             : 1;
    const    uint32_t reserved2         : 15;
}GPTMIMR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TATORIS     : 1;
    volatile const uint32_t CAMRIS      : 1;
    volatile const uint32_t CAERIS      : 1;
    volatile const uint32_t RTCRIS      : 1;
    volatile const uint32_t TAMRIS      : 1;
    const    uint32_t       reserved    : 3;
    volatile const uint32_t TBTORIS     : 1;
    volatile const uint32_t CBMRIS      : 1;
    volatile const uint32_t CBERIS      : 1;
    volatile const uint32_t TBMRIS      : 1;
    const    uint32_t       reserved1   : 4;
    volatile const uint32_t WUERIS      : 1;
    const    uint32_t       reserved2   : 15;
}GPTMRIS_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TATOMIS     : 1;
    volatile const uint32_t CAMMIS      : 1;
    volatile const uint32_t CAEMIS      : 1;
    volatile const uint32_t RTCMIS      : 1;
    volatile const uint32_t TAMMIS      : 1;
    const    uint32_t       reserved    : 3;
    volatile const uint32_t TBTOMIS     : 1;
    volatile const uint32_t CBMMIS      : 1;
    volatile const uint32_t CBEMIS      : 1;
    volatile const uint32_t TBMMIS      : 1;
    const    uint32_t       reserved1   : 4;
    volatile const uint32_t WUEMIS      : 1;
    const    uint32_t       reserved2   : 15;
}GPTMMIS_TypeDef;

typedef volatile struct
{
    volatile uint32_t TATOCINT          : 1;
    volatile uint32_t CAMCINT           : 1;
    volatile uint32_t CAECINT           : 1;
    volatile uint32_t RTCCINT           : 1;
    volatile uint32_t TAMCINT           : 1;
    const    uint32_t reserved          : 3;
    volatile uint32_t TBTOCINT          : 1;
    volatile uint32_t CBMCINT           : 1;
    volatile uint32_t CBECINT           : 1;
    volatile uint32_t TBMCINT           : 1;
    const    uint32_t reserved1         : 4;
    volatile uint32_t WUECINT           : 1;
    const    uint32_t reserved2         : 15;
}GPTMICR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TAILR             : 32;
}GPTMTAILR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TBILR             : 32;
}GPTMTBILR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TAMR              : 32;
}GPTMTAMATCHR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TBMR              : 32;
}GPTMTBMATCHR_TypeDef;


typedef volatile struct
{
    volatile uint32_t TAPSR             : 8;
    volatile uint32_t TAPSRH            : 8;
    const    uint32_t reserved          : 16;
}GPTMTAPR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TBPSR             : 8;
    volatile uint32_t TBPSRH            : 8;
    const    uint32_t reserved          : 16;
}GPTMTBPR_TypeDef;


typedef volatile struct
{
    volatile uint32_t TAPSMR            : 8;
    volatile uint32_t TAPSMRH           : 8;
    const    uint32_t reserved          : 16;
}GPTMTAPMR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TBPSMR            : 8;
    volatile uint32_t TBPSMRH           : 8;
    const    uint32_t reserved          : 16;
}GPTMTBPMR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TAR         : 32;
}GPTMTAR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TBR         : 32;
}GPTMTBR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TAV               : 32;
}GPTMTAV_TypeDef;

typedef volatile struct
{
    volatile uint32_t TBV               : 32;
}GPTMTBV_TypeDef;

typedef volatile struct
{
    volatile const uint32_t PSS         : 16;
    const    uint32_t       reserved    : 16;
}GPTMTAPS_TypeDef;

typedef volatile struct
{
    volatile const uint32_t PSS         : 16;
    const    uint32_t       reserved    : 16;
}GPTMTBPS_TypeDef;

typedef volatile struct
{
    volatile const uint32_t PSV         : 16;
    const    uint32_t       reserved    : 16;
}GPTMTAPV_TypeDef;

typedef volatile struct
{
    volatile const uint32_t PSV         : 16;
    const    uint32_t       reserved    : 16;
}GPTMTBPV_TypeDef;

typedef volatile struct
{
    volatile const uint32_t RTCPD       : 16;
    const    uint32_t       reserved    : 16;
}GPTMRTCPD_TypeDef;

typedef volatile struct
{
    volatile uint32_t TAMR              [2];
    volatile uint32_t TACMR             [1];
    volatile uint32_t TAAMS             [1];
    volatile uint32_t TACDIR            [1];
    volatile uint32_t TAMIE             [1];
    volatile uint32_t TAWOT             [1];
    volatile uint32_t TASNAPS           [1];
    volatile uint32_t TAILD             [1];
    volatile uint32_t TAPWMIE           [1];
    volatile uint32_t TAMRSU            [1];
    volatile uint32_t TAPLO             [1];
    const    uint32_t reserved          [20];
}BITBANDING_GPTMTAMR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TBMR              [2];
    volatile uint32_t TBCMR             [1];
    volatile uint32_t TBAMS             [1];
    volatile uint32_t TBCDIR            [1];
    volatile uint32_t TBMIE             [1];
    volatile uint32_t TBWOT             [1];
    volatile uint32_t TBSNAPS           [1];
    volatile uint32_t TBILD             [1];
    volatile uint32_t TBPWMIE           [1];
    volatile uint32_t TBMRSU            [1];
    volatile uint32_t TBPLO             [1];
    const    uint32_t reserved          [20];
}BITBANDING_GPTMTBMR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TAEN              [1];
    volatile uint32_t TASTALL           [1];
    volatile uint32_t TAEVENT           [2];
    volatile uint32_t RTCEN             [1];
    volatile uint32_t TAOTE             [1];
    volatile uint32_t TAPWML            [1];
    const    uint32_t reserved          [1];
    volatile uint32_t TBEN              [1];
    volatile uint32_t TBSTALL           [1];
    volatile uint32_t TBEVENT           [2];
    const    uint32_t reserved1         [1];
    volatile uint32_t TBOTE             [1];
    volatile uint32_t TBPWML            [1];
    const    uint32_t reserved2         [17];
}BITBANDING_GPTMCTL_TypeDef;

typedef volatile struct
{
    volatile uint32_t TATOIM            [1];
    volatile uint32_t CAMIM             [1];
    volatile uint32_t CAEIM             [1];
    volatile uint32_t RTCIM             [1];
    volatile uint32_t TAMIM             [1];
    const    uint32_t reserved          [3];
    volatile uint32_t TBTOIM            [1];
    volatile uint32_t CBMIM             [1];
    volatile uint32_t CBEIM             [1];
    volatile uint32_t TBMIM             [1];
    const    uint32_t reserved1         [4];
    volatile uint32_t WUEIM             [1];
    const    uint32_t reserved2         [15];
}BITBANDING_GPTMIMR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TATORIS     [1];
    volatile const uint32_t CAMRIS      [1];
    volatile const uint32_t CAERIS      [1];
    volatile const uint32_t RTCRIS      [1];
    volatile const uint32_t TAMRIS      [1];
    const    uint32_t       reserved    [3];
    volatile const uint32_t TBTORIS     [1];
    volatile const uint32_t CBMRIS      [1];
    volatile const uint32_t CBERIS      [1];
    volatile const uint32_t TBMRIS      [1];
    const    uint32_t       reserved1   [4];
    volatile const uint32_t WUERIS      [1];
    const    uint32_t       reserved2   [15];
}BITBANDING_GPTMRIS_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TATOMIS     [1];
    volatile const uint32_t CAMMIS      [1];
    volatile const uint32_t CAEMIS      [1];
    volatile const uint32_t RTCMIS      [1];
    volatile const uint32_t TAMMIS      [1];
    const    uint32_t       reserved    [3];
    volatile const uint32_t TBTOMIS     [1];
    volatile const uint32_t CBMMIS      [1];
    volatile const uint32_t CBEMIS      [1];
    volatile const uint32_t TBMMIS      [1];
    const    uint32_t       reserved1   [4];
    volatile const uint32_t WUEMIS      [1];
    const    uint32_t       reserved2   [15];
}BITBANDING_GPTMMIS_TypeDef;

typedef volatile struct
{
    volatile uint32_t TATOCINT          [1];
    volatile uint32_t CAMCINT           [1];
    volatile uint32_t CAECINT           [1];
    volatile uint32_t RTCCINT           [1];
    volatile uint32_t TAMCINT           [1];
    const    uint32_t reserved          [3];
    volatile uint32_t TBTOCINT          [1];
    volatile uint32_t CBMCINT           [1];
    volatile uint32_t CBECINT           [1];
    volatile uint32_t TBMCINT           [1];
    const    uint32_t reserved1         [4];
    volatile uint32_t WUECINT           [1];
    const    uint32_t reserved2         [15];
}BITBANDING_GPTMICR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TAILR             [32];
}BITBANDING_GPTMTAILR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TBILR             [32];
}BITBANDING_GPTMTBILR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TAMR              [32];
}BITBANDING_GPTMTAMATCHR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TBMR              [32];
}BITBANDING_GPTMTBMATCHR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TAPSR             [8];
    volatile uint32_t TAPSRH            [8];
    const    uint32_t reserved          [16];
}BITBANDING_GPTMTAPR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TBPSR             [8];
    volatile uint32_t TBPSRH            [8];
    const    uint32_t reserved          [16];
}BITBANDING_GPTMTBPR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TAPSMR            [8];
    volatile uint32_t TAPSMRH           [8];
    const    uint32_t reserved          [16];
}BITBANDING_GPTMTAPMR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TBPSMR            [8];
    volatile uint32_t TBPSMRH           [8];
    const    uint32_t reserved          [16];
}BITBANDING_GPTMTBPMR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TAR         [32];
}BITBANDING_GPTMTAR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TBR         [32];
}BITBANDING_GPTMTBR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TAV               [32];
}BITBANDING_GPTMTAV_TypeDef;

typedef volatile struct
{
    volatile uint32_t TBV               [32];
}BITBANDING_GPTMTBV_TypeDef;

typedef volatile struct
{
    volatile const uint32_t RTCPD       [16];
    const    uint32_t       reserved    [16];
}BITBANDING_GPTMRTCPD_TypeDef;
typedef volatile struct
{
    volatile const uint32_t PSS         [16];
    const    uint32_t       reserved    [16];
}BITBANDING_GPTMTAPS_TypeDef;

typedef volatile struct
{
    volatile const uint32_t PSS         [16];
    const    uint32_t       reserved    [16];
}BITBANDING_GPTMTBPS_TypeDef;

typedef volatile struct
{
    volatile const uint32_t PSV         [16];
    const    uint32_t       reserved    [16];
}BITBANDING_GPTMTAPV_TypeDef;

typedef volatile struct
{
    volatile const uint32_t PSV         [16];
    const    uint32_t       reserved    [16];
}BITBANDING_GPTMTBPV_TypeDef;

/*************************************************************
 *********************************  CONTROL REGS **************
 **************************************************************/

typedef volatile struct
{
    volatile uint32_t GPTMCFG           : 3;
    const    uint32_t reserved          : 29;
}GPTMCFG_TypeDef;

typedef volatile struct
{
    volatile uint32_t SYNCT0            : 2;
    volatile uint32_t SYNCT1            : 2;
    volatile uint32_t SYNCT2            : 2;
    volatile uint32_t SYNCT3            : 2;
    volatile uint32_t SYNCT4            : 2;
    volatile uint32_t SYNCT5            : 2;
    volatile uint32_t SYNCWT0           : 2;
    volatile uint32_t SYNCWT1           : 2;
    volatile uint32_t SYNCWT2           : 2;
    volatile uint32_t SYNCWT3           : 2;
    volatile uint32_t SYNCWT4           : 2;
    volatile uint32_t SYNCWT5           : 2;
    const    uint32_t reserved          : 8;
}GPTMSYNC_TypeDef;

typedef volatile struct
{
    volatile const uint32_t SIZE        : 4;
    const    uint32_t       reserved    : 28;
}GPTMPP_TypeDef;

typedef volatile struct
{
    volatile uint32_t GPTMCFG           [3];
    const    uint32_t reserved          [29];
}BITBANDING_GPTMCFG_TypeDef;

typedef volatile struct
{
    volatile uint32_t SYNCT0            [2];
    volatile uint32_t SYNCT1            [2];
    volatile uint32_t SYNCT2            [2];
    volatile uint32_t SYNCT3            [2];
    volatile uint32_t SYNCT4            [2];
    volatile uint32_t SYNCT5            [2];
    volatile uint32_t SYNCWT0           [2];
    volatile uint32_t SYNCWT1           [2];
    volatile uint32_t SYNCWT2           [2];
    volatile uint32_t SYNCWT3           [2];
    volatile uint32_t SYNCWT4           [2];
    volatile uint32_t SYNCWT5           [2];
    const    uint32_t reserved          [8];
}BITBANDING_GPTMSYNC_TypeDef;

typedef volatile struct
{
    volatile const uint32_t SIZE        [4];
    const    uint32_t       reserved    [28];
}BITBANDING_GPTMPP_TypeDef;

/*************************************************************
 ***************************  TIMERA 16 REGS **************
 **************************************************************/

typedef volatile struct
{
    volatile uint32_t TnMR              : 2;
    volatile uint32_t TnCMR             : 1;
    volatile uint32_t TnAMS             : 1;
    volatile uint32_t TnCDIR            : 1;
    volatile uint32_t TnMIE             : 1;
    volatile uint32_t TnWOT             : 1;
    volatile uint32_t TnSNAPS           : 1;
    volatile uint32_t TnILD             : 1;
    volatile uint32_t TnPWMIE           : 1;
    volatile uint32_t TnMRSU            : 1;
    volatile uint32_t TnPLO             : 1;
    const    uint32_t reserved          : 20;
}TA_GPTMMR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnEN               : 1;
    volatile uint32_t TnSTALL            : 1;
    volatile uint32_t TnEVENT            : 2;
    const    uint32_t reserved           : 1;
    volatile uint32_t TnOTE              : 1;
    volatile uint32_t TnPWML             : 1;
    const    uint32_t reserved1          : 25;
}TA_GPTMCTL_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnTOIM             : 1;
    volatile uint32_t CnMIM              : 1;
    volatile uint32_t CnEIM              : 1;
    const    uint32_t reserved           : 1;
    volatile uint32_t TnMIM              : 1;
    const    uint32_t reserved1          : 27;
}TA_GPTMIMR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnTORIS      : 1;
    volatile const uint32_t CnMRIS       : 1;
    volatile const uint32_t CnERIS       : 1;
    const          uint32_t reserved     : 1;
    volatile const uint32_t TnMRIS       : 1;
    const          uint32_t reserved1    : 27;
}TA_GPTMRIS_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnTOMIS      : 1;
    volatile const uint32_t CnMMIS       : 1;
    volatile const uint32_t CnEMIS       : 1;
    const          uint32_t reserved     : 1;
    volatile const uint32_t TnMMIS       : 1;
    const          uint32_t reserved1    : 27;
}TA_GPTMMIS_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnTOCINT           : 1;
    volatile uint32_t CnMCINT            : 1;
    volatile uint32_t CnECINT            : 1;
    const    uint32_t reserved           : 1;
    volatile uint32_t TnMCINT            : 1;
    const    uint32_t reserved1          : 27;
}TA_GPTMICR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnILR             : 16;
    const    uint32_t reserved          : 16;
}TA_GPTMILR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnMR              : 16;
    const    uint32_t reserved          : 16;
}TA_GPTMMATCHR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnPSR              : 8;
    const    uint32_t reserved          : 24;
}TA_GPTMPR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnPSMR             : 8;
    const    uint32_t reserved          : 24;
}TA_GPTMPMR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnR         : 32;
}TA_GPTMR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnV               : 32;
}TA_GPTMV_TypeDef;

typedef volatile struct
{
    volatile const uint32_t PSS         : 16;
    const    uint32_t reserved          : 16;
}TA_GPTMPS_TypeDef;


typedef volatile struct
{
    volatile uint32_t TnMR              [2];
    volatile uint32_t TnCMR             [1];
    volatile uint32_t TnAMS             [1];
    volatile uint32_t TnCDIR            [1];
    volatile uint32_t TnMIE             [1];
    volatile uint32_t TnWOT             [1];
    volatile uint32_t TnSNAPS           [1];
    volatile uint32_t TnILD             [1];
    volatile uint32_t TnPWMIE           [1];
    volatile uint32_t TnMRSU            [1];
    volatile uint32_t TnPLO             [1];
    const    uint32_t reserved          [20];
}BITBANDING_TA_GPTMMR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnEN               [1];
    volatile uint32_t TnSTALL            [1];
    volatile uint32_t TnEVENT            [2];
    const    uint32_t reserved           [1];
    volatile uint32_t TnOTE              [1];
    volatile uint32_t TnPWML             [1];
    const    uint32_t reserved1          [25];
}BITBANDING_TA_GPTMCTL_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnTOIM             [1];
    volatile uint32_t CnMIM              [1];
    volatile uint32_t CnEIM              [1];
    const    uint32_t reserved           [1];
    volatile uint32_t TnMIM              [1];
    const    uint32_t reserved1          [27];
}BITBANDING_TA_GPTMIMR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnTORIS      [1];
    volatile const uint32_t CnMRIS       [1];
    volatile const uint32_t CnERIS       [1];
    const          uint32_t reserved     [1];
    volatile const uint32_t TnMRIS       [1];
    const          uint32_t reserved1    [27];
}BITBANDING_TA_GPTMRIS_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnTOMIS      [1];
    volatile const uint32_t CnMMIS       [1];
    volatile const uint32_t CnEMIS       [1];
    const          uint32_t reserved     [1];
    volatile const uint32_t TnMMIS       [1];
    const          uint32_t reserved1    [27];
}BITBANDING_TA_GPTMMIS_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnTOCINT           [1];
    volatile uint32_t CnMCINT            [1];
    volatile uint32_t CnECINT            [1];
    const    uint32_t reserved           [1];
    volatile uint32_t TnMCINT            [1];
    const    uint32_t reserved1          [27];
}BITBANDING_TA_GPTMICR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnILR             [16];
    const    uint32_t reserved          [16];
}BITBANDING_TA_GPTMILR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnMR              [16];
    const    uint32_t reserved          [16];
}BITBANDING_TA_GPTMMATCHR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnPSR              [8];
    const    uint32_t reserved          [24];
}BITBANDING_TA_GPTMPR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnPSMR             [8];
    const    uint32_t reserved          [24];
}BITBANDING_TA_GPTMPMR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnR         [32];
}BITBANDING_TA_GPTMR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnV               [32];
}BITBANDING_TA_GPTMV_TypeDef;

typedef volatile struct
{
    volatile const uint32_t PSS         [16];
    const    uint32_t reserved          [16];
}BITBANDING_TA_GPTMPS_TypeDef;

/*************************************************************
 ***************************  TIMERB 16 REGS **************
 **************************************************************/

typedef volatile struct
{
    volatile uint32_t TnMR              : 2;
    volatile uint32_t TnCMR             : 1;
    volatile uint32_t TnAMS             : 1;
    volatile uint32_t TnCDIR            : 1;
    volatile uint32_t TnMIE             : 1;
    volatile uint32_t TnWOT             : 1;
    volatile uint32_t TnSNAPS           : 1;
    volatile uint32_t TnILD             : 1;
    volatile uint32_t TnPWMIE           : 1;
    volatile uint32_t TnMRSU            : 1;
    volatile uint32_t TnPLO             : 1;
    const    uint32_t reserved          : 20;
}TB_GPTMMR_TypeDef;

typedef volatile struct
{
    const    uint32_t reserved           : 8;
    volatile uint32_t TnEN               : 1;
    volatile uint32_t TnSTALL            : 1;
    volatile uint32_t TnEVENT            : 2;
    volatile uint32_t reserved1          : 1;
    volatile uint32_t TnOTE              : 1;
    volatile uint32_t TnPWML             : 1;
    const    uint32_t reserved2          : 17;
}TB_GPTMCTL_TypeDef;

typedef volatile struct
{
    const    uint32_t reserved           : 8;
    volatile uint32_t TnTOIM             : 1;
    volatile uint32_t CnMIM              : 1;
    volatile uint32_t CnEIM              : 1;
    volatile uint32_t TnMIM              : 1;
    const    uint32_t reserved1          : 20;
}TB_GPTMIMR_TypeDef;

typedef volatile struct
{
    const   uint32_t reserved            : 8;
    volatile const uint32_t TnTORIS      : 1;
    volatile const uint32_t CnMRIS       : 1;
    volatile const uint32_t CnERIS       : 1;
    volatile const uint32_t TnMRIS       : 1;
    const          uint32_t reserved1    : 20;
}TB_GPTMRIS_TypeDef;

typedef volatile struct
{
    const   uint32_t reserved            : 8;
    volatile const uint32_t TnTOMIS      : 1;
    volatile const uint32_t CnMMIS       : 1;
    volatile const uint32_t CnEMIS       : 1;
    volatile const uint32_t TnMMIS       : 1;
    const          uint32_t reserved1    : 20;
}TB_GPTMMIS_TypeDef;

typedef volatile struct
{
    const   uint32_t reserved            : 8;
    volatile uint32_t TnTOCINT           : 1;
    volatile uint32_t CnMCINT            : 1;
    volatile uint32_t CnECINT            : 1;
    volatile uint32_t TnMCINT            : 1;
    const    uint32_t reserved1          : 20;
}TB_GPTMICR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnILR              : 16;
    const   uint32_t  reserved           : 16;
}TB_GPTMILR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnMR               : 16;
    const   uint32_t  reserved           : 16;
}TB_GPTMMATCHR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnPSR              : 8;
    const   uint32_t  reserved           : 24;
}TB_GPTMPR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnPSMR             : 8;
    const   uint32_t  reserved           : 24;
}TB_GPTMPMR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnR         : 32;
}TB_GPTMR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnV               : 32;
}TB_GPTMV_TypeDef;

typedef volatile struct
{
    volatile const uint32_t PSS          : 16;
    const   uint32_t  reserved           : 16;
}TB_GPTMPS_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnMR              [2];
    volatile uint32_t TnCMR             [1];
    volatile uint32_t TnAMS             [1];
    volatile uint32_t TnCDIR            [1];
    volatile uint32_t TnMIE             [1];
    volatile uint32_t TnWOT             [1];
    volatile uint32_t TnSNAPS           [1];
    volatile uint32_t TnILD             [1];
    volatile uint32_t TnPWMIE           [1];
    volatile uint32_t TnMRSU            [1];
    volatile uint32_t TnPLO             [1];
    const    uint32_t reserved          [20];
}BITBANDING_TB_GPTMMR_TypeDef;

typedef volatile struct
{
    const    uint32_t reserved           [8];
    volatile uint32_t TnEN               [1];
    volatile uint32_t TnSTALL            [1];
    volatile uint32_t TnEVENT            [2];
    volatile uint32_t reserved1          [1];
    volatile uint32_t TnOTE              [1];
    volatile uint32_t TnPWML             [1];
    const    uint32_t reserved2          [17];
}BITBANDING_TB_GPTMCTL_TypeDef;

typedef volatile struct
{
    const    uint32_t reserved           [8];
    volatile uint32_t TnTOIM             [1];
    volatile uint32_t CnMIM              [1];
    volatile uint32_t CnEIM              [1];
    volatile uint32_t TnMIM              [1];
    const    uint32_t reserved1          [20];
}BITBANDING_TB_GPTMIMR_TypeDef;

typedef volatile struct
{
    const   uint32_t reserved            [8];
    volatile const uint32_t TnTORIS      [1];
    volatile const uint32_t CnMRIS       [1];
    volatile const uint32_t CnERIS       [1];
    volatile const uint32_t TnMRIS       [1];
    const          uint32_t reserved1    [20];
}BITBANDING_TB_GPTMRIS_TypeDef;

typedef volatile struct
{
    const   uint32_t reserved            [8];
    volatile const uint32_t TnTOMIS      [1];
    volatile const uint32_t CnMMIS       [1];
    volatile const uint32_t CnEMIS       [1];
    volatile const uint32_t TnMMIS       [1];
    const          uint32_t reserved1    [20];
}BITBANDING_TB_GPTMMIS_TypeDef;

typedef volatile struct
{
    const   uint32_t reserved            [8];
    volatile uint32_t TnTOCINT           [1];
    volatile uint32_t CnMCINT            [1];
    volatile uint32_t CnECINT            [1];
    volatile uint32_t TnMCINT            [1];
    const    uint32_t reserved1          [20];
}BITBANDING_TB_GPTMICR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnILR              [16];
    const   uint32_t  reserved           [16];
}BITBANDING_TB_GPTMILR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnMR               [16];
    const   uint32_t  reserved           [16];
}BITBANDING_TB_GPTMMATCHR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnPSR              [8];
    const   uint32_t  reserved           [24];
}BITBANDING_TB_GPTMPR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnPSMR             [8];
    const   uint32_t  reserved           [24];
}BITBANDING_TB_GPTMPMR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnR         [32];
}BITBANDING_TB_GPTMR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnV               [32];
}BITBANDING_TB_GPTMV_TypeDef;

typedef volatile struct
{
    volatile const uint32_t PSS          [16];
    const   uint32_t  reserved           [16];
}BITBANDING_TB_GPTMPS_TypeDef;

/*************************************************************
 *********************************  TIMER 32 REGS **************
 **************************************************************/

typedef volatile struct
{
    volatile uint32_t TnMR              : 2;
    volatile uint32_t TnCMR             : 1;
    volatile uint32_t TnAMS             : 1;
    volatile uint32_t TnCDIR            : 1;
    volatile uint32_t TnMIE             : 1;
    volatile uint32_t TnWOT             : 1;
    volatile uint32_t TnSNAPS           : 1;
    volatile uint32_t TnILD             : 1;
    volatile uint32_t TnPWMIE           : 1;
    volatile uint32_t TnMRSU            : 1;
    volatile uint32_t TnPLO             : 1;
    const    uint32_t reserved          : 20;
}TW_GPTMMR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnEN               : 1;
    volatile uint32_t TnSTALL            : 1;
    volatile uint32_t TnEVENT            : 2;
    volatile uint32_t RTCEN              : 1;
    volatile uint32_t TnOTE              : 1;
    volatile uint32_t TnPWML             : 1;
    const    uint32_t reserved1          : 25;
}TW_GPTMCTL_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnTOIM             : 1;
    volatile uint32_t CnMIM              : 1;
    volatile uint32_t CnEIM              : 1;
    volatile uint32_t RTCIM              : 1;
    volatile uint32_t TnMIM              : 1;
    const    uint32_t reserved1          : 27;
}TW_GPTMIMR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnTORIS      : 1;
    volatile const uint32_t CnMRIS       : 1;
    volatile const uint32_t CnERIS       : 1;
    volatile const uint32_t RTCRIS       : 1;
    volatile const uint32_t TnMRIS       : 1;
    const          uint32_t reserved1    : 27;
}TW_GPTMRIS_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnTOMIS      : 1;
    volatile const uint32_t CnMMIS       : 1;
    volatile const uint32_t CnEMIS       : 1;
    volatile const uint32_t RTCMIS       : 1;
    volatile const uint32_t TnMMIS       : 1;
    const          uint32_t reserved1    : 27;
}TW_GPTMMIS_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnTOCINT           : 1;
    volatile uint32_t CnMCINT            : 1;
    volatile uint32_t CnECINT            : 1;
    volatile uint32_t RTCCINT            : 1;
    volatile uint32_t TnMCINT            : 1;
    const    uint32_t reserved1          : 27;
}TW_GPTMICR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnILR             : 32;
}TW_GPTMILR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnAMR             : 32;
}TW_GPTMMATCHR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnR         : 32;
}TW_GPTMR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnV               : 32;
}TW_GPTMV_TypeDef;

typedef volatile struct
{
    volatile const uint32_t RTCPD       : 16;
    const    uint32_t reserved          : 16;
}TW_GPTMRTCPD_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnMR              [2];
    volatile uint32_t TnCMR             [1];
    volatile uint32_t TnAMS             [1];
    volatile uint32_t TnCDIR            [1];
    volatile uint32_t TnMIE             [1];
    volatile uint32_t TnWOT             [1];
    volatile uint32_t TnSNAPS           [1];
    volatile uint32_t TnILD             [1];
    volatile uint32_t TnPWMIE           [1];
    volatile uint32_t TnMRSU            [1];
    volatile uint32_t TnPLO             [1];
    const    uint32_t reserved          [20];
}BITBANDING_TW_GPTMMR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnEN               [1];
    volatile uint32_t TnSTALL            [1];
    volatile uint32_t TnEVENT            [2];
    volatile uint32_t RTCEN              [1];
    volatile uint32_t TnOTE              [1];
    volatile uint32_t TnPWML             [1];
    const    uint32_t reserved1          [25];
}BITBANDING_TW_GPTMCTL_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnTOIM             [1];
    volatile uint32_t CnMIM              [1];
    volatile uint32_t CnEIM              [1];
    volatile uint32_t RTCIM              [1];
    volatile uint32_t TnMIM              [1];
    const    uint32_t reserved1          [27];
}BITBANDING_TW_GPTMIMR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnTORIS      [1];
    volatile const uint32_t CnMRIS       [1];
    volatile const uint32_t CnERIS       [1];
    volatile const uint32_t RTCRIS       [1];
    volatile const uint32_t TnMRIS       [1];
    const          uint32_t reserved1    [27];
}BITBANDING_TW_GPTMRIS_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnTOMIS      [1];
    volatile const uint32_t CnMMIS       [1];
    volatile const uint32_t CnEMIS       [1];
    volatile const uint32_t RTCMIS       [1];
    volatile const uint32_t TnMMIS       [1];
    const          uint32_t reserved1    [27];
}BITBANDING_TW_GPTMMIS_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnTOCINT           [1];
    volatile uint32_t CnMCINT            [1];
    volatile uint32_t CnECINT            [1];
    volatile uint32_t RTCCINT            [1];
    volatile uint32_t TnMCINT            [1];
    const    uint32_t reserved1          [27];
}BITBANDING_TW_GPTMICR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnILR             [32];
}BITBANDING_TW_GPTMILR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnAMR             [32];
}BITBANDING_TW_GPTMMATCHR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnR         [32];
}BITBANDING_TW_GPTMR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnV               [32];
}BITBANDING_TW_GPTMV_TypeDef;

typedef volatile struct
{
    volatile const uint32_t RTCPD       [16];
    const    uint32_t reserved          [16];
}BITBANDING_TW_GPTMRTCPD_TypeDef;

/*************************************************************
 ***************************  TIMERA 32 REGS **************
 **************************************************************/

typedef volatile struct
{
    volatile uint32_t TnILR             : 32;
}TA_GPWTMILR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnMR              : 32;
}TA_GPWTMMATCHR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnPSR             : 16;
    const    uint32_t reserved          : 16;
}TA_GPWTMPR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnPSMR            : 16;
    const    uint32_t reserved          : 16;
}TA_GPWTMPMR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t PSV         : 16;
    const    uint32_t reserved          : 16;
}TA_GPWTMPV_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnILR             [32];
}BITBANDING_TA_GPWTMILR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnMR              [32];
}BITBANDING_TA_GPWTMMATCHR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnPSR             [16];
    const    uint32_t reserved          [16];
}BITBANDING_TA_GPWTMPR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnPSMR            [16];
    const    uint32_t reserved          [16];
}BITBANDING_TA_GPWTMPMR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t PSV         [16];
    const    uint32_t reserved          [16];
}BITBANDING_TA_GPWTMPV_TypeDef;

/*************************************************************
 ***************************  TIMERB 32 REGS **************
 **************************************************************/

typedef volatile struct
{
    volatile uint32_t TnILR             : 32;
}TB_GPWTMILR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnMR              : 32;
}TB_GPWTMMATCHR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnPSR             : 16;
    const    uint32_t reserved          : 16;
}TB_GPWTMPR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnPSMR            : 16;
    const    uint32_t reserved          : 16;
}TB_GPWTMPMR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t PSV         : 16;
    const    uint32_t reserved          : 16;
}TB_GPWTMPV_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnILR             [32];
}BITBANDING_TB_GPWTMILR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnMR              [32];
}BITBANDING_TB_GPWTMMATCHR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnPSR             [16];
    const    uint32_t reserved          [16];
}BITBANDING_TB_GPWTMPR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnPSMR            [16];
    const    uint32_t reserved          [16];
}BITBANDING_TB_GPWTMPMR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t PSV         [16];
    const    uint32_t reserved          [16];
}BITBANDING_TB_GPWTMPV_TypeDef;


/*************************************************************
 *********************************  TIMER 64 REGS **************
 **************************************************************/

typedef volatile struct
{
    volatile uint32_t TnTOIM            : 1;
    volatile uint32_t CnMIM             : 1;
    volatile uint32_t CnEIM             : 1;
    volatile uint32_t RTCIM             : 1;
    volatile uint32_t TnMIM             : 1;
    const    uint32_t reserved          : 11;
    volatile uint32_t WUEIM             : 1;
    const    uint32_t reserved1         : 15;
}TW_GPWTMIMR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnTORIS     : 1;
    volatile const uint32_t CnMRIS      : 1;
    volatile const uint32_t CnERIS      : 1;
    volatile const uint32_t RTCRIS      : 1;
    volatile const uint32_t TnMRIS      : 1;
    const          uint32_t reserved    : 11;
    volatile const uint32_t WUERIS      : 1;
    const          uint32_t reserved1   : 15;
}TW_GPWTMRIS_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnTOMIS     : 1;
    volatile const uint32_t CnMMIS      : 1;
    volatile const uint32_t CnEMIS      : 1;
    volatile const uint32_t RTCMIS      : 1;
    volatile const uint32_t TnMMIS      : 1;
    const          uint32_t reserved    : 11;
    volatile const uint32_t WUEMIS      : 1;
    const          uint32_t reserved1   : 15;
}TW_GPWTMMIS_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnTOCINT          : 1;
    volatile uint32_t CnMCINT           : 1;
    volatile uint32_t CnECINT           : 1;
    volatile uint32_t RTCCINT           : 1;
    volatile uint32_t TnMCINT           : 1;
    const    uint32_t reserved          : 11;
    volatile uint32_t WUECINT           : 1;
    const    uint32_t reserved1         : 15;
}TW_GPWTMICR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnILR_LOW         : 32;
}TW_GPWTMILR_LOW_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnILR_HIGH        : 32;
}TW_GPWTMILR_HIGH_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnAMR_LOW         : 32;
}TW_GPWTMMATCHR_LOW_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnAMR_HIGH        : 32;
}TW_GPWTMMATCHR_HIGH_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnR_LOW     : 32;
}TW_GPWTMR_LOW_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnR_HIGH    : 32;
}TW_GPWTMR_HIGH_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnV_LOW           : 32;
}TW_GPWTMV_LOW_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnV_HIGH          : 32;
}TW_GPWTMV_HIGH_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnTOIM            [1];
    volatile uint32_t CnMIM             [1];
    volatile uint32_t CnEIM             [1];
    volatile uint32_t RTCIM             [1];
    volatile uint32_t TnMIM             [1];
    const    uint32_t reserved          [11];
    volatile uint32_t WUEIM             [1];
    const    uint32_t reserved1         [15];
}BITBANDING_TW_GPWTMIMR_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnTORIS     [1];
    volatile const uint32_t CnMRIS      [1];
    volatile const uint32_t CnERIS      [1];
    volatile const uint32_t RTCRIS      [1];
    volatile const uint32_t TnMRIS      [1];
    const          uint32_t reserved    [11];
    volatile const uint32_t WUERIS      [1];
    const          uint32_t reserved1   [15];
}BITBANDING_TW_GPWTMRIS_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnTOMIS     [1];
    volatile const uint32_t CnMMIS      [1];
    volatile const uint32_t CnEMIS      [1];
    volatile const uint32_t RTCMIS      [1];
    volatile const uint32_t TnMMIS      [1];
    const          uint32_t reserved    [11];
    volatile const uint32_t WUEMIS      [1];
    const          uint32_t reserved1   [15];
}BITBANDING_TW_GPWTMMIS_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnTOCINT          [1];
    volatile uint32_t CnMCINT           [1];
    volatile uint32_t CnECINT           [1];
    volatile uint32_t RTCCINT           [1];
    volatile uint32_t TnMCINT           [1];
    const    uint32_t reserved          [11];
    volatile uint32_t WUECINT           [1];
    const    uint32_t reserved1         [15];
}BITBANDING_TW_GPWTMICR_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnILR_LOW         [32];
}BITBANDING_TW_GPWTMILR_LOW_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnILR_HIGH        [32];
}BITBANDING_TW_GPWTMILR_HIGH_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnAMR_LOW         [32];
}BITBANDING_TW_GPWTMMATCHR_LOW_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnAMR_HIGH        [32];
}BITBANDING_TW_GPWTMMATCHR_HIGH_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnR_LOW     [32];
}BITBANDING_TW_GPWTMR_LOW_TypeDef;

typedef volatile struct
{
    volatile const uint32_t TnR_HIGH    [32];
}BITBANDING_TW_GPWTMR_HIGH_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnV_LOW           [32];
}BITBANDING_TW_GPWTMV_LOW_TypeDef;

typedef volatile struct
{
    volatile uint32_t TnV_HIGH          [32];
}BITBANDING_TW_GPWTMV_HIGH_TypeDef;

/*************************************************************
 *********************************  TIMERA16 DEF**************
 **************************************************************/


typedef volatile struct
{
    union
    {
        volatile uint32_t                   GPTMCFG;
        GPTMCFG_TypeDef                     GPTMCFG_Bit;
    };
    const uint32_t                          reserved[3];
    union
    {
        volatile uint32_t                   GPTMSYNC;
        GPTMSYNC_TypeDef                    GPTMSYNC_Bit;
    };
    const uint32_t                          reserved1[1003];
    union
    {
        volatile uint32_t                   GPTMPP;
        GPTMPP_TypeDef                      GPTMPP_Bit;
    };
    const uint32_t                          reserved2[15];
}GPTM_CTL_TypeDef;

typedef volatile struct
{
    union
    {
        volatile uint32_t                   GPTMCFG[32];
        BITBANDING_GPTMCFG_TypeDef          GPTMCFG_Bit;
    };
    const uint32_t                          reserved[3*32];
    union
    {
        volatile uint32_t                   GPTMSYNC[32];
        BITBANDING_GPTMSYNC_TypeDef         GPTMSYNC_Bit;
    };
    const uint32_t                          reserved1[1003*32];
    union
    {
        volatile uint32_t                   GPTMPP[32];
        BITBANDING_GPTMPP_TypeDef           GPTMPP_Bit;
    };
    const uint32_t                          reserved2[15*32];
}GPTM_BITBANDING_CTL_TypeDef;

typedef volatile struct
{

    const uint32_t                          reserved[1];
    union
    {
        volatile uint32_t                   GPTMTnMR;
        TA_GPTMMR_TypeDef                   GPTMTnMR_Bit;
    };
    const uint32_t                          reserved1[1];
    union
    {
        volatile uint32_t                   GPTMTnCTL;
        TA_GPTMCTL_TypeDef                  GPTMTnCTL_Bit;
    };
    const uint32_t                          reserved3[2];
    union
    {
        volatile uint32_t                   GPTMTnIMR;
        TA_GPTMIMR_TypeDef                  GPTMTnIMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnRIS;
        TA_GPTMRIS_TypeDef                  GPTMTnRIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnMIS;
        TA_GPTMMIS_TypeDef                  GPTMTnMIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnICR;
        TA_GPTMICR_TypeDef                  GPTMTnICR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnILR;
        TA_GPTMILR_TypeDef                  GPTMTnILR_Bit;
    };
    const uint32_t                          reserved9[1];
    union
    {
        volatile uint32_t                   GPTMTnMATCHR;
        TA_GPTMMATCHR_TypeDef               GPTMTnMATCHR_Bit;
    };
    const uint32_t                          reserved11[1];
    union
    {
        volatile uint32_t                   GPTMTnPR;
        TA_GPTMPR_TypeDef                   GPTMTnPR_Bit;
    };
    const uint32_t                          reserved13[1];
    union
    {
        volatile uint32_t                   GPTMTnPMR;
        TA_GPTMPMR_TypeDef                  GPTMTnPMR_Bit;
    };
    const uint32_t                          reserved15[1];
    union
    {
        volatile const uint32_t             GPTMTnR;
        TA_GPTMR_TypeDef                    GPTMTnR_Bit;
    };
    const uint32_t                          reserved16[1];
    union
    {
        volatile uint32_t                   GPTMTnV;
        TA_GPTMV_TypeDef                    GPTMTnV_Bit;
    };
    const uint32_t                          reserved17[2];
    union
    {
        volatile const uint32_t             GPTMTnPS;
        TA_GPTMPS_TypeDef                   GPTMTnPS_Bit;
    };
    const uint32_t                          reserved19[1000];


}GPTM_TA_TypeDef;

typedef volatile struct
{

    const uint32_t                          reserved[1*32];
    union
    {
        volatile uint32_t                   GPTMTnMR[32];
        BITBANDING_TA_GPTMMR_TypeDef        GPTMTnMR_Bit;
    };
    const uint32_t                          reserved1[1*32];
    union
    {
        volatile uint32_t                   GPTMTnCTL[32];
        BITBANDING_TA_GPTMCTL_TypeDef       GPTMTnCTL_Bit;
    };
    const uint32_t                          reserved3[2*32];
    union
    {
        volatile uint32_t                   GPTMTnIMR[32];
        BITBANDING_TA_GPTMIMR_TypeDef       GPTMTnIMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnRIS[32];
        BITBANDING_TA_GPTMRIS_TypeDef       GPTMTnRIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnMIS[32];
        BITBANDING_TA_GPTMMIS_TypeDef       GPTMTnMIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnICR[32];
        BITBANDING_TA_GPTMICR_TypeDef       GPTMTnICR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnILR[32];
        BITBANDING_TA_GPTMILR_TypeDef       GPTMTnILR_Bit;
    };
    const uint32_t                          reserved9[1*32];
    union
    {
        volatile uint32_t                   GPTMTnMATCHR[32];
        BITBANDING_TA_GPTMMATCHR_TypeDef    GPTMTnMATCHR_Bit;
    };
    const uint32_t                          reserved11[1*32];
    union
    {
        volatile uint32_t                   GPTMTnPR[32];
        BITBANDING_TA_GPTMPR_TypeDef        GPTMTnPR_Bit;
    };
    const uint32_t                          reserved13[1*32];
    union
    {
        volatile uint32_t                   GPTMTnPMR[32];
        BITBANDING_TA_GPTMPMR_TypeDef       GPTMTnPMR_Bit;
    };
    const uint32_t                          reserved15[1*32];
    union
    {
        volatile const uint32_t             GPTMTnR[32];
        BITBANDING_TA_GPTMR_TypeDef         GPTMTnR_Bit;
    };
    const uint32_t                          reserved16[1*32];
    union
    {
        volatile uint32_t                   GPTMTnV[32];
        BITBANDING_TA_GPTMV_TypeDef         GPTMTnV_Bit;
    };
    const uint32_t                          reserved17[2*32];
    union
    {
        volatile const uint32_t             GPTMTnPS[32];
        BITBANDING_TA_GPTMPS_TypeDef        GPTMTnPS_Bit;
    };
    const uint32_t                          reserved19[1000*32];

}GPTM_BITBANDING_TA_TypeDef;

typedef volatile struct
{
    const uint32_t                          reserved[2];
    union
    {
        volatile uint32_t                   GPTMTnMR;
        TB_GPTMMR_TypeDef                   GPTMTnMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnCTL;
        TB_GPTMCTL_TypeDef                  GPTMTnCTL_Bit;
    };
    const uint32_t                          reserved3[2];
    union
    {
        volatile uint32_t                   GPTMTnIMR;
        TB_GPTMIMR_TypeDef                  GPTMTnIMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnRIS;
        TB_GPTMRIS_TypeDef                  GPTMTnRIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnMIS;
        TB_GPTMMIS_TypeDef                  GPTMTnMIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnICR;
        TB_GPTMICR_TypeDef                  GPTMTnICR_Bit;
    };
    const uint32_t                          reserved9[1];
    union
    {
        volatile uint32_t                   GPTMTnILR;
        TB_GPTMILR_TypeDef                  GPTMTnILR_Bit;
    };
    const uint32_t                          reserved11[1];
    union
    {
        volatile uint32_t                   GPTMTnMATCHR;
        TB_GPTMMATCHR_TypeDef               GPTMTnMATCHR_Bit;
    };
    const uint32_t                          reserved13[1];
    union
    {
        volatile uint32_t                   GPTMTnPR;
        TB_GPTMPR_TypeDef                   GPTMTnPR_Bit;
    };
    const uint32_t                          reserved15[1];
    union
    {
        volatile uint32_t                   GPTMTnPMR;
        TB_GPTMPMR_TypeDef                  GPTMTnPMR_Bit;
    };
    const uint32_t                          reserved17[1];
    union
    {
        volatile const uint32_t             GPTMTnR;
        TB_GPTMR_TypeDef                    GPTMTnR_Bit;
    };
    const uint32_t                          reserved18[1];
    union
    {
        volatile uint32_t                   GPTMTnV;
        TB_GPTMV_TypeDef                    GPTMTnV_Bit;
    };
    const uint32_t                          reserved19[2];
    union
    {
        volatile const uint32_t             GPTMTnPS;
        TB_GPTMPS_TypeDef                   GPTMTnPS_Bit;
    };
    const uint32_t                          reserved21[999];
}GPTM_TB_TypeDef;


typedef volatile struct
{
    const uint32_t                          reserved[2*32];
    union
    {
        volatile uint32_t                   GPTMTnMR[32];
        BITBANDING_TB_GPTMMR_TypeDef        GPTMTnMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnCTL[32];
        BITBANDING_TB_GPTMCTL_TypeDef       GPTMTnCTL_Bit;
    };
    const uint32_t                          reserved3[2*32];
    union
    {
        volatile uint32_t                   GPTMTnIMR[32];
        BITBANDING_TB_GPTMIMR_TypeDef       GPTMTnIMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnRIS[32];
        BITBANDING_TB_GPTMRIS_TypeDef       GPTMTnRIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnMIS[32];
        BITBANDING_TB_GPTMMIS_TypeDef       GPTMTnMIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnICR[32];
        BITBANDING_TB_GPTMICR_TypeDef       GPTMTnICR_Bit;
    };
    const uint32_t                          reserved9[1*32];
    union
    {
        volatile uint32_t                   GPTMTnILR[32];
        BITBANDING_TB_GPTMILR_TypeDef       GPTMTnILR_Bit;
    };
    const uint32_t                          reserved11[1*32];
    union
    {
        volatile uint32_t                   GPTMTnMATCHR[32];
        BITBANDING_TB_GPTMMATCHR_TypeDef    GPTMTnMATCHR_Bit;
    };
    const uint32_t                          reserved13[1*32];
    union
    {
        volatile uint32_t                   GPTMTnPR[32];
        BITBANDING_TB_GPTMPR_TypeDef        GPTMTnPR_Bit;
    };
    const uint32_t                          reserved15[1*32];
    union
    {
        volatile uint32_t                   GPTMTnPMR[32];
        BITBANDING_TB_GPTMPMR_TypeDef       GPTMTnPMR_Bit;
    };
    const uint32_t                          reserved17[1*32];
    union
    {
        volatile const uint32_t             GPTMTnR[32];
        BITBANDING_TB_GPTMR_TypeDef         GPTMTnR_Bit;
    };
    const uint32_t                          reserved18[1*32];
    union
    {
        volatile uint32_t                   GPTMTnV[32];
        BITBANDING_TB_GPTMV_TypeDef         GPTMTnV_Bit;
    };
    const uint32_t                          reserved19[2*32];
    union
    {
        volatile const uint32_t             GPTMTnPS[132];
        BITBANDING_TB_GPTMPS_TypeDef        GPTMTnPS_Bit;
    };
    const uint32_t                          reserved21[999*32];
}GPTM_BITBANDING_TB_TypeDef;


typedef volatile struct
{

    const uint32_t                          reserved[1];
    union
    {
        volatile uint32_t                   GPTMTnMR;
        TW_GPTMMR_TypeDef                   GPTMTnMR_Bit;
    };
    const uint32_t                          reserved1[1];
    union
    {
        volatile uint32_t                   GPTMTnCTL;
        TW_GPTMCTL_TypeDef                  GPTMTnCTL_Bit;
    };
    const uint32_t                          reserved3[2];
    union
    {
        volatile uint32_t                   GPTMTnIMR;
        TW_GPTMIMR_TypeDef                  GPTMTnIMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnRIS;
        TW_GPTMRIS_TypeDef                  GPTMTnRIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnMIS;
        TW_GPTMMIS_TypeDef                  GPTMTnMIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnICR;
        TW_GPTMICR_TypeDef                  GPTMTnICR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnILR;
        TW_GPTMILR_TypeDef                  GPTMTnILR_Bit;
    };
    const uint32_t                          reserved8[1];
    union
    {
        volatile uint32_t                   GPTMTnMATCHR;
        TW_GPTMMATCHR_TypeDef               GPTMTnMATCHR_Bit;
    };
    const uint32_t                          reserved9[5];
    union
    {
        volatile const uint32_t             GPTMTnR;
        TW_GPTMR_TypeDef                    GPTMTnR_Bit;
    };
    const uint32_t                          reserved10[1];
    union
    {
        volatile uint32_t                   GPTMTnV;
        TW_GPTMV_TypeDef                    GPTMTnV_Bit;
    };
    const uint32_t                          reserved11[1];
    union
    {
        volatile const uint32_t             GPTMRTCPD;
        TW_GPTMRTCPD_TypeDef                GPTMRTCPD_Bit;
    };
    const uint32_t                          reserved13[1001];

}GPTM_TW_TypeDef;


typedef volatile struct
{

    const uint32_t                          reserved[1*32];
    union
    {
        volatile uint32_t                   GPTMTnMR[32];
        BITBANDING_TW_GPTMMR_TypeDef        GPTMTnMR_Bit;
    };
    const uint32_t                          reserved1[1*32];
    union
    {
        volatile uint32_t                   GPTMTnCTL[32];
        BITBANDING_TW_GPTMCTL_TypeDef       GPTMTnCTL_Bit;
    };
    const uint32_t                          reserved3[2*32];
    union
    {
        volatile uint32_t                   GPTMTnIMR[32];
        BITBANDING_TW_GPTMIMR_TypeDef       GPTMTnIMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnRIS[32];
        BITBANDING_TW_GPTMRIS_TypeDef       GPTMTnRIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnMIS[32];
        BITBANDING_TW_GPTMMIS_TypeDef       GPTMTnMIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnICR[32];
        BITBANDING_TW_GPTMICR_TypeDef       GPTMTnICR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnILR[32];
        BITBANDING_TW_GPTMILR_TypeDef       GPTMTnILR_Bit;
    };
    const uint32_t                          reserved8[1*32];
    union
    {
        volatile uint32_t                   GPTMTnMATCHR[32];
        BITBANDING_TW_GPTMMATCHR_TypeDef    GPTMTnMATCHR_Bit;
    };
    const uint32_t                          reserved9[5*32];
    union
    {
        volatile const uint32_t             GPTMTnR[32];
        BITBANDING_TW_GPTMR_TypeDef         GPTMTnR_Bit;
    };
    const uint32_t                          reserved10[1*32];
    union
    {
        volatile uint32_t                   GPTMTnV[32];
        BITBANDING_TW_GPTMV_TypeDef         GPTMTnV_Bit;
    };
    const uint32_t                          reserved11[1*32];
    union
    {
        volatile const uint32_t             GPTMRTCPD[32];
        BITBANDING_TW_GPTMRTCPD_TypeDef     GPTMRTCPD_Bit;
    };
    const uint32_t                          reserved13[1001*32];

}GPTM_BITBANDING_TW_TypeDef;

/*************************************************************
 *********************************  TIMER32 DEF**************
 **************************************************************/


typedef volatile struct
{
    union
    {
        volatile uint32_t                   GPTMCFG;
        GPTMCFG_TypeDef                     GPTMCFG_Bit;
    };
    const uint32_t                          reserved1[1007];
    union
    {
        volatile uint32_t                   GPTMPP;
        GPTMPP_TypeDef                      GPTMPP_Bit;
    };
    const uint32_t                          reserved2[15];
}GPWTM_CTL_TypeDef;

typedef volatile struct
{
    union
    {
        volatile uint32_t                   GPTMCFG[32];
        BITBANDING_GPTMCFG_TypeDef          GPTMCFG_Bit;
    };
    const uint32_t                          reserved1[1007*32];
    union
    {
        volatile uint32_t                   GPTMPP[32];
        BITBANDING_GPTMPP_TypeDef           GPTMPP_Bit;
    };
    const uint32_t                          reserved2[15*32];
}GPWTM_BITBANDING_CTL_TypeDef;

typedef volatile struct
{

    const uint32_t                          reserved[1];
    union
    {
        volatile uint32_t                   GPTMTnMR;
        TA_GPTMMR_TypeDef                   GPTMTnMR_Bit;
    };
    const uint32_t                          reserved1[1];
    union
    {
        volatile uint32_t                    GPTMTnCTL;
        TA_GPTMCTL_TypeDef                  GPTMTnCTL_Bit;
    };
    const uint32_t                          reserved3[2];
    union
    {
        volatile uint32_t                   GPTMTnIMR;
        TA_GPTMIMR_TypeDef                  GPTMTnIMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnRIS;
        TA_GPTMRIS_TypeDef                  GPTMTnRIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnMIS;
        TA_GPTMMIS_TypeDef                  GPTMTnMIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnICR;
        TA_GPTMICR_TypeDef                  GPTMTnICR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnILR;
        TA_GPWTMILR_TypeDef                 GPTMTnILR_Bit;
    };
    const uint32_t                          reserved9[1];
    union
    {
        volatile uint32_t                   GPTMTnMATCHR;
        TA_GPWTMMATCHR_TypeDef              GPTMTnMATCHR_Bit;
    };
    const uint32_t                          reserved11[1];
    union
    {
        volatile uint32_t                   GPTMTnPR;
        TA_GPWTMPR_TypeDef                  GPTMTnPR_Bit;
    };
    const uint32_t                          reserved13[1];
    union
    {
        volatile uint32_t                   GPTMTnPMR;
        TA_GPWTMPMR_TypeDef                 GPTMTnPMR_Bit;
    };
    const uint32_t                          reserved15[1];
    union
    {
        volatile const uint32_t             GPTMTnR;
        TA_GPTMR_TypeDef                    GPTMTnR_Bit;
    };
    const uint32_t                          reserved16[1];
    union
    {
        volatile uint32_t                   GPTMTnV;
        TA_GPTMV_TypeDef                    GPTMTnV_Bit;
    };
    const uint32_t                          reserved17[2];
    union
    {
        volatile const uint32_t             GPTMTnPS;
        TA_GPTMPS_TypeDef                   GPTMTnPS_Bit;
    };
    const uint32_t                          reserved18[1];
    union
    {
        volatile uint32_t                   GPTMTnPV;
        TA_GPWTMPV_TypeDef                  GPTMTnPV_Bit;
    };
    const uint32_t                          reserved20[998];


}GPWTM_TA_TypeDef;

typedef volatile struct
{

    const uint32_t                          reserved[1*32];
    union
    {
        volatile uint32_t                   GPTMTnMR[32];
        BITBANDING_TA_GPTMMR_TypeDef        GPTMTnMR_Bit;
    };
    const uint32_t                          reserved1[1*32];
    union
    {
        volatile uint32_t                   GPTMTnCTL[32];
        BITBANDING_TA_GPTMCTL_TypeDef       GPTMTnCTL_Bit;
    };
    const uint32_t                          reserved3[2*32];
    union
    {
        volatile uint32_t                   GPTMAIMR[32];
        BITBANDING_TA_GPTMIMR_TypeDef       GPTMAIMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnRIS[32];
        BITBANDING_TA_GPTMRIS_TypeDef       GPTMTnRIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnMIS[32];
        BITBANDING_TA_GPTMMIS_TypeDef       GPTMTnMIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnICR[32];
        BITBANDING_TA_GPTMICR_TypeDef       GPTMTnICR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnILR[32];
        BITBANDING_TA_GPWTMILR_TypeDef      GPTMTnILR_Bit;
    };
    const uint32_t                          reserved9[1*32];
    union
    {
        volatile uint32_t                   GPTMTnMATCHR[32];
        BITBANDING_TA_GPWTMMATCHR_TypeDef   GPTMTnMATCHR_Bit;
    };
    const uint32_t                          reserved11[1*32];
    union
    {
        volatile uint32_t                   GPTMTnPR[32];
        BITBANDING_TA_GPWTMPR_TypeDef       GPTMTnPR_Bit;
    };
    const uint32_t                          reserved13[1*32];
    union
    {
        volatile uint32_t                   GPTMTnPMR[32];
        BITBANDING_TA_GPWTMPMR_TypeDef      GPTMTnPMR_Bit;
    };
    const uint32_t                          reserved15[1*32];
    union
    {
        volatile const uint32_t             GPTMTnR[32];
        BITBANDING_TA_GPTMR_TypeDef         GPTMTnR_Bit;
    };
    const uint32_t                          reserved16[1*32];
    union
    {
        volatile uint32_t                   GPTMTnV[32];
        BITBANDING_TA_GPTMV_TypeDef         GPTMTnV_Bit;
    };
    const uint32_t                          reserved17[2*32];
    union
    {
        volatile const uint32_t             GPTMTnPS[32];
        BITBANDING_TA_GPTMPS_TypeDef        GPTMTnPS_Bit;
    };
    const uint32_t                          reserved18[32];
    union
    {
        volatile uint32_t                   GPTMTnPV[32];
        BITBANDING_TA_GPWTMPV_TypeDef       GPTMTnPV_Bit;
    };
    const uint32_t                          reserved20[998*32];

}GPWTM_BITBANDING_TA_TypeDef;

typedef volatile struct
{
    const uint32_t                          reserved[2];
    union
    {
        volatile uint32_t                   GPTMTnMR;
        TB_GPTMMR_TypeDef                   GPTMTnMR_Bit;
    };
    union
    {
        volatile uint32_t                    GPTMTnCTL;
        TB_GPTMCTL_TypeDef                  GPTMTnCTL_Bit;
    };
    const uint32_t                          reserved3[2];
    union
    {
        volatile uint32_t                   GPTMTnIMR;
        TB_GPTMIMR_TypeDef                  GPTMTnIMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnRIS;
        TB_GPTMRIS_TypeDef                  GPTMTnRIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnMIS;
        TB_GPTMMIS_TypeDef                  GPTMTnMIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnICR;
        TB_GPTMICR_TypeDef                  GPTMTnICR_Bit;
    };
    const uint32_t                          reserved9[1];
    union
    {
        volatile uint32_t                   GPTMTnILR;
        TB_GPWTMILR_TypeDef                 GPTMTnILR_Bit;
    };
    const uint32_t                          reserved11[1];
    union
    {
        volatile uint32_t                   GPTMTnMATCHR;
        TB_GPWTMMATCHR_TypeDef              GPTMTnMATCHR_Bit;
    };
    const uint32_t                          reserved13[1];
    union
    {
        volatile uint32_t                   GPTMTnPR;
        TB_GPWTMPR_TypeDef                  GPTMTnPR_Bit;
    };
    const uint32_t                          reserved15[1];
    union
    {
        volatile uint32_t                   GPTMTnPMR;
        TB_GPWTMPMR_TypeDef                 GPTMTnPMR_Bit;
    };
    const uint32_t                          reserved17[1];
    union
    {
        volatile const uint32_t             GPTMTnR;
        TB_GPTMR_TypeDef                    GPTMTnR_Bit;
    };
    const uint32_t                          reserved18[1];
    union
    {
        volatile uint32_t                   GPTMTnV;
        TB_GPTMV_TypeDef                    GPTMTnV_Bit;
    };
    const uint32_t                          reserved19[2];
    union
    {
        volatile const uint32_t             GPTMTnPS;
        TB_GPTMPS_TypeDef                   GPTMTnPS_Bit;
    };
    const uint32_t                          reserved21[1];
    union
    {
        volatile const uint32_t             GPTMTnPV;
        TB_GPWTMPV_TypeDef                  GPTMTnPV_Bit;
    };
    const uint32_t                          reserved23[997];
}GPWTM_TB_TypeDef;


typedef volatile struct
{
    const uint32_t                          reserved[2*32];
    union
    {
        volatile uint32_t                   GPTMTnMR[32];
        BITBANDING_TB_GPTMMR_TypeDef        GPTMTnMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnCTL[32];
        BITBANDING_TB_GPTMCTL_TypeDef       GPTMTnCTL_Bit;
    };
    const uint32_t                          reserved3[2*32];
    union
    {
        volatile uint32_t                   GPTMTnIMR[32];
        BITBANDING_TB_GPTMIMR_TypeDef       GPTMTnIMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnRIS[32];
        BITBANDING_TB_GPTMRIS_TypeDef       GPTMTnRIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnMIS[32];
        BITBANDING_TB_GPTMMIS_TypeDef       GPTMTnMIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnICR[32];
        BITBANDING_TB_GPTMICR_TypeDef       GPTMTnICR_Bit;
    };
    const uint32_t                          reserved9[1*32];
    union
    {
        volatile uint32_t                   GPTMTnILR[32];
        BITBANDING_TB_GPWTMILR_TypeDef      GPTMTnILR_Bit;
    };
    const uint32_t                          reserved11[1*32];
    union
    {
        volatile uint32_t                   GPTMTnMATCHR[32];
        BITBANDING_TB_GPWTMMATCHR_TypeDef   GPTMTnMSTCHR_Bit;
    };
    const uint32_t                          reserved13[1*32];
    union
    {
        volatile uint32_t                   GPTMTnPR[32];
        BITBANDING_TB_GPWTMPR_TypeDef       GPTMTnPR_Bit;
    };
    const uint32_t                          reserved15[1*32];
    union
    {
        volatile uint32_t                   GPTMTnPMR[32];
        BITBANDING_TB_GPWTMPMR_TypeDef      GPTMTnPMR_Bit;
    };
    const uint32_t                          reserved17[1*32];
    union
    {
        volatile const uint32_t             GPTMTnR[32];
        BITBANDING_TB_GPTMR_TypeDef         GPTMTnR_Bit;
    };
    const uint32_t                          reserved18[1*32];
    union
    {
        volatile uint32_t                   GPTMTnV[32];
        BITBANDING_TB_GPTMV_TypeDef         GPTMTnV_Bit;
    };
    const uint32_t                          reserved19[2*32];
    union
    {
        volatile const uint32_t             GPTMTnPS[32];
        BITBANDING_TB_GPTMPS_TypeDef        GPTMTnPS_Bit;
    };
    const uint32_t                          reserved21[1*32];
    union
    {
        volatile const uint32_t             GPTMTnPV[32];
        BITBANDING_TB_GPWTMPV_TypeDef       GPTMTnPV_Bit;
    };
    const uint32_t                          reserved23[997*32];
}GPWTM_BITBANDING_TB_TypeDef;


typedef volatile struct
{

    const uint32_t                          reserved[1];
    union
    {
        volatile uint32_t                   GPTMTnMR;
        TW_GPTMMR_TypeDef                   GPTMTnMR_Bit;
    };
    const uint32_t                          reserved1[1];
    union
    {
        volatile uint32_t                   GPTMTnCTL;
        TW_GPTMCTL_TypeDef                  GPTMTnCTL_Bit;
    };
    const uint32_t                          reserved3[2];
    union
    {
        volatile uint32_t                   GPTMTnIMR;
        TW_GPWTMIMR_TypeDef                 GPTMTnIMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnRIS;
        TW_GPWTMRIS_TypeDef                 GPTMTnRIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnMIS;
        TW_GPWTMMIS_TypeDef                 GPTMTnMIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnICR;
        TW_GPWTMICR_TypeDef                 GPTMTnICR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnILR_LOW;
        TW_GPWTMILR_LOW_TypeDef             GPTMTnILR_LOW_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnILR_HIGH;
        TW_GPWTMILR_HIGH_TypeDef            GPTMTnILR_HIGH_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnMATCHR_LOW;
        TW_GPWTMMATCHR_LOW_TypeDef          GPTMTnMATCHR_LOW_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnMATCHR_HIGH;
        TW_GPWTMMATCHR_HIGH_TypeDef         GPTMTnMATCHR_HIGH_Bit;
    };
    const uint32_t                          reserved5[4];
    union
    {
        volatile const uint32_t             GPTMTnR_LOW;
        TW_GPWTMR_LOW_TypeDef               GPTMTnR_LOW_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMTnR_HIGH;
        TW_GPWTMR_HIGH_TypeDef              GPTMTnR_HIGH_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnV_LOW;
        TW_GPWTMV_LOW_TypeDef               GPTMTnV_LOW_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnV_HIGH;
        TW_GPWTMV_HIGH_TypeDef              GPTMTnV_HIGH_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMRTCPD;
        TW_GPTMRTCPD_TypeDef                GPTMRTCPD_Bit;
    };
    const uint32_t                          reserved9[1001];

}GPWTM_TW_TypeDef;


typedef volatile struct
{

    const uint32_t                          reserved[1*32];
    union
    {
        volatile uint32_t                   GPTMTnMR[32];
        BITBANDING_TW_GPTMMR_TypeDef        GPTMTnMR_Bit;
    };
    const uint32_t                          reserved1[1*32];
    union
    {
        volatile uint32_t                   GPTMTnCTL[32];
        BITBANDING_TW_GPTMCTL_TypeDef       GPTMTnCTL_Bit;
    };
    const uint32_t                          reserved3[2*32];
    union
    {
        volatile uint32_t                   GPTMTnIMR[32];
        BITBANDING_TW_GPWTMIMR_TypeDef      GPTMTnIMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnRIS[32];
        BITBANDING_TW_GPWTMRIS_TypeDef      GPTMTnRIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnMIS[32];
        BITBANDING_TW_GPWTMMIS_TypeDef      GPTMTnMIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnICR[32];
        BITBANDING_TW_GPWTMICR_TypeDef      GPTMTnICR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnILR_LOW[32];
        BITBANDING_TW_GPWTMILR_LOW_TypeDef  GPTMTnILR_LOW_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnILR_HIGH[32];
        BITBANDING_TW_GPWTMILR_HIGH_TypeDef GPTMTnILR_HIGH_Bit;
    };
    const uint32_t                          reserved4[1*32];
    union
    {
        volatile uint32_t                   GPTMTnMATCHR_LOW[32];
        BITBANDING_TW_GPWTMMATCHR_LOW_TypeDef GPTMTnMATCHR_LOW_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnMATCHR_HIGH[32];
        BITBANDING_TW_GPWTMMATCHR_HIGH_TypeDef GPTMTnMATCHR_HIGH_Bit;
    };
    const uint32_t                          reserved5[4*32];
    union
    {
        volatile const uint32_t             GPTMTnR_LOW[32];
        BITBANDING_TW_GPWTMR_LOW_TypeDef    GPTMTnR_LOW_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMTnR_HIGH[32];
        BITBANDING_TW_GPWTMR_HIGH_TypeDef   GPTMTnR_HIGH_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnV_LOW[32];
        BITBANDING_TW_GPWTMV_LOW_TypeDef    GPTMTnV_LOW_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTnV_HIGH[32];
        BITBANDING_TW_GPWTMV_HIGH_TypeDef   GPTMTnV_HIGH_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMRTCPD[32];
        BITBANDING_TW_GPTMRTCPD_TypeDef     GPTMRTCPD_Bit;
    };
    const uint32_t                          reserved9[1001*32];

}GPWTM_BITBANDING_TW_TypeDef;


typedef volatile struct
{
    union
    {
        volatile uint32_t                   GPTMCFG;
        GPTMCFG_TypeDef                     GPTMCFG_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTAMR;
        GPTMTAMR_TypeDef                    GPTMTAMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTBMR;
        GPTMTBMR_TypeDef                    GPTMTBMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMCTL;
        GPTMCTL_TypeDef                     GPTMCTL_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMSYNC;
        GPTMSYNC_TypeDef                    GPTMSYNC_Bit;
    };
    const    uint32_t                       reserved;

    union
    {
        volatile uint32_t                   GPTMIMR;
        GPTMIMR_TypeDef                     GPTMIMR_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMRIS;
        GPTMRIS_TypeDef                     GPTMRIS_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMMIS;
        GPTMMIS_TypeDef                     GPTMMIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMICR;
        GPTMICR_TypeDef                     GPTMICR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTAILR;
        GPTMTAILR_TypeDef                   GPTMTAILR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTBILR;
        GPTMTBILR_TypeDef                   GPTMTBILR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTAMATCHR;
        GPTMTAMATCHR_TypeDef                GPTMTAMATCHR_Bit;
    };

    union
    {
        volatile uint32_t                   GPTMTBMATCHR;
        GPTMTBMATCHR_TypeDef                GPTMTBMATCHR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTAPR;
        GPTMTAPR_TypeDef                    GPTMTAPR_Bit;
    };

    union
    {
        volatile uint32_t                   GPTMTBPR;
        GPTMTBPR_TypeDef                    GPTMTBPR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTAPMR;
        GPTMTAPMR_TypeDef                   GPTMTAPMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTBPMR;
        GPTMTBPMR_TypeDef                   GPTMTBPMR_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMTAR;
        GPTMTAR_TypeDef                     GPTMTAR_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMTBR;
        GPTMTBR_TypeDef                     GPTMTBR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTAV;
        GPTMTAV_TypeDef                     GPTMTAV_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTBV;
        GPTMTBV_TypeDef                     GPTMTBV_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMRTCPD;
        GPTMRTCPD_TypeDef                   GPTMRTCPD_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMTAPS;
        GPTMTAPS_TypeDef                    GPTMTAPS_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMTBPS;
        GPTMTBPS_TypeDef                    GPTMTBPS_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMTAPV;
        GPTMTAPV_TypeDef                    GPTMTAPV_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMTBPV;
        GPTMTBPV_TypeDef                    GPTMTBPV_Bit;
    };

    const    uint32_t                       reserved1[981];


    union
    {
        volatile const uint32_t             GPTMPP;
        GPTMPP_TypeDef                      GPTMPP_Bit;
    };

    const uint32_t                          reserved2[15];
}GPTM_TypeDef;

typedef volatile struct
{
    union
    {
        volatile uint32_t                   GPTMCFG[32];
        BITBANDING_GPTMCFG_TypeDef          GPTMCFG_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTAMR[32];
        BITBANDING_GPTMTAMR_TypeDef         GPTMTAMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTBMR[32];
        BITBANDING_GPTMTBMR_TypeDef         GPTMTBMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMCTL[32];
        BITBANDING_GPTMCTL_TypeDef          GPTMCTL_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMSYNC[32];
        BITBANDING_GPTMSYNC_TypeDef         GPTMSYNC_Bit;
    };
    const    uint32_t                       reserved[32];

    union
    {
        volatile uint32_t                   GPTMIMR[32];
        BITBANDING_GPTMIMR_TypeDef          GPTMIMR_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMRIS[32];
        BITBANDING_GPTMRIS_TypeDef          GPTMRIS_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMMIS[32];
        BITBANDING_GPTMMIS_TypeDef          GPTMMIS_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMICR[32];
        BITBANDING_GPTMICR_TypeDef          GPTMICR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTAILR[32];
        BITBANDING_GPTMTAILR_TypeDef        GPTMTAILR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTBILR[32];
        BITBANDING_GPTMTBILR_TypeDef        GPTMTBILR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTAMATCHR[32];
        BITBANDING_GPTMTAMATCHR_TypeDef     GPTMTAMATCHR_Bit;
    };

    union
    {
        volatile uint32_t                   GPTMTBMATCHR[32];
        BITBANDING_GPTMTBMATCHR_TypeDef     GPTMTBMATCHR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTAPR[32];
        BITBANDING_GPTMTAPR_TypeDef         GPTMTAPR_Bit;
    };

    union
    {
        volatile uint32_t                   GPTMTBPR[32];
        BITBANDING_GPTMTBPR_TypeDef         GPTMTBPR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTAPMR[32];
        BITBANDING_GPTMTAPMR_TypeDef        GPTMTAPMR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTBPMR[32];
        BITBANDING_GPTMTBPMR_TypeDef        GPTMTBPMR_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMTAR[32];
        BITBANDING_GPTMTAR_TypeDef          GPTMTAR_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMTBR[32];
        BITBANDING_GPTMTBR_TypeDef          GPTMTBR_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTAV[32];
        BITBANDING_GPTMTAV_TypeDef          GPTMTAV_Bit;
    };
    union
    {
        volatile uint32_t                   GPTMTBV[32];
        BITBANDING_GPTMTBV_TypeDef          GPTMTBV_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMRTCPD[32];
        BITBANDING_GPTMRTCPD_TypeDef        GPTMRTCPD_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMTAPS[32];
        BITBANDING_GPTMTAPS_TypeDef         GPTMTAPS_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMTBPS[32];
        BITBANDING_GPTMTBPS_TypeDef         GPTMTBPS_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMTAPV[32];
        BITBANDING_GPTMTAPV_TypeDef         GPTMTAPV_Bit;
    };
    union
    {
        volatile const uint32_t             GPTMTBPV[32];
        BITBANDING_GPTMTBPV_TypeDef         GPTMTBPV_Bit;
    };

    const    uint32_t                       reserved1[981*32];


    union
    {
        volatile const uint32_t             GPTMPP[32];
        BITBANDING_GPTMPP_TypeDef           GPTMPP_Bit;
    };

    const uint32_t                          reserved2[15*32];
}GPTM_BITBANDING_TypeDef;

typedef volatile struct
{
    GPTM_TypeDef                            T[6];
}GPTMS_TypeDef;

typedef volatile struct
{
    GPTM_TypeDef                            T01[2];
    GPTM_TypeDef                            reserved[20];
    GPTM_TypeDef                            T25[4];
}GPWTMS_TypeDef;

typedef volatile struct
{
    GPTM_BITBANDING_TypeDef                 T[6];
}GPTMS_BITBANDING_TypeDef;

typedef volatile struct
{
    GPTM_BITBANDING_TypeDef                 T01[2];
    GPTM_BITBANDING_TypeDef                 reserved[20];
    GPTM_BITBANDING_TypeDef                 T25[4];
}GPWTMS_BITBANDING_TypeDef;

typedef volatile struct
{
    union
    {
        GPTM_CTL_TypeDef                    CTL[6];
        GPTM_TA_TypeDef                     TA[6];
        GPTM_TB_TypeDef                     TB[6];
        GPTM_TW_TypeDef                     TW[6];
    };
}GPTM_UNION_TypeDef;


typedef volatile struct
{
    union
    {
        GPTM_BITBANDING_CTL_TypeDef         CTL[6];
        GPTM_BITBANDING_TA_TypeDef          TA[6];
        GPTM_BITBANDING_TB_TypeDef          TB[6];
        GPTM_BITBANDING_TW_TypeDef          TW[6];
    };
}GPTM_BITBANDING_UNION_TypeDef;

typedef volatile struct
{
    union
    {
        GPWTM_CTL_TypeDef                   CTL01[2];
        GPWTM_TA_TypeDef                    TA01[2];
        GPWTM_TB_TypeDef                    TB01[2];
        GPWTM_TW_TypeDef                    TW01[2];
    };
     GPWTM_CTL_TypeDef                      reserved[20];
     union
     {
         GPWTM_CTL_TypeDef                  CTL25[4];
         GPWTM_TA_TypeDef                   TA25[4];
         GPWTM_TB_TypeDef                   TB25[4];
         GPWTM_TW_TypeDef                   TW25[4];
     };
}GPWTM_UNION_TypeDef;

typedef volatile struct
{
    union
    {
        GPWTM_BITBANDING_CTL_TypeDef        CTL01[2];
        GPWTM_BITBANDING_TA_TypeDef         TA01[2];
        GPWTM_BITBANDING_TB_TypeDef         TB01[2];
        GPWTM_BITBANDING_TW_TypeDef         TW01[2];
    };
     GPWTM_BITBANDING_CTL_TypeDef           reserved[20];
     union
     {
         GPWTM_BITBANDING_CTL_TypeDef       CTL25[4];
         GPWTM_BITBANDING_TA_TypeDef        TA25[4];
         GPWTM_BITBANDING_TB_TypeDef        TB25[4];
         GPWTM_BITBANDING_TW_TypeDef        TW25[4];
     };
}GPWTM_BITBANDING_UNION_TypeDef;



#define GPTM                     (((GPTMS_TypeDef*)(GPTM_BASE)))
#define GPTM_UNION               (((GPTM_UNION_TypeDef*)(GPTM_BASE)))
#define GPTM_BITBANDING          (((GPTM_BITBANDING_TypeDef*)(GPTM_BASE_BITBANDING+(GPTM_OFFSET*32))))
#define GPTM_BITBANDING_UNION    (((GPTM_BITBANDING_UNION_TypeDef*)(GPTM_BASE_BITBANDING+(GPTM_OFFSET*32))))

#define GPTM0                    (((GPTM_TypeDef*)(GPTM0_BASE)))
#define GPTM0_CTL                (((GPTM_CTL_TypeDef*)(GPTM0_BASE)))
#define GPTM0_TA                 (((GPTM_TA_TypeDef*)(GPTM0_BASE)))
#define GPTM0_TB                 (((GPTM_TB_TypeDef*)(GPTM0_BASE)))
#define GPTM0_TW                 (((GPTM_TW_TypeDef*)(GPTM0_BASE)))

#define GPTM1                    (((GPTM_TypeDef*)(GPTM1_BASE)))
#define GPTM1_CTL                (((GPTM_CTL_TypeDef*)(GPTM1_BASE)))
#define GPTM1_TA                 (((GPTM_TA_TypeDef*)(GPTM1_BASE)))
#define GPTM1_TB                 (((GPTM_TB_TypeDef*)(GPTM1_BASE)))
#define GPTM1_TW                 (((GPTM_TW_TypeDef*)(GPTM1_BASE)))

#define GPTM2                    (((GPTM_TypeDef*)(GPTM2_BASE)))
#define GPTM2_CTL                (((GPTM_CTL_TypeDef*)(GPTM2_BASE)))
#define GPTM2_TA                 (((GPTM_TA_TypeDef*)(GPTM2_BASE)))
#define GPTM2_TB                 (((GPTM_TB_TypeDef*)(GPTM2_BASE)))
#define GPTM2_TW                 (((GPTM_TW_TypeDef*)(GPTM2_BASE)))

#define GPTM3                    (((GPTM_TypeDef*)(GPTM3_BASE)))
#define GPTM3_CTL                (((GPTM_CTL_TypeDef*)(GPTM3_BASE)))
#define GPTM3_TA                 (((GPTM_TA_TypeDef*)(GPTM3_BASE)))
#define GPTM3_TB                 (((GPTM_TB_TypeDef*)(GPTM3_BASE)))
#define GPTM3_TW                 (((GPTM_TW_TypeDef*)(GPTM3_BASE)))


#define GPTM4                    (((GPTM_TypeDef*)(GPTM4_BASE)))
#define GPTM4_CTL                (((GPTM_CTL_TypeDef*)(GPTM4_BASE)))
#define GPTM4_TA                 (((GPTM_TA_TypeDef*)(GPTM4_BASE)))
#define GPTM4_TB                 (((GPTM_TB_TypeDef*)(GPTM4_BASE)))
#define GPTM4_TW                 (((GPTM_TW_TypeDef*)(GPTM4_BASE)))


#define GPTM5                    (((GPTM_TypeDef*)(GPTM5_BASE)))
#define GPTM5_CTL                (((GPTM_CTL_TypeDef*)(GPTM5_BASE)))
#define GPTM5_TA                 (((GPTM_TA_TypeDef*)(GPTM5_BASE)))
#define GPTM5_TB                 (((GPTM_TB_TypeDef*)(GPTM5_BASE)))
#define GPTM5_TW                 (((GPTM_TW_TypeDef*)(GPTM5_BASE)))



#define GPTM0_BITBANDING          (((GPTM_BITBANDING_TypeDef*) (GPTM_BASE_BITBANDING+(GPTM0_OFFSET*32))))
#define GPTM0_BITBANDING_CTL      (((GPTM_BITBANDING_CTL_TypeDef*) (GPTM_BASE_BITBANDING+(GPTM0_OFFSET*32))))
#define GPTM0_BITBANDING_TA       (((GPTM_BITBANDING_TA_TypeDef*)  (GPTM_BASE_BITBANDING+(GPTM0_OFFSET*32))))
#define GPTM0_BITBANDING_TB       (((GPTM_BITBANDING_TB_TypeDef*)  (GPTM_BASE_BITBANDING+(GPTM0_OFFSET*32))))
#define GPTM0_BITBANDING_TW       (((GPTM_BITBANDING_TW_TypeDef*)  (GPTM_BASE_BITBANDING+(GPTM0_OFFSET*32))))

#define GPTM1_BITBANDING          (((GPTM_BITBANDING_TypeDef*) (GPTM_BASE_BITBANDING+(GPTM1_OFFSET*32))))
#define GPTM1_BITBANDING_CTL      (((GPTM_BITBANDING_CTL_TypeDef*) (GPTM_BASE_BITBANDING+(GPTM1_OFFSET*32))))
#define GPTM1_BITBANDING_TA       (((GPTM_BITBANDING_TA_TypeDef*)  (GPTM_BASE_BITBANDING+(GPTM1_OFFSET*32))))
#define GPTM1_BITBANDING_TB       (((GPTM_BITBANDING_TB_TypeDef*)  (GPTM_BASE_BITBANDING+(GPTM1_OFFSET*32))))
#define GPTM1_BITBANDING_TW       (((GPTM_BITBANDING_TW_TypeDef*)  (GPTM_BASE_BITBANDING+(GPTM1_OFFSET*32))))

#define GPTM2_BITBANDING          (((GPTM_BITBANDING_TypeDef*) (GPTM_BASE_BITBANDING+(GPTM2_OFFSET*32))))
#define GPTM2_BITBANDING_CTL      (((GPTM_BITBANDING_CTL_TypeDef*) (GPTM_BASE_BITBANDING+(GPTM2_OFFSET*32))))
#define GPTM2_BITBANDING_TA       (((GPTM_BITBANDING_TA_TypeDef*)  (GPTM_BASE_BITBANDING+(GPTM2_OFFSET*32))))
#define GPTM2_BITBANDING_TB       (((GPTM_BITBANDING_TB_TypeDef*)  (GPTM_BASE_BITBANDING+(GPTM2_OFFSET*32))))
#define GPTM2_BITBANDING_TW       (((GPTM_BITBANDING_TW_TypeDef*)  (GPTM_BASE_BITBANDING+(GPTM2_OFFSET*32))))

#define GPTM3_BITBANDING          (((GPTM_BITBANDING_TypeDef*) (GPTM_BASE_BITBANDING+(GPTM3_OFFSET*32))))
#define GPTM3_BITBANDING_CTL      (((GPTM_BITBANDING_CTL_TypeDef*) (GPTM_BASE_BITBANDING+(GPTM3_OFFSET*32))))
#define GPTM3_BITBANDING_TA       (((GPTM_BITBANDING_TA_TypeDef*)  (GPTM_BASE_BITBANDING+(GPTM3_OFFSET*32))))
#define GPTM3_BITBANDING_TB       (((GPTM_BITBANDING_TB_TypeDef*)  (GPTM_BASE_BITBANDING+(GPTM3_OFFSET*32))))
#define GPTM3_BITBANDING_TW       (((GPTM_BITBANDING_TW_TypeDef*)  (GPTM_BASE_BITBANDING+(GPTM3_OFFSET*32))))

#define GPTM4_BITBANDING          (((GPTM_BITBANDING_TypeDef*) (GPTM_BASE_BITBANDING+(GPTM4_OFFSET*32))))
#define GPTM4_BITBANDING_CTL      (((GPTM_BITBANDING_CTL_TypeDef*) (GPTM_BASE_BITBANDING+(GPTM4_OFFSET*32))))
#define GPTM4_BITBANDING_TA       (((GPTM_BITBANDING_TA_TypeDef*)  (GPTM_BASE_BITBANDING+(GPTM4_OFFSET*32))))
#define GPTM4_BITBANDING_TB       (((GPTM_BITBANDING_TB_TypeDef*)  (GPTM_BASE_BITBANDING+(GPTM4_OFFSET*32))))
#define GPTM4_BITBANDING_TW       (((GPTM_BITBANDING_TW_TypeDef*)  (GPTM_BASE_BITBANDING+(GPTM4_OFFSET*32))))

#define GPTM5_BITBANDING          (((GPTM_BITBANDING_TypeDef*) (GPTM_BASE_BITBANDING+(GPTM5_OFFSET*32))))
#define GPTM5_BITBANDING_CTL      (((GPTM_BITBANDING_CTL_TypeDef*) (GPTM_BASE_BITBANDING+(GPTM5_OFFSET*32))))
#define GPTM5_BITBANDING_TA       (((GPTM_BITBANDING_TA_TypeDef*)  (GPTM_BASE_BITBANDING+(GPTM5_OFFSET*32))))
#define GPTM5_BITBANDING_TB       (((GPTM_BITBANDING_TB_TypeDef*)  (GPTM_BASE_BITBANDING+(GPTM5_OFFSET*32))))
#define GPTM5_BITBANDING_TW       (((GPTM_BITBANDING_TW_TypeDef*)  (GPTM_BASE_BITBANDING+(GPTM5_OFFSET*32))))


#define GPWTM                     (((GPWTMS_TypeDef*)(GPWTM_BASE)))
#define GPWTM_UNION               (((GPWTM_UNION_TypeDef*)(GPWTM_BASE)))
#define GPWTM_BITBANDING          (((GPWTMS_BITBANDING_TypeDef*)(GPWTM_BASE_BITBANDING+(GPWTM_OFFSET*32))))
#define GPWTM_BITBANDING_UNION    (((GPWTM_BITBANDING_UNION_TypeDef*)(GPWTM_BASE_BITBANDING+(GPWTM_OFFSET*32))))

#define GPWTM0                    (((GPTM_TypeDef*)(GPWTM0_BASE)))
#define GPWTM0_CTL                (((GPWTM_CTL_TypeDef*)(GPWTM0_BASE)))
#define GPWTM0_TA                 (((GPWTM_TA_TypeDef*)(GPWTM0_BASE)))
#define GPWTM0_TB                 (((GPWTM_TB_TypeDef*)(GPWTM0_BASE)))
#define GPWTM0_TW                 (((GPWTM_TW_TypeDef*)(GPWTM0_BASE)))

#define GPWTM1                    (((GPTM_TypeDef*)(GPWTM1_BASE)))
#define GPWTM1_CTL                (((GPWTM_CTL_TypeDef*)(GPWTM1_BASE)))
#define GPWTM1_TA                 (((GPWTM_TA_TypeDef*)(GPWTM1_BASE)))
#define GPWTM1_TB                 (((GPWTM_TB_TypeDef*)(GPWTM1_BASE)))
#define GPWTM1_TW                 (((GPWTM_TW_TypeDef*)(GPWTM1_BASE)))

#define GPWTM2                    (((GPTM_TypeDef*)(GPWTM2_BASE)))
#define GPWTM2_CTL                (((GPWTM_CTL_TypeDef*)(GPWTM2_BASE)))
#define GPWTM2_TA                 (((GPWTM_TA_TypeDef*)(GPWTM2_BASE)))
#define GPWTM2_TB                 (((GPWTM_TB_TypeDef*)(GPWTM2_BASE)))
#define GPWTM2_TW                 (((GPWTM_TW_TypeDef*)(GPWTM2_BASE)))

#define GPWTM3                    (((GPTM_TypeDef*)(GPWTM3_BASE)))
#define GPWTM3_CTL                (((GPWTM_CTL_TypeDef*)(GPWTM3_BASE)))
#define GPWTM3_TA                 (((GPWTM_TA_TypeDef*)(GPWTM3_BASE)))
#define GPWTM3_TB                 (((GPWTM_TB_TypeDef*)(GPWTM3_BASE)))
#define GPWTM3_TW                 (((GPWTM_TW_TypeDef*)(GPWTM3_BASE)))

#define GPWTM4                    (((GPTM_TypeDef*)(GPWTM4_BASE)))
#define GPWTM4_CTL                (((GPWTM_CTL_TypeDef*)(GPWTM4_BASE)))
#define GPWTM4_TA                 (((GPWTM_TA_TypeDef*)(GPWTM4_BASE)))
#define GPWTM4_TB                 (((GPWTM_TB_TypeDef*)(GPWTM4_BASE)))
#define GPWTM4_TW                 (((GPWTM_TW_TypeDef*)(GPWTM4_BASE)))

#define GPWTM5                    (((GPTM_TypeDef*)(GPWTM5_BASE)))
#define GPWTM5_CTL                (((GPWTM_CTL_TypeDef*)(GPWTM5_BASE)))
#define GPWTM5_TA                 (((GPWTM_TA_TypeDef*)(GPWTM5_BASE)))
#define GPWTM5_TB                 (((GPWTM_TB_TypeDef*)(GPWTM5_BASE)))
#define GPWTM5_TW                 (((GPWTM_TW_TypeDef*)(GPWTM5_BASE)))

#define GPWTM0_BITBANDING         (((GPTM_BITBANDING_TypeDef*) (GPWTM_BASE_BITBANDING+(GPWTM0_OFFSET*32))))
#define GPWTM0_BITBANDING_CTL     (((GPWTM_BITBANDING_CTL_TypeDef*) (GPWTM_BASE_BITBANDING+(GPWTM0_OFFSET*32))))
#define GPWTM0_BITBANDING_TA      (((GPWTM_BITBANDING_TA_TypeDef*)  (GPWTM_BASE_BITBANDING+(GPWTM0_OFFSET*32))))
#define GPWTM0_BITBANDING_TB      (((GPWTM_BITBANDING_TB_TypeDef*)  (GPWTM_BASE_BITBANDING+(GPWTM0_OFFSET*32))))
#define GPWTM0_BITBANDING_TW      (((GPWTM_BITBANDING_TW_TypeDef*)  (GPWTM_BASE_BITBANDING+(GPWTM0_OFFSET*32))))

#define GPWTM1_BITBANDING         (((GPTM_BITBANDING_TypeDef*) (GPWTM_BASE_BITBANDING+(GPWTM1_OFFSET*32))))
#define GPWTM1_BITBANDING_CTL     (((GPWTM_BITBANDING_CTL_TypeDef*) (GPWTM_BASE_BITBANDING+(GPWTM1_OFFSET*32))))
#define GPWTM1_BITBANDING_TA      (((GPWTM_BITBANDING_TA_TypeDef*)  (GPWTM_BASE_BITBANDING+(GPWTM1_OFFSET*32))))
#define GPWTM1_BITBANDING_TB      (((GPWTM_BITBANDING_TB_TypeDef*)  (GPWTM_BASE_BITBANDING+(GPWTM1_OFFSET*32))))
#define GPWTM1_BITBANDING_TW      (((GPWTM_BITBANDING_TW_TypeDef*)  (GPWTM_BASE_BITBANDING+(GPWTM1_OFFSET*32))))

#define GPWTM2_BITBANDING         (((GPTM_BITBANDING_TypeDef*) (GPWTM_BASE_BITBANDING+(GPWTM2_OFFSET*32))))
#define GPWTM2_BITBANDING_CTL     (((GPWTM_BITBANDING_CTL_TypeDef*) (GPWTM_BASE_BITBANDING+(GPWTM2_OFFSET*32))))
#define GPWTM2_BITBANDING_TA      (((GPWTM_BITBANDING_TA_TypeDef*)  (GPWTM_BASE_BITBANDING+(GPWTM2_OFFSET*32))))
#define GPWTM2_BITBANDING_TB      (((GPWTM_BITBANDING_TB_TypeDef*)  (GPWTM_BASE_BITBANDING+(GPWTM2_OFFSET*32))))
#define GPWTM2_BITBANDING_TW      (((GPWTM_BITBANDING_TW_TypeDef*)  (GPWTM_BASE_BITBANDING+(GPWTM2_OFFSET*32))))

#define GPWTM3_BITBANDING         (((GPTM_BITBANDING_TypeDef*) (GPWTM_BASE_BITBANDING+(GPWTM3_OFFSET*32))))
#define GPWTM3_BITBANDING_CTL     (((GPWTM_BITBANDING_CTL_TypeDef*) (GPWTM_BASE_BITBANDING+(GPWTM3_OFFSET*32))))
#define GPWTM3_BITBANDING_TA      (((GPWTM_BITBANDING_TA_TypeDef*)  (GPWTM_BASE_BITBANDING+(GPWTM3_OFFSET*32))))
#define GPWTM3_BITBANDING_TB      (((GPWTM_BITBANDING_TB_TypeDef*)  (GPWTM_BASE_BITBANDING+(GPWTM3_OFFSET*32))))
#define GPWTM3_BITBANDING_TW      (((GPWTM_BITBANDING_TW_TypeDef*)  (GPWTM_BASE_BITBANDING+(GPWTM3_OFFSET*32))))

#define GPWTM4_BITBANDING         (((GPTM_BITBANDING_TypeDef*) (GPWTM_BASE_BITBANDING+(GPWTM4_OFFSET*32))))
#define GPWTM4_BITBANDING_CTL     (((GPWTM_BITBANDING_CTL_TypeDef*) (GPWTM_BASE_BITBANDING+(GPWTM4_OFFSET*32))))
#define GPWTM4_BITBANDING_TA      (((GPWTM_BITBANDING_TA_TypeDef*)  (GPWTM_BASE_BITBANDING+(GPWTM4_OFFSET*32))))
#define GPWTM4_BITBANDING_TB      (((GPWTM_BITBANDING_TB_TypeDef*)  (GPWTM_BASE_BITBANDING+(GPWTM4_OFFSET*32))))
#define GPWTM4_BITBANDING_TW      (((GPWTM_BITBANDING_TW_TypeDef*)  (GPWTM_BASE_BITBANDING+(GPWTM4_OFFSET*32))))

#define GPWTM5_BITBANDING         (((GPTM_BITBANDING_TypeDef*) (GPWTM_BASE_BITBANDING+(GPWTM5_OFFSET*32))))
#define GPWTM5_BITBANDING_CTL     (((GPWTM_BITBANDING_CTL_TypeDef*) (GPWTM_BASE_BITBANDING+(GPWTM5_OFFSET*32))))
#define GPWTM5_BITBANDING_TA      (((GPWTM_BITBANDING_TA_TypeDef*)  (GPWTM_BASE_BITBANDING+(GPWTM5_OFFSET*32))))
#define GPWTM5_BITBANDING_TB      (((GPWTM_BITBANDING_TB_TypeDef*)  (GPWTM_BASE_BITBANDING+(GPWTM5_OFFSET*32))))
#define GPWTM5_BITBANDING_TW      (((GPWTM_BITBANDING_TW_TypeDef*)  (GPWTM_BASE_BITBANDING+(GPWTM5_OFFSET*32))))



#define GPTM_GPTMCFG_OFFSET                 (0x0000)
#define GPTM_CTL_GPTMCFG_OFFSET             (0x0000)
#define GPWTM_GPTMCFG_OFFSET                (0x0000)
#define GPWTM_CTL_GPTMCFG_OFFSET            (0x0000)

#define GPTM_GPTMTAMR_OFFSET                (0x0004)
#define GPTM_TA_GPTMTnMR_OFFSET             (0x0004)
#define GPTM_TW_GPTMTnMR_OFFSET             (0x0004)
#define GPWTM_GPTMTAMR_OFFSET               (0x0004)
#define GPWTM_TA_GPTMTnMR_OFFSET            (0x0004)
#define GPWTM_TW_GPTMTnMR_OFFSET            (0x0004)

#define GPTM_GPTMTBMR_OFFSET                (0x0008)
#define GPTM_TB_GPTMTnMR_OFFSET             (0x0008)
#define GPWTM_GPTMTBMR_OFFSET               (0x0008)
#define GPWTM_TB_GPTMTnMR_OFFSET            (0x0008)

#define GPTM_GPTMCTL_OFFSET                 (0x000C)
#define GPTM_TA_GPTMTnCTL_OFFSET            (0x000C)
#define GPTM_TB_GPTMTnCTL_OFFSET            (0x000C)
#define GPTM_TW_GPTMTnCTL_OFFSET            (0x000C)
#define GPWTM_GPTMCTL_OFFSET                (0x000C)
#define GPWTM_TA_GPTMTnCTL_OFFSET           (0x000C)
#define GPWTM_TB_GPTMTnCTL_OFFSET           (0x000C)
#define GPWTM_TW_GPTMTnCTL_OFFSET           (0x000C)

#define GPTM_GPTMSYNC_OFFSET                (0x0010)
#define GPTM_CTL_GPTMSYNC_OFFSET            (0x0010)

#define GPTM_GPTMIMR_OFFSET                 (0x0018)
#define GPTM_TA_GPTMTnIMR_OFFSET            (0x0018)
#define GPTM_TB_GPTMTnIMR_OFFSET            (0x0018)
#define GPTM_TW_GPTMTnIMR_OFFSET            (0x0018)
#define GPWTM_GPTMIMR_OFFSET                (0x0018)
#define GPWTM_TA_GPTMTnIMR_OFFSET           (0x0018)
#define GPWTM_TB_GPTMTnIMR_OFFSET           (0x0018)
#define GPWTM_TW_GPTMTnIMR_OFFSET           (0x0018)

#define GPTM_GPTMRIS_OFFSET                 (0x001C)
#define GPTM_TA_GPTMTnRIS_OFFSET            (0x001C)
#define GPTM_TB_GPTMTnRIS_OFFSET            (0x001C)
#define GPTM_TW_GPTMTnRIS_OFFSET            (0x001C)
#define GPWTM_GPTMRIS_OFFSET                (0x001C)
#define GPWTM_TA_GPTMTnRIS_OFFSET           (0x001C)
#define GPWTM_TB_GPTMTnRIS_OFFSET           (0x001C)
#define GPWTM_TW_GPTMTnRIS_OFFSET           (0x001C)

#define GPTM_GPTMMIS_OFFSET                 (0x0020)
#define GPTM_TA_GPTMTnMIS_OFFSET            (0x0020)
#define GPTM_TB_GPTMTnMIS_OFFSET            (0x0020)
#define GPTM_TW_GPTMTnMIS_OFFSET            (0x0020)
#define GPWTM_GPTMMIS_OFFSET                (0x0020)
#define GPWTM_TA_GPTMTnMIS_OFFSET           (0x0020)
#define GPWTM_TB_GPTMTnMIS_OFFSET           (0x0020)
#define GPWTM_TW_GPTMTnMIS_OFFSET           (0x0020)

#define GPTM_GPTMICR_OFFSET                 (0x0024)
#define GPTM_TA_GPTMTnICR_OFFSET            (0x0024)
#define GPTM_TB_GPTMTnICR_OFFSET            (0x0024)
#define GPTM_TW_GPTMTnICR_OFFSET            (0x0024)
#define GPWTM_GPTMICR_OFFSET                (0x0024)
#define GPWTM_TA_GPTMTnICR_OFFSET           (0x0024)
#define GPWTM_TB_GPTMTnICR_OFFSET           (0x0024)
#define GPWTM_TW_GPTMTnICR_OFFSET           (0x0024)

#define GPTM_GPTMTAILR_OFFSET               (0x0028)
#define GPTM_TA_GPTMTnILR_OFFSET            (0x0028)
#define GPTM_TW_GPTMTnILR_OFFSET            (0x0028)
#define GPWTM_GPTMTAILR_OFFSET              (0x0028)
#define GPWTM_TA_GPTMTnILR_OFFSET           (0x0028)
#define GPWTM_TW_GPTMTnILR_LOW_OFFSET       (0x0028)

#define GPTM_GPTMTBILR_OFFSET               (0x002C)
#define GPTM_TB_GPTMTnILR_OFFSET            (0x002C)
#define GPWTM_GPTMTBILR_OFFSET              (0x002C)
#define GPWTM_TB_GPTMTnILR_OFFSET           (0x002C)
#define GPWTM_TW_GPTMTnILR_HIGH_OFFSET      (0x002C)

#define GPTM_GPTMTAMATCHR_OFFSET            (0x0030)
#define GPTM_TA_GPTMTnMATCHR_OFFSET         (0x0030)
#define GPTM_TW_GPTMTnMATCHR_OFFSET         (0x0030)
#define GPWTM_GPTMTAMATCHR_OFFSET           (0x0030)
#define GPWTM_TA_GPTMTnMATCHR_OFFSET        (0x0030)
#define GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET    (0x0030)

#define GPTM_GPTMTBMATCHR_OFFSET            (0x0034)
#define GPTM_TB_GPTMTnMATCHR_OFFSET         (0x0034)
#define GPWTM_GPTMTBMATCHR_OFFSET           (0x0034)
#define GPWTM_TB_GPTMTnMATCHR_OFFSET        (0x0034)
#define GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET   (0x0034)

#define GPTM_GPTMTAPR_OFFSET                (0x0038)
#define GPTM_TA_GPTMTnPR_OFFSET             (0x0038)
#define GPWTM_GPTMTAPR_OFFSET               (0x0038)
#define GPWTM_TA_GPTMTnPR_OFFSET            (0x0038)

#define GPTM_GPTMTBPR_OFFSET                (0x003C)
#define GPTM_TB_GPTMTnPR_OFFSET             (0x003C)
#define GPWTM_GPTMTBPR_OFFSET               (0x003C)
#define GPWTM_TB_GPTMTnPR_OFFSET            (0x003C)

#define GPTM_GPTMTAPMR_OFFSET               (0x0040)
#define GPTM_TA_GPTMTnPMR_OFFSET            (0x0040)
#define GPWTM_GPTMTAPMR_OFFSET              (0x0040)
#define GPWTM_TA_GPTMTnPMR_OFFSET           (0x0040)

#define GPTM_GPTMTBPMR_OFFSET               (0x0044)
#define GPTM_TB_GPTMTnPMR_OFFSET            (0x0044)
#define GPWTM_GPTMTBPMR_OFFSET              (0x0044)
#define GPWTM_TB_GPTMTnPMR_OFFSET           (0x0044)

#define GPTM_GPTMTAR_OFFSET                 (0x0048)
#define GPTM_TA_GPTMTnR_OFFSET              (0x0048)
#define GPTM_TW_GPTMTnR_OFFSET              (0x0048)
#define GPWTM_GPTMTAR_OFFSET                (0x0048)
#define GPWTM_TA_GPTMTnR_OFFSET             (0x0048)
#define GPWTM_TW_GPTMTnR_LOW_OFFSET         (0x0048)

#define GPTM_GPTMTBR_OFFSET                 (0x004C)
#define GPTM_TB_GPTMTnR_OFFSET              (0x004C)
#define GPWTM_GPTMTBR_OFFSET                (0x004C)
#define GPWTM_TB_GPTMTnR_OFFSET             (0x004C)
#define GPWTM_TW_GPTMTnR_HIGH_OFFSET        (0x004C)

#define GPTM_GPTMTAV_OFFSET                 (0x0050)
#define GPTM_TA_GPTMTnV_OFFSET              (0x0050)
#define GPTM_TW_GPTMTnV_OFFSET              (0x0050)
#define GPWTM_GPTMTAV_OFFSET                (0x0050)
#define GPWTM_TA_GPTMTnV_OFFSET             (0x0050)
#define GPWTM_TW_GPTMTnV_LOW_OFFSET         (0x0050)

#define GPTM_GPTMTBV_OFFSET                 (0x0054)
#define GPTM_TB_GPTMTnV_OFFSET              (0x0054)
#define GPWTM_GPTMTBV_OFFSET                (0x0054)
#define GPWTM_TB_GPTMTnV_OFFSET             (0x0054)
#define GPWTM_TW_GPTMTnV_HIGH_OFFSET        (0x0054)

#define GPTM_GPTMRTCPD_OFFSET               (0x0058)
#define GPTM_TW_GPTMRTCPD_OFFSET            (0x0058)
#define GPWTM_GPTMRTCPD_OFFSET              (0x0058)
#define GPWTM_TW_GPTMRTCPD_OFFSET           (0x0058)

#define GPTM_GPTMTAPS_OFFSET                (0x005C)
#define GPTM_TA_GPTMTnPS_OFFSET             (0x005C)
#define GPWTM_GPTMTAPS_OFFSET               (0x005C)
#define GPWTM_TA_GPTMTnPS_OFFSET            (0x005C)

#define GPTM_GPTMTBPS_OFFSET                (0x0060)
#define GPTM_TB_GPTMTnPS_OFFSET             (0x0060)
#define GPWTM_GPTMTBPS_OFFSET               (0x0060)
#define GPWTM_TB_GPTMTnPS_OFFSET            (0x0060)

#define GPTM_GPTMTAPV_OFFSET                (0x0064)
#define GPWTM_GPTMTAPV_OFFSET               (0x0064)
#define GPWTM_TA_GPTMTnPV_OFFSET            (0x0064)

#define GPTM_GPTMTBPV_OFFSET                (0x0068)
#define GPWTM_GPTMTBPV_OFFSET               (0x0068)
#define GPWTM_TB_GPTMTnPV_OFFSET            (0x0068)

#define GPTM_GPTMPP_OFFSET                  (0x0FC0)
#define GPTM_CTL_GPTMPP_OFFSET              (0x0FC0)
#define GPWTM_GPTMPP_OFFSET                 (0x0FC0)
#define GPWTM_CTL_GPTMPP_OFFSET             (0x0FC0)

/******************************************************************************************
************************************ 1 GPTMCFG *********************************************
******************************************************************************************/

/* GPTM0 GPTMCFG*/
#define GPTM0_BITBANDING_GPTMCFG        (((BITBANDING_GPTMCFG_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMCFG_OFFSET)*32))))
#define GPTM0_GPTMCFG                   (((GPTMCFG_TypeDef*)(GPTM0_BASE + GPTM_GPTMCFG_OFFSET )))
#define GPTM0_GPTMCFG_R                 (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMCFG_OFFSET)))

#define GPTM0_BITBANDING_CTL_GPTMCFG    (((BITBANDING_GPTMCFG_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_CTL_GPTMCFG_OFFSET)*32))))
#define GPTM0_CTL_GPTMCFG               (((GPTMCFG_TypeDef*)(GPTM0_BASE + GPTM_CTL_GPTMCFG_OFFSET )))
#define GPTM0_CTL_GPTMCFG_R             (*((volatile uint32_t *)(GPTM0_BASE +GPTM_CTL_GPTMCFG_OFFSET)))

/* GPTM1 GPTMCFG*/
#define GPTM1_BITBANDING_GPTMCFG        (((BITBANDING_GPTMCFG_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMCFG_OFFSET)*32))))
#define GPTM1_GPTMCFG                   (((GPTMCFG_TypeDef*)(GPTM1_BASE + GPTM_GPTMCFG_OFFSET )))
#define GPTM1_GPTMCFG_R                 (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMCFG_OFFSET)))

#define GPTM1_BITBANDING_CTL_GPTMCFG    (((BITBANDING_GPTMCFG_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_CTL_GPTMCFG_OFFSET)*32))))
#define GPTM1_CTL_GPTMCFG               (((GPTMCFG_TypeDef*)(GPTM1_BASE + GPTM_CTL_GPTMCFG_OFFSET )))
#define GPTM1_CTL_GPTMCFG_R             (*((volatile uint32_t *)(GPTM1_BASE +GPTM_CTL_GPTMCFG_OFFSET)))

/* GPTM2 GPTMCFG*/
#define GPTM2_BITBANDING_GPTMCFG        (((BITBANDING_GPTMCFG_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMCFG_OFFSET)*32))))
#define GPTM2_GPTMCFG                   (((GPTMCFG_TypeDef*)(GPTM2_BASE + GPTM_GPTMCFG_OFFSET )))
#define GPTM2_GPTMCFG_R                 (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMCFG_OFFSET)))

#define GPTM2_BITBANDING_CTL_GPTMCFG    (((BITBANDING_GPTMCFG_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_CTL_GPTMCFG_OFFSET)*32))))
#define GPTM2_CTL_GPTMCFG               (((GPTMCFG_TypeDef*)(GPTM2_BASE + GPTM_CTL_GPTMCFG_OFFSET )))
#define GPTM2_CTL_GPTMCFG_R             (*((volatile uint32_t *)(GPTM2_BASE +GPTM_CTL_GPTMCFG_OFFSET)))

/* GPTM3 GPTMCFG*/
#define GPTM3_BITBANDING_GPTMCFG        (((BITBANDING_GPTMCFG_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMCFG_OFFSET)*32))))
#define GPTM3_GPTMCFG                   (((GPTMCFG_TypeDef*)(GPTM3_BASE + GPTM_GPTMCFG_OFFSET )))
#define GPTM3_GPTMCFG_R                 (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMCFG_OFFSET)))

#define GPTM3_BITBANDING_CTL_GPTMCFG    (((BITBANDING_GPTMCFG_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_CTL_GPTMCFG_OFFSET)*32))))
#define GPTM3_CTL_GPTMCFG               (((GPTMCFG_TypeDef*)(GPTM3_BASE + GPTM_CTL_GPTMCFG_OFFSET )))
#define GPTM3_CTL_GPTMCFG_R             (*((volatile uint32_t *)(GPTM3_BASE +GPTM_CTL_GPTMCFG_OFFSET)))

/* GPTM4 GPTMCFG*/
#define GPTM4_BITBANDING_GPTMCFG        (((BITBANDING_GPTMCFG_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMCFG_OFFSET)*32))))
#define GPTM4_GPTMCFG                   (((GPTMCFG_TypeDef*)(GPTM4_BASE + GPTM_GPTMCFG_OFFSET )))
#define GPTM4_GPTMCFG_R                 (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMCFG_OFFSET)))

#define GPTM4_BITBANDING_CTL_GPTMCFG    (((BITBANDING_GPTMCFG_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_CTL_GPTMCFG_OFFSET)*32))))
#define GPTM4_CTL_GPTMCFG               (((GPTMCFG_TypeDef*)(GPTM4_BASE + GPTM_CTL_GPTMCFG_OFFSET )))
#define GPTM4_CTL_GPTMCFG_R             (*((volatile uint32_t *)(GPTM4_BASE +GPTM_CTL_GPTMCFG_OFFSET)))

/* GPTM5 GPTMCFG*/
#define GPTM5_BITBANDING_GPTMCFG        (((BITBANDING_GPTMCFG_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMCFG_OFFSET)*32))))
#define GPTM5_GPTMCFG                   (((GPTMCFG_TypeDef*)(GPTM5_BASE + GPTM_GPTMCFG_OFFSET )))
#define GPTM5_GPTMCFG_R                 (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMCFG_OFFSET)))

#define GPTM5_BITBANDING_CTL_GPTMCFG    (((BITBANDING_GPTMCFG_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_CTL_GPTMCFG_OFFSET)*32))))
#define GPTM5_CTL_GPTMCFG               (((GPTMCFG_TypeDef*)(GPTM5_BASE + GPTM_CTL_GPTMCFG_OFFSET )))
#define GPTM5_CTL_GPTMCFG_R             (*((volatile uint32_t *)(GPTM5_BASE +GPTM_CTL_GPTMCFG_OFFSET)))

/* GPWTM0 GPTMCFG*/
#define GPWTM0_BITBANDING_GPTMCFG       (((BITBANDING_GPTMCFG_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMCFG_OFFSET)*32))))
#define GPWTM0_GPTMCFG                  (((GPTMCFG_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMCFG_OFFSET )))
#define GPWTM0_GPTMCFG_R                (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMCFG_OFFSET)))

#define GPWTM0_BITBANDING_CTL_GPTMCFG   (((BITBANDING_GPTMCFG_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_CTL_GPTMCFG_OFFSET)*32))))
#define GPWTM0_CTL_GPTMCFG              (((GPTMCFG_TypeDef*)(GPWTM0_BASE + GPWTM_CTL_GPTMCFG_OFFSET )))
#define GPWTM0_CTL_GPTMCFG_R            (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_CTL_GPTMCFG_OFFSET)))

/* GPWTM1 GPTMCFG*/
#define GPWTM1_BITBANDING_GPTMCFG       (((BITBANDING_GPTMCFG_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMCFG_OFFSET)*32))))
#define GPWTM1_GPTMCFG                  (((GPTMCFG_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMCFG_OFFSET )))
#define GPWTM1_GPTMCFG_R                (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMCFG_OFFSET)))

#define GPWTM1_BITBANDING_CTL_GPTMCFG   (((BITBANDING_GPTMCFG_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_CTL_GPTMCFG_OFFSET)*32))))
#define GPWTM1_CTL_GPTMCFG              (((GPTMCFG_TypeDef*)(GPWTM1_BASE + GPWTM_CTL_GPTMCFG_OFFSET )))
#define GPWTM1_CTL_GPTMCFG_R            (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_CTL_GPTMCFG_OFFSET)))

/* GPWTM2 GPTMCFG*/
#define GPWTM2_BITBANDING_GPTMCFG       (((BITBANDING_GPTMCFG_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMCFG_OFFSET)*32))))
#define GPWTM2_GPTMCFG                  (((GPTMCFG_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMCFG_OFFSET )))
#define GPWTM2_GPTMCFG_R                (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMCFG_OFFSET)))

#define GPWTM2_BITBANDING_CTL_GPTMCFG   (((BITBANDING_GPTMCFG_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_CTL_GPTMCFG_OFFSET)*32))))
#define GPWTM2_CTL_GPTMCFG              (((GPTMCFG_TypeDef*)(GPWTM2_BASE + GPWTM_CTL_GPTMCFG_OFFSET )))
#define GPWTM2_CTL_GPTMCFG_R            (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_CTL_GPTMCFG_OFFSET)))

/* GPWTM3 GPTMCFG*/
#define GPWTM3_BITBANDING_GPTMCFG       (((BITBANDING_GPTMCFG_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMCFG_OFFSET)*32))))
#define GPWTM3_GPTMCFG                  (((GPTMCFG_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMCFG_OFFSET )))
#define GPWTM3_GPTMCFG_R                (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMCFG_OFFSET)))

#define GPWTM3_BITBANDING_CTL_GPTMCFG   (((BITBANDING_GPTMCFG_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_CTL_GPTMCFG_OFFSET)*32))))
#define GPWTM3_CTL_GPTMCFG              (((GPTMCFG_TypeDef*)(GPWTM3_BASE + GPWTM_CTL_GPTMCFG_OFFSET )))
#define GPWTM3_CTL_GPTMCFG_R            (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_CTL_GPTMCFG_OFFSET)))

/* GPWTM4 GPTMCFG*/
#define GPWTM4_BITBANDING_GPTMCFG       (((BITBANDING_GPTMCFG_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMCFG_OFFSET)*32))))
#define GPWTM4_GPTMCFG                  (((GPTMCFG_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMCFG_OFFSET )))
#define GPWTM4_GPTMCFG_R                (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMCFG_OFFSET)))

#define GPWTM4_BITBANDING_CTL_GPTMCFG   (((BITBANDING_GPTMCFG_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_CTL_GPTMCFG_OFFSET)*32))))
#define GPWTM4_CTL_GPTMCFG              (((GPTMCFG_TypeDef*)(GPWTM4_BASE + GPWTM_CTL_GPTMCFG_OFFSET )))
#define GPWTM4_CTL_GPTMCFG_R            (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_CTL_GPTMCFG_OFFSET)))

/* GPWTM5 GPTMCFG*/
#define GPWTM5_BITBANDING_GPTMCFG       (((BITBANDING_GPTMCFG_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMCFG_OFFSET)*32))))
#define GPWTM5_GPTMCFG                  (((GPTMCFG_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMCFG_OFFSET )))
#define GPWTM5_GPTMCFG_R                (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMCFG_OFFSET)))

#define GPWTM5_BITBANDING_CTL_GPTMCFG   (((BITBANDING_GPTMCFG_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_CTL_GPTMCFG_OFFSET)*32))))
#define GPWTM5_CTL_GPTMCFG              (((GPTMCFG_TypeDef*)(GPWTM5_BASE + GPWTM_CTL_GPTMCFG_OFFSET )))
#define GPWTM5_CTL_GPTMCFG_R            (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_CTL_GPTMCFG_OFFSET)))


//--------
#define GPTM_GPTMCFG_R_GPTMCFG_MASK         (0x00000007)
#define GPTM_GPTMCFG_R_GPTMCFG_BIT          (0)
#define GPTM_GPTMCFG_R_GPTMCFG_BOTH         (0x00000000)
#define GPTM_GPTMCFG_R_GPTMCFG_RTC          (0x00000001)
#define GPTM_GPTMCFG_R_GPTMCFG_SINGLE       (0x00000004)

#define GPTM_GPTMCFG_GPTMCFG_MASK           (0x00000007)
#define GPTM_GPTMCFG_GPTMCFG_BOTH           (0x00000000)
#define GPTM_GPTMCFG_GPTMCFG_RTC            (0x00000001)
#define GPTM_GPTMCFG_GPTMCFG_SINGLE         (0x00000004)
//--------

//--------
#define GPTM_CTL_GPTMCFG_R_GPTMCFG_MASK     (0x00000007)
#define GPTM_CTL_GPTMCFG_R_GPTMCFG_BIT      (0)
#define GPTM_CTL_GPTMCFG_R_GPTMCFG_BOTH     (0x00000000)
#define GPTM_CTL_GPTMCFG_R_GPTMCFG_RTC      (0x00000001)
#define GPTM_CTL_GPTMCFG_R_GPTMCFG_SINGLE   (0x00000004)

#define GPTM_CTL_GPTMCFG_GPTMCFG_MASK       (0x00000007)
#define GPTM_CTL_GPTMCFG_GPTMCFG_BOTH       (0x00000000)
#define GPTM_CTL_GPTMCFG_GPTMCFG_RTC        (0x00000001)
#define GPTM_CTL_GPTMCFG_GPTMCFG_SINGLE     (0x00000004)
//--------

//--------
#define GPWTM_GPTMCFG_R_GPTMCFG_MASK        (0x00000007)
#define GPWTM_GPTMCFG_R_GPTMCFG_BIT         (0)
#define GPWTM_GPTMCFG_R_GPTMCFG_BOTH        (0x00000000)
#define GPWTM_GPTMCFG_R_GPTMCFG_RTC         (0x00000001)
#define GPWTM_GPTMCFG_R_GPTMCFG_SINGLE      (0x00000004)

#define GPWTM_GPTMCFG_GPTMCFG_MASK          (0x00000007)
#define GPWTM_GPTMCFG_GPTMCFG_BOTH          (0x00000000)
#define GPWTM_GPTMCFG_GPTMCFG_RTC           (0x00000001)
#define GPWTM_GPTMCFG_GPTMCFG_SINGLE        (0x00000004)
//--------

//--------
#define GPWTM_CTL_GPTMCFG_R_GPTMCFG_MASK    (0x00000007)
#define GPWTM_CTL_GPTMCFG_R_GPTMCFG_BIT     (0)
#define GPWTM_CTL_GPTMCFG_R_GPTMCFG_BOTH    (0x00000000)
#define GPWTM_CTL_GPTMCFG_R_GPTMCFG_RTC     (0x00000001)
#define GPWTM_CTL_GPTMCFG_R_GPTMCFG_SINGLE  (0x00000004)

#define GPWTM_CTL_GPTMCFG_GPTMCFG_MASK      (0x00000007)
#define GPWTM_CTL_GPTMCFG_GPTMCFG_BOTH      (0x00000000)
#define GPWTM_CTL_GPTMCFG_GPTMCFG_RTC       (0x00000001)
#define GPWTM_CTL_GPTMCFG_GPTMCFG_SINGLE    (0x00000004)
//--------


/******************************************************************************************
************************************ 2 GPTMTAMR *********************************************
******************************************************************************************/

/* GPTM0 GPTMTAMR*/
#define GPTM0_BITBANDING_GPTMTAMR       (((BITBANDING_GPTMTAMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAMR_OFFSET)*32))))
#define GPTM0_GPTMTAMR                  (((GPTMTAMR_TypeDef*)(GPTM0_BASE + GPTM_GPTMTAMR_OFFSET )))
#define GPTM0_GPTMTAMR_R                (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMTAMR_OFFSET)))

#define GPTM0_BITBANDING_TA_GPTMTnMR    (((BITBANDING_TA_GPTMMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32))))
#define GPTM0_TA_GPTMTnMR               (((TA_GPTMMR_TypeDef*)(GPTM0_BASE + GPTM_TA_GPTMTnMR_OFFSET )))
#define GPTM0_TA_GPTMTnMR_R             (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TA_GPTMTnMR_OFFSET)))

#define GPTM0_BITBANDING_TW_GPTMTnMR    (((BITBANDING_TW_GPTMMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32))))
#define GPTM0_TW_GPTMTnMR               (((TW_GPTMMR_TypeDef*)(GPTM0_BASE + GPTM_TW_GPTMTnMR_OFFSET )))
#define GPTM0_TW_GPTMTnMR_R             (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TW_GPTMTnMR_OFFSET)))

/* GPTM1 GPTMTAMR*/
#define GPTM1_BITBANDING_GPTMTAMR       (((BITBANDING_GPTMTAMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAMR_OFFSET)*32))))
#define GPTM1_GPTMTAMR                  (((GPTMTAMR_TypeDef*)(GPTM1_BASE + GPTM_GPTMTAMR_OFFSET )))
#define GPTM1_GPTMTAMR_R                (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMTAMR_OFFSET)))

#define GPTM1_BITBANDING_TA_GPTMTnMR    (((BITBANDING_TA_GPTMMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32))))
#define GPTM1_TA_GPTMTnMR               (((TA_GPTMMR_TypeDef*)(GPTM1_BASE + GPTM_TA_GPTMTnMR_OFFSET )))
#define GPTM1_TA_GPTMTnMR_R             (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TA_GPTMTnMR_OFFSET)))

#define GPTM1_BITBANDING_TW_GPTMTnMR    (((BITBANDING_TW_GPTMMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32))))
#define GPTM1_TW_GPTMTnMR               (((TW_GPTMMR_TypeDef*)(GPTM1_BASE + GPTM_TW_GPTMTnMR_OFFSET )))
#define GPTM1_TW_GPTMTnMR_R             (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TW_GPTMTnMR_OFFSET)))

/* GPTM2 GPTMTAMR*/
#define GPTM2_BITBANDING_GPTMTAMR       (((BITBANDING_GPTMTAMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAMR_OFFSET)*32))))
#define GPTM2_GPTMTAMR                  (((GPTMTAMR_TypeDef*)(GPTM2_BASE + GPTM_GPTMTAMR_OFFSET )))
#define GPTM2_GPTMTAMR_R                (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMTAMR_OFFSET)))

#define GPTM2_BITBANDING_TA_GPTMTnMR    (((BITBANDING_TA_GPTMMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32))))
#define GPTM2_TA_GPTMTnMR               (((TA_GPTMMR_TypeDef*)(GPTM2_BASE + GPTM_TA_GPTMTnMR_OFFSET )))
#define GPTM2_TA_GPTMTnMR_R             (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TA_GPTMTnMR_OFFSET)))

#define GPTM2_BITBANDING_TW_GPTMTnMR    (((BITBANDING_TW_GPTMMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32))))
#define GPTM2_TW_GPTMTnMR               (((TW_GPTMMR_TypeDef*)(GPTM2_BASE + GPTM_TW_GPTMTnMR_OFFSET )))
#define GPTM2_TW_GPTMTnMR_R             (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TW_GPTMTnMR_OFFSET)))

/* GPTM3 GPTMTAMR*/
#define GPTM3_BITBANDING_GPTMTAMR       (((BITBANDING_GPTMTAMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAMR_OFFSET)*32))))
#define GPTM3_GPTMTAMR                  (((GPTMTAMR_TypeDef*)(GPTM3_BASE + GPTM_GPTMTAMR_OFFSET )))
#define GPTM3_GPTMTAMR_R                (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMTAMR_OFFSET)))

#define GPTM3_BITBANDING_TA_GPTMTnMR    (((BITBANDING_TA_GPTMMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32))))
#define GPTM3_TA_GPTMTnMR               (((TA_GPTMMR_TypeDef*)(GPTM3_BASE + GPTM_TA_GPTMTnMR_OFFSET )))
#define GPTM3_TA_GPTMTnMR_R             (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TA_GPTMTnMR_OFFSET)))

#define GPTM3_BITBANDING_TW_GPTMTnMR    (((BITBANDING_TW_GPTMMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32))))
#define GPTM3_TW_GPTMTnMR               (((TW_GPTMMR_TypeDef*)(GPTM3_BASE + GPTM_TW_GPTMTnMR_OFFSET )))
#define GPTM3_TW_GPTMTnMR_R             (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TW_GPTMTnMR_OFFSET)))

/* GPTM4 GPTMTAMR*/
#define GPTM4_BITBANDING_GPTMTAMR       (((BITBANDING_GPTMTAMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAMR_OFFSET)*32))))
#define GPTM4_GPTMTAMR                  (((GPTMTAMR_TypeDef*)(GPTM4_BASE + GPTM_GPTMTAMR_OFFSET )))
#define GPTM4_GPTMTAMR_R                (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMTAMR_OFFSET)))

#define GPTM4_BITBANDING_TA_GPTMTnMR    (((BITBANDING_TA_GPTMMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32))))
#define GPTM4_TA_GPTMTnMR               (((TA_GPTMMR_TypeDef*)(GPTM4_BASE + GPTM_TA_GPTMTnMR_OFFSET )))
#define GPTM4_TA_GPTMTnMR_R             (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TA_GPTMTnMR_OFFSET)))

#define GPTM4_BITBANDING_TW_GPTMTnMR    (((BITBANDING_TW_GPTMMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32))))
#define GPTM4_TW_GPTMTnMR               (((TW_GPTMMR_TypeDef*)(GPTM4_BASE + GPTM_TW_GPTMTnMR_OFFSET )))
#define GPTM4_TW_GPTMTnMR_R             (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TW_GPTMTnMR_OFFSET)))

/* GPTM5 GPTMTAMR*/
#define GPTM5_BITBANDING_GPTMTAMR       (((BITBANDING_GPTMTAMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAMR_OFFSET)*32))))
#define GPTM5_GPTMTAMR                  (((GPTMTAMR_TypeDef*)(GPTM5_BASE + GPTM_GPTMTAMR_OFFSET )))
#define GPTM5_GPTMTAMR_R                (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMTAMR_OFFSET)))

#define GPTM5_BITBANDING_TA_GPTMTnMR    (((BITBANDING_TA_GPTMMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32))))
#define GPTM5_TA_GPTMTnMR               (((TA_GPTMMR_TypeDef*)(GPTM5_BASE + GPTM_TA_GPTMTnMR_OFFSET )))
#define GPTM5_TA_GPTMTnMR_R             (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TA_GPTMTnMR_OFFSET)))

#define GPTM5_BITBANDING_TW_GPTMTnMR    (((BITBANDING_TW_GPTMMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32))))
#define GPTM5_TW_GPTMTnMR               (((TW_GPTMMR_TypeDef*)(GPTM5_BASE + GPTM_TW_GPTMTnMR_OFFSET )))
#define GPTM5_TW_GPTMTnMR_R             (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TW_GPTMTnMR_OFFSET)))

/* GPWTM0 GPTMTAMR*/
#define GPWTM0_BITBANDING_GPTMTAMR       (((BITBANDING_GPTMTAMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32))))
#define GPWTM0_GPTMTAMR                  (((GPTMTAMR_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMTAMR_OFFSET )))
#define GPWTM0_GPTMTAMR_R                (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMTAMR_OFFSET)))

#define GPWTM0_BITBANDING_TA_GPTMTnMR    (((BITBANDING_TA_GPTMMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32))))
#define GPWTM0_TA_GPTMTnMR               (((TA_GPTMMR_TypeDef*)(GPWTM0_BASE + GPWTM_TA_GPTMTnMR_OFFSET )))
#define GPWTM0_TA_GPTMTnMR_R             (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TA_GPTMTnMR_OFFSET)))

#define GPWTM0_BITBANDING_TW_GPTMTnMR    (((BITBANDING_TW_GPTMMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32))))
#define GPWTM0_TW_GPTMTnMR               (((TW_GPTMMR_TypeDef*)(GPWTM0_BASE + GPWTM_TW_GPTMTnMR_OFFSET )))
#define GPWTM0_TW_GPTMTnMR_R             (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TW_GPTMTnMR_OFFSET)))

/* GPWTM1 GPTMTAMR*/
#define GPWTM1_BITBANDING_GPTMTAMR       (((BITBANDING_GPTMTAMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32))))
#define GPWTM1_GPTMTAMR                  (((GPTMTAMR_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMTAMR_OFFSET )))
#define GPWTM1_GPTMTAMR_R                (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMTAMR_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnMR    (((BITBANDING_TA_GPTMMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnMR               (((TA_GPTMMR_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnMR_OFFSET )))
#define GPWTM1_TA_GPTMTnMR_R             (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnMR_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnMR    (((BITBANDING_TW_GPTMMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnMR               (((TW_GPTMMR_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnMR_OFFSET )))
#define GPWTM1_TW_GPTMTnMR_R             (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnMR_OFFSET)))

/* GPWTM2 GPTMTAMR*/
#define GPWTM2_BITBANDING_GPTMTAMR       (((BITBANDING_GPTMTAMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32))))
#define GPWTM2_GPTMTAMR                  (((GPTMTAMR_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMTAMR_OFFSET )))
#define GPWTM2_GPTMTAMR_R                (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMTAMR_OFFSET)))

#define GPWTM2_BITBANDING_TA_GPTMTnMR    (((BITBANDING_TA_GPTMMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32))))
#define GPWTM2_TA_GPTMTnMR               (((TA_GPTMMR_TypeDef*)(GPWTM2_BASE + GPWTM_TA_GPTMTnMR_OFFSET )))
#define GPWTM2_TA_GPTMTnMR_R             (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TA_GPTMTnMR_OFFSET)))

#define GPWTM2_BITBANDING_TW_GPTMTnMR    (((BITBANDING_TW_GPTMMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32))))
#define GPWTM2_TW_GPTMTnMR               (((TW_GPTMMR_TypeDef*)(GPWTM2_BASE + GPWTM_TW_GPTMTnMR_OFFSET )))
#define GPWTM2_TW_GPTMTnMR_R             (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TW_GPTMTnMR_OFFSET)))

/* GPWTM3 GPTMTAMR*/
#define GPWTM3_BITBANDING_GPTMTAMR       (((BITBANDING_GPTMTAMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32))))
#define GPWTM3_GPTMTAMR                  (((GPTMTAMR_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMTAMR_OFFSET )))
#define GPWTM3_GPTMTAMR_R                (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMTAMR_OFFSET)))

#define GPWTM3_BITBANDING_TA_GPTMTnMR    (((BITBANDING_TA_GPTMMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32))))
#define GPWTM3_TA_GPTMTnMR               (((TA_GPTMMR_TypeDef*)(GPWTM3_BASE + GPWTM_TA_GPTMTnMR_OFFSET )))
#define GPWTM3_TA_GPTMTnMR_R             (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TA_GPTMTnMR_OFFSET)))

#define GPWTM3_BITBANDING_TW_GPTMTnMR    (((BITBANDING_TW_GPTMMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32))))
#define GPWTM3_TW_GPTMTnMR               (((TW_GPTMMR_TypeDef*)(GPWTM3_BASE + GPWTM_TW_GPTMTnMR_OFFSET )))
#define GPWTM3_TW_GPTMTnMR_R             (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TW_GPTMTnMR_OFFSET)))

/* GPWTM4 GPTMTAMR*/
#define GPWTM4_BITBANDING_GPTMTAMR       (((BITBANDING_GPTMTAMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32))))
#define GPWTM4_GPTMTAMR                  (((GPTMTAMR_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMTAMR_OFFSET )))
#define GPWTM4_GPTMTAMR_R                (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMTAMR_OFFSET)))

#define GPWTM4_BITBANDING_TA_GPTMTnMR    (((BITBANDING_TA_GPTMMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32))))
#define GPWTM4_TA_GPTMTnMR               (((TA_GPTMMR_TypeDef*)(GPWTM4_BASE + GPWTM_TA_GPTMTnMR_OFFSET )))
#define GPWTM4_TA_GPTMTnMR_R             (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TA_GPTMTnMR_OFFSET)))

#define GPWTM4_BITBANDING_TW_GPTMTnMR    (((BITBANDING_TW_GPTMMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32))))
#define GPWTM4_TW_GPTMTnMR               (((TW_GPTMMR_TypeDef*)(GPWTM4_BASE + GPWTM_TW_GPTMTnMR_OFFSET )))
#define GPWTM4_TW_GPTMTnMR_R             (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TW_GPTMTnMR_OFFSET)))

/* GPWTM5 GPTMTAMR*/
#define GPWTM5_BITBANDING_GPTMTAMR       (((BITBANDING_GPTMTAMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32))))
#define GPWTM5_GPTMTAMR                  (((GPTMTAMR_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMTAMR_OFFSET )))
#define GPWTM5_GPTMTAMR_R                (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMTAMR_OFFSET)))

#define GPWTM5_BITBANDING_TA_GPTMTnMR    (((BITBANDING_TA_GPTMMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32))))
#define GPWTM5_TA_GPTMTnMR               (((TA_GPTMMR_TypeDef*)(GPWTM5_BASE + GPWTM_TA_GPTMTnMR_OFFSET )))
#define GPWTM5_TA_GPTMTnMR_R             (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TA_GPTMTnMR_OFFSET)))

#define GPWTM5_BITBANDING_TW_GPTMTnMR    (((BITBANDING_TW_GPTMMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32))))
#define GPWTM5_TW_GPTMTnMR               (((TW_GPTMMR_TypeDef*)(GPWTM5_BASE + GPWTM_TW_GPTMTnMR_OFFSET )))
#define GPWTM5_TW_GPTMTnMR_R             (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TW_GPTMTnMR_OFFSET)))



//--------
#define GPTM_GPTMTAMR_R_TAMR_MASK           (0x00000003)
#define GPTM_GPTMTAMR_R_TAMR_BIT            (0)
#define GPTM_GPTMTAMR_R_TAMR_ONESHOT        (0x00000001)
#define GPTM_GPTMTAMR_R_TAMR_PERIOD         (0x00000002)
#define GPTM_GPTMTAMR_R_TAMR_CAPTURE        (0x00000003)

#define GPTM_GPTMTAMR_TAMR_MASK             (0x00000003)
#define GPTM_GPTMTAMR_TAMR_ONESHOT          (0x00000001)
#define GPTM_GPTMTAMR_TAMR_PERIOD           (0x00000002)
#define GPTM_GPTMTAMR_TAMR_CAPTURE          (0x00000003)
//--------

//--------
#define GPTM_GPTMTAMR_R_TACMR_MASK          (0x00000004)
#define GPTM_GPTMTAMR_R_TACMR_BIT           (2)
#define GPTM_GPTMTAMR_R_TACMR_EDGECOUNT     (0x00000000)
#define GPTM_GPTMTAMR_R_TACMR_EDGETIME      (0x00000004)

#define GPTM_GPTMTAMR_TACMR_MASK            (0x00000001)
#define GPTM_GPTMTAMR_TACMR_EDGECOUNT       (0x00000000)
#define GPTM_GPTMTAMR_TACMR_EDGETIME        (0x00000001)
//--------

//--------
#define GPTM_GPTMTAMR_R_TAAMS_MASK          (0x00000008)
#define GPTM_GPTMTAMR_R_TAAMS_BIT           (3)
#define GPTM_GPTMTAMR_R_TAAMS_CAPCOMP       (0x00000000)
#define GPTM_GPTMTAMR_R_TAAMS_PWM           (0x00000008)

#define GPTM_GPTMTAMR_TAAMS_MASK            (0x00000001)
#define GPTM_GPTMTAMR_TAAMS_CAPCOMP         (0x00000000)
#define GPTM_GPTMTAMR_TAAMS_PWM             (0x00000001)
//--------

//--------
#define GPTM_GPTMTAMR_R_TACDIR_MASK         (0x00000010)
#define GPTM_GPTMTAMR_R_TACDIR_BIT          (4)
#define GPTM_GPTMTAMR_R_TACDIR_DOWN         (0x00000000)
#define GPTM_GPTMTAMR_R_TACDIR_UP           (0x00000010)

#define GPTM_GPTMTAMR_TACDIR_MASK           (0x00000001)
#define GPTM_GPTMTAMR_TACDIR_DOWN           (0x00000000)
#define GPTM_GPTMTAMR_TACDIR_UP             (0x00000001)
//--------

//--------
#define GPTM_GPTMTAMR_R_TAMIE_MASK          (0x00000020)
#define GPTM_GPTMTAMR_R_TAMIE_BIT           (5)
#define GPTM_GPTMTAMR_R_TAMIE_DIS           (0x00000000)
#define GPTM_GPTMTAMR_R_TAMIE_EN            (0x00000020)

#define GPTM_GPTMTAMR_TAMIE_MASK            (0x00000001)
#define GPTM_GPTMTAMR_TAMIE_DIS             (0x00000000)
#define GPTM_GPTMTAMR_TAMIE_EN              (0x00000001)
//--------

//--------
#define GPTM_GPTMTAMR_R_TAWOT_MASK          (0x00000040)
#define GPTM_GPTMTAMR_R_TAWOT_BIT           (6)
#define GPTM_GPTMTAMR_R_TAWOT_INSTANT       (0x00000000)
#define GPTM_GPTMTAMR_R_TAWOT_TRIGGER       (0x00000040)

#define GPTM_GPTMTAMR_TAWOT_MASK            (0x00000001)
#define GPTM_GPTMTAMR_TAWOT_INSTANT         (0x00000000)
#define GPTM_GPTMTAMR_TAWOT_TRIGGER         (0x00000001)
//--------

//--------
#define GPTM_GPTMTAMR_R_TASNAPS_MASK        (0x00000080)
#define GPTM_GPTMTAMR_R_TASNAPS_BIT         (7)
#define GPTM_GPTMTAMR_R_TASNAPS_DIS         (0x00000000)
#define GPTM_GPTMTAMR_R_TASNAPS_EN          (0x00000080)

#define GPTM_GPTMTAMR_TASNAPS_MASK          (0x00000001)
#define GPTM_GPTMTAMR_TASNAPS_DIS           (0x00000000)
#define GPTM_GPTMTAMR_TASNAPS_EN            (0x00000001)
//--------

//--------
#define GPTM_GPTMTAMR_R_TAILD_MASK          (0x00000100)
#define GPTM_GPTMTAMR_R_TAILD_BIT           (8)
#define GPTM_GPTMTAMR_R_TAILD_NEXT          (0x00000000)
#define GPTM_GPTMTAMR_R_TAILD_TIMEOUT       (0x00000100)

#define GPTM_GPTMTAMR_TAILD_MASK            (0x00000001)
#define GPTM_GPTMTAMR_TAILD_NEXT            (0x00000000)
#define GPTM_GPTMTAMR_TAILD_TIMEOUT         (0x00000001)
//--------

//--------
#define GPTM_GPTMTAMR_R_TAPWMIE_MASK        (0x00000200)
#define GPTM_GPTMTAMR_R_TAPWMIE_BIT         (9)
#define GPTM_GPTMTAMR_R_TAPWMIE_DIS         (0x00000000)
#define GPTM_GPTMTAMR_R_TAPWMIE_EN          (0x00000200)

#define GPTM_GPTMTAMR_TAPWMIE_MASK          (0x00000001)
#define GPTM_GPTMTAMR_TAPWMIE_DIS           (0x00000000)
#define GPTM_GPTMTAMR_TAPWMIE_EN            (0x00000001)
//--------

//--------
#define GPTM_GPTMTAMR_R_TAMRSU_MASK         (0x00000400)
#define GPTM_GPTMTAMR_R_TAMRSU_BIT          (10)
#define GPTM_GPTMTAMR_R_TAMRSU_NEXT         (0x00000000)
#define GPTM_GPTMTAMR_R_TAMRSU_TIMEOUT      (0x00000400)

#define GPTM_GPTMTAMR_TAMRSU_MASK           (0x00000001)
#define GPTM_GPTMTAMR_TAMRSU_NEXT           (0x00000000)
#define GPTM_GPTMTAMR_TAMRSU_TIMEOUT        (0x00000001)
//--------

//--------
#define GPTM_GPTMTAMR_R_TAPLO_MASK          (0x00000800)
#define GPTM_GPTMTAMR_R_TAPLO_BIT           (11)
#define GPTM_GPTMTAMR_R_TAPLO_LOW           (0x00000000)
#define GPTM_GPTMTAMR_R_TAPLO_HIGH          (0x00000800)

#define GPTM_GPTMTAMR_TAPLO_MASK            (0x00000001)
#define GPTM_GPTMTAMR_TAPLO_LOW             (0x00000000)
#define GPTM_GPTMTAMR_TAPLO_HIGH            (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnMR_R_TnMR_MASK        (0x00000003)
#define GPTM_TA_GPTMTnMR_R_TnMR_BIT         (0)
#define GPTM_TA_GPTMTnMR_R_TnMR_ONESHOT     (0x00000001)
#define GPTM_TA_GPTMTnMR_R_TnMR_PERIOD      (0x00000002)
#define GPTM_TA_GPTMTnMR_R_TnMR_CAPTURE     (0x00000003)

#define GPTM_TA_GPTMTnMR_TnMR_MASK          (0x00000003)
#define GPTM_TA_GPTMTnMR_TnMR_ONESHOT       (0x00000001)
#define GPTM_TA_GPTMTnMR_TnMR_PERIOD        (0x00000002)
#define GPTM_TA_GPTMTnMR_TnMR_CAPTURE       (0x00000003)
//--------

//--------
#define GPTM_TA_GPTMTnMR_R_TnCMR_MASK       (0x00000004)
#define GPTM_TA_GPTMTnMR_R_TnCMR_BIT        (2)
#define GPTM_TA_GPTMTnMR_R_TnCMR_EDGECOUNT  (0x00000000)
#define GPTM_TA_GPTMTnMR_R_TnCMR_EDGETIME   (0x00000004)

#define GPTM_TA_GPTMTnMR_TnCMR_MASK         (0x00000001)
#define GPTM_TA_GPTMTnMR_TnCMR_EDGECOUNT    (0x00000000)
#define GPTM_TA_GPTMTnMR_TnCMR_EDGETIME     (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnMR_R_TnAMS_MASK       (0x00000008)
#define GPTM_TA_GPTMTnMR_R_TnAMS_BIT        (3)
#define GPTM_TA_GPTMTnMR_R_TnAMS_CAPCOMP    (0x00000000)
#define GPTM_TA_GPTMTnMR_R_TnAMS_PWM        (0x00000008)

#define GPTM_TA_GPTMTnMR_TnAMS_MASK         (0x00000001)
#define GPTM_TA_GPTMTnMR_TnAMS_CAPCOMP      (0x00000000)
#define GPTM_TA_GPTMTnMR_TnAMS_PWM          (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnMR_R_TnCDIR_MASK      (0x00000010)
#define GPTM_TA_GPTMTnMR_R_TnCDIR_BIT       (4)
#define GPTM_TA_GPTMTnMR_R_TnCDIR_DOWN      (0x00000000)
#define GPTM_TA_GPTMTnMR_R_TnCDIR_UP        (0x00000010)

#define GPTM_TA_GPTMTnMR_TnCDIR_MASK        (0x00000001)
#define GPTM_TA_GPTMTnMR_TnCDIR_DOWN        (0x00000000)
#define GPTM_TA_GPTMTnMR_TnCDIR_UP          (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnMR_R_TnMIE_MASK       (0x00000020)
#define GPTM_TA_GPTMTnMR_R_TnMIE_BIT        (5)
#define GPTM_TA_GPTMTnMR_R_TnMIE_DIS        (0x00000000)
#define GPTM_TA_GPTMTnMR_R_TnMIE_EN         (0x00000020)

#define GPTM_TA_GPTMTnMR_TnMIE_MASK         (0x00000001)
#define GPTM_TA_GPTMTnMR_TnMIE_DIS          (0x00000000)
#define GPTM_TA_GPTMTnMR_TnMIE_EN           (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnMR_R_TnWOT_MASK       (0x00000040)
#define GPTM_TA_GPTMTnMR_R_TnWOT_BIT        (6)
#define GPTM_TA_GPTMTnMR_R_TnWOT_INSTANT    (0x00000000)
#define GPTM_TA_GPTMTnMR_R_TnWOT_TRIGGER    (0x00000040)

#define GPTM_TA_GPTMTnMR_TnWOT_MASK         (0x00000001)
#define GPTM_TA_GPTMTnMR_TnWOT_INSTANT      (0x00000000)
#define GPTM_TA_GPTMTnMR_TnWOT_TRIGGER      (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnMR_R_TnSNAPS_MASK     (0x00000080)
#define GPTM_TA_GPTMTnMR_R_TnSNAPS_BIT      (7)
#define GPTM_TA_GPTMTnMR_R_TnSNAPS_DIS      (0x00000000)
#define GPTM_TA_GPTMTnMR_R_TnSNAPS_EN       (0x00000080)

#define GPTM_TA_GPTMTnMR_TnSNAPS_MASK       (0x00000001)
#define GPTM_TA_GPTMTnMR_TnSNAPS_DIS        (0x00000000)
#define GPTM_TA_GPTMTnMR_TnSNAPS_EN         (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnMR_R_TnILD_MASK       (0x00000100)
#define GPTM_TA_GPTMTnMR_R_TnILD_BIT        (8)
#define GPTM_TA_GPTMTnMR_R_TnILD_NEXT       (0x00000000)
#define GPTM_TA_GPTMTnMR_R_TnILD_TIMEOUT    (0x00000100)

#define GPTM_TA_GPTMTnMR_TnILD_MASK         (0x00000001)
#define GPTM_TA_GPTMTnMR_TnILD_NEXT         (0x00000000)
#define GPTM_TA_GPTMTnMR_TnILD_TIMEOUT      (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnMR_R_TnPWMIE_MASK     (0x00000200)
#define GPTM_TA_GPTMTnMR_R_TnPWMIE_BIT      (9)
#define GPTM_TA_GPTMTnMR_R_TnPWMIE_DIS      (0x00000000)
#define GPTM_TA_GPTMTnMR_R_TnPWMIE_EN       (0x00000200)

#define GPTM_TA_GPTMTnMR_TnPWMIE_MASK       (0x00000001)
#define GPTM_TA_GPTMTnMR_TnPWMIE_DIS        (0x00000000)
#define GPTM_TA_GPTMTnMR_TnPWMIE_EN         (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnMR_R_TnMRSU_MASK      (0x00000400)
#define GPTM_TA_GPTMTnMR_R_TnMRSU_BIT       (10)
#define GPTM_TA_GPTMTnMR_R_TnMRSU_NEXT      (0x00000000)
#define GPTM_TA_GPTMTnMR_R_TnMRSU_TIMEOUT   (0x00000400)

#define GPTM_TA_GPTMTnMR_TnMRSU_MASK        (0x00000001)
#define GPTM_TA_GPTMTnMR_TnMRSU_NEXT        (0x00000000)
#define GPTM_TA_GPTMTnMR_TnMRSU_TIMEOUT     (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnMR_R_TnPLO_MASK       (0x00000800)
#define GPTM_TA_GPTMTnMR_R_TnPLO_BIT        (11)
#define GPTM_TA_GPTMTnMR_R_TnPLO_LOW        (0x00000000)
#define GPTM_TA_GPTMTnMR_R_TnPLO_HIGH       (0x00000800)

#define GPTM_TA_GPTMTnMR_TnPLO_MASK         (0x00000001)
#define GPTM_TA_GPTMTnMR_TnPLO_LOW          (0x00000000)
#define GPTM_TA_GPTMTnMR_TnPLO_HIGH         (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnMR_R_TnMR_MASK        (0x00000003)
#define GPTM_TW_GPTMTnMR_R_TnMR_BIT         (0)
#define GPTM_TW_GPTMTnMR_R_TnMR_ONESHOT     (0x00000001)
#define GPTM_TW_GPTMTnMR_R_TnMR_PERIOD      (0x00000002)
#define GPTM_TW_GPTMTnMR_R_TnMR_CAPTURE     (0x00000003)

#define GPTM_TW_GPTMTnMR_TnMR_MASK          (0x00000003)
#define GPTM_TW_GPTMTnMR_TnMR_ONESHOT       (0x00000001)
#define GPTM_TW_GPTMTnMR_TnMR_PERIOD        (0x00000002)
#define GPTM_TW_GPTMTnMR_TnMR_CAPTURE       (0x00000003)
//--------

//--------
#define GPTM_TW_GPTMTnMR_R_TnCMR_MASK       (0x00000004)
#define GPTM_TW_GPTMTnMR_R_TnCMR_BIT        (2)
#define GPTM_TW_GPTMTnMR_R_TnCMR_EDGECOUNT  (0x00000000)
#define GPTM_TW_GPTMTnMR_R_TnCMR_EDGETIME   (0x00000004)

#define GPTM_TW_GPTMTnMR_TnCMR_MASK         (0x00000001)
#define GPTM_TW_GPTMTnMR_TnCMR_EDGECOUNT    (0x00000000)
#define GPTM_TW_GPTMTnMR_TnCMR_EDGETIME     (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnMR_R_TnAMS_MASK       (0x00000008)
#define GPTM_TW_GPTMTnMR_R_TnAMS_BIT        (3)
#define GPTM_TW_GPTMTnMR_R_TnAMS_CAPCOMP    (0x00000000)
#define GPTM_TW_GPTMTnMR_R_TnAMS_PWM        (0x00000008)

#define GPTM_TW_GPTMTnMR_TnAMS_MASK         (0x00000001)
#define GPTM_TW_GPTMTnMR_TnAMS_CAPCOMP      (0x00000000)
#define GPTM_TW_GPTMTnMR_TnAMS_PWM          (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnMR_R_TnCDIR_MASK      (0x00000010)
#define GPTM_TW_GPTMTnMR_R_TnCDIR_BIT       (4)
#define GPTM_TW_GPTMTnMR_R_TnCDIR_DOWN      (0x00000000)
#define GPTM_TW_GPTMTnMR_R_TnCDIR_UP        (0x00000010)

#define GPTM_TW_GPTMTnMR_TnCDIR_MASK        (0x00000001)
#define GPTM_TW_GPTMTnMR_TnCDIR_DOWN        (0x00000000)
#define GPTM_TW_GPTMTnMR_TnCDIR_UP          (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnMR_R_TnMIE_MASK       (0x00000020)
#define GPTM_TW_GPTMTnMR_R_TnMIE_BIT        (5)
#define GPTM_TW_GPTMTnMR_R_TnMIE_DIS        (0x00000000)
#define GPTM_TW_GPTMTnMR_R_TnMIE_EN         (0x00000020)

#define GPTM_TW_GPTMTnMR_TnMIE_MASK         (0x00000001)
#define GPTM_TW_GPTMTnMR_TnMIE_DIS          (0x00000000)
#define GPTM_TW_GPTMTnMR_TnMIE_EN           (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnMR_R_TnWOT_MASK       (0x00000040)
#define GPTM_TW_GPTMTnMR_R_TnWOT_BIT        (6)
#define GPTM_TW_GPTMTnMR_R_TnWOT_INSTANT    (0x00000000)
#define GPTM_TW_GPTMTnMR_R_TnWOT_TRIGGER    (0x00000040)

#define GPTM_TW_GPTMTnMR_TnWOT_MASK         (0x00000001)
#define GPTM_TW_GPTMTnMR_TnWOT_INSTANT      (0x00000000)
#define GPTM_TW_GPTMTnMR_TnWOT_TRIGGER      (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnMR_R_TnSNAPS_MASK     (0x00000080)
#define GPTM_TW_GPTMTnMR_R_TnSNAPS_BIT      (7)
#define GPTM_TW_GPTMTnMR_R_TnSNAPS_DIS      (0x00000000)
#define GPTM_TW_GPTMTnMR_R_TnSNAPS_EN       (0x00000080)

#define GPTM_TW_GPTMTnMR_TnSNAPS_MASK       (0x00000001)
#define GPTM_TW_GPTMTnMR_TnSNAPS_DIS        (0x00000000)
#define GPTM_TW_GPTMTnMR_TnSNAPS_EN         (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnMR_R_TnILD_MASK       (0x00000100)
#define GPTM_TW_GPTMTnMR_R_TnILD_BIT        (8)
#define GPTM_TW_GPTMTnMR_R_TnILD_NEXT       (0x00000000)
#define GPTM_TW_GPTMTnMR_R_TnILD_TIMEOUT    (0x00000100)

#define GPTM_TW_GPTMTnMR_TnILD_MASK         (0x00000001)
#define GPTM_TW_GPTMTnMR_TnILD_NEXT         (0x00000000)
#define GPTM_TW_GPTMTnMR_TnILD_TIMEOUT      (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnMR_R_TnPWMIE_MASK     (0x00000200)
#define GPTM_TW_GPTMTnMR_R_TnPWMIE_BIT      (9)
#define GPTM_TW_GPTMTnMR_R_TnPWMIE_DIS      (0x00000000)
#define GPTM_TW_GPTMTnMR_R_TnPWMIE_EN       (0x00000200)

#define GPTM_TW_GPTMTnMR_TnPWMIE_MASK       (0x00000001)
#define GPTM_TW_GPTMTnMR_TnPWMIE_DIS        (0x00000000)
#define GPTM_TW_GPTMTnMR_TnPWMIE_EN         (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnMR_R_TnMRSU_MASK      (0x00000400)
#define GPTM_TW_GPTMTnMR_R_TnMRSU_BIT       (10)
#define GPTM_TW_GPTMTnMR_R_TnMRSU_NEXT      (0x00000000)
#define GPTM_TW_GPTMTnMR_R_TnMRSU_TIMEOUT   (0x00000400)

#define GPTM_TW_GPTMTnMR_TnMRSU_MASK        (0x00000001)
#define GPTM_TW_GPTMTnMR_TnMRSU_NEXT        (0x00000000)
#define GPTM_TW_GPTMTnMR_TnMRSU_TIMEOUT     (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnMR_R_TnPLO_MASK       (0x00000800)
#define GPTM_TW_GPTMTnMR_R_TnPLO_BIT        (11)
#define GPTM_TW_GPTMTnMR_R_TnPLO_LOW        (0x00000000)
#define GPTM_TW_GPTMTnMR_R_TnPLO_HIGH       (0x00000800)

#define GPTM_TW_GPTMTnMR_TnPLO_MASK         (0x00000001)
#define GPTM_TW_GPTMTnMR_TnPLO_LOW          (0x00000000)
#define GPTM_TW_GPTMTnMR_TnPLO_HIGH         (0x00000001)
//--------

//--------
#define GPWTM_GPTMTAMR_R_TAMR_MASK          (0x00000003)
#define GPWTM_GPTMTAMR_R_TAMR_BIT           (0)
#define GPWTM_GPTMTAMR_R_TAMR_ONESHOT       (0x00000001)
#define GPWTM_GPTMTAMR_R_TAMR_PERIOD        (0x00000002)
#define GPWTM_GPTMTAMR_R_TAMR_CAPTURE       (0x00000003)

#define GPWTM_GPTMTAMR_TAMR_MASK            (0x00000003)
#define GPWTM_GPTMTAMR_TAMR_ONESHOT         (0x00000001)
#define GPWTM_GPTMTAMR_TAMR_PERIOD          (0x00000002)
#define GPWTM_GPTMTAMR_TAMR_CAPTURE         (0x00000003)
//--------

//--------
#define GPWTM_GPTMTAMR_R_TACMR_MASK         (0x00000004)
#define GPWTM_GPTMTAMR_R_TACMR_BIT          (2)
#define GPWTM_GPTMTAMR_R_TACMR_EDGECOUNT    (0x00000000)
#define GPWTM_GPTMTAMR_R_TACMR_EDGETIME     (0x00000004)

#define GPWTM_GPTMTAMR_TACMR_MASK           (0x00000001)
#define GPWTM_GPTMTAMR_TACMR_EDGECOUNT      (0x00000000)
#define GPWTM_GPTMTAMR_TACMR_EDGETIME       (0x00000001)
//--------

//--------
#define GPWTM_GPTMTAMR_R_TAAMS_MASK         (0x00000008)
#define GPWTM_GPTMTAMR_R_TAAMS_BIT          (3)
#define GPWTM_GPTMTAMR_R_TAAMS_CAPCOMP      (0x00000000)
#define GPWTM_GPTMTAMR_R_TAAMS_PWM          (0x00000008)

#define GPWTM_GPTMTAMR_TAAMS_MASK           (0x00000001)
#define GPWTM_GPTMTAMR_TAAMS_CAPCOMP        (0x00000000)
#define GPWTM_GPTMTAMR_TAAMS_PWM            (0x00000001)
//--------

//--------
#define GPWTM_GPTMTAMR_R_TACDIR_MASK        (0x00000010)
#define GPWTM_GPTMTAMR_R_TACDIR_BIT         (4)
#define GPWTM_GPTMTAMR_R_TACDIR_DOWN        (0x00000000)
#define GPWTM_GPTMTAMR_R_TACDIR_UP          (0x00000010)

#define GPWTM_GPTMTAMR_TACDIR_MASK          (0x00000001)
#define GPWTM_GPTMTAMR_TACDIR_DOWN          (0x00000000)
#define GPWTM_GPTMTAMR_TACDIR_UP            (0x00000001)
//--------

//--------
#define GPWTM_GPTMTAMR_R_TAMIE_MASK         (0x00000020)
#define GPWTM_GPTMTAMR_R_TAMIE_BIT          (5)
#define GPWTM_GPTMTAMR_R_TAMIE_DIS          (0x00000000)
#define GPWTM_GPTMTAMR_R_TAMIE_EN           (0x00000020)

#define GPWTM_GPTMTAMR_TAMIE_MASK           (0x00000001)
#define GPWTM_GPTMTAMR_TAMIE_DIS            (0x00000000)
#define GPWTM_GPTMTAMR_TAMIE_EN             (0x00000001)
//--------

//--------
#define GPWTM_GPTMTAMR_R_TAWOT_MASK         (0x00000040)
#define GPWTM_GPTMTAMR_R_TAWOT_BIT          (6)
#define GPWTM_GPTMTAMR_R_TAWOT_INSTANT      (0x00000000)
#define GPWTM_GPTMTAMR_R_TAWOT_TRIGGER      (0x00000040)

#define GPWTM_GPTMTAMR_TAWOT_MASK           (0x00000001)
#define GPWTM_GPTMTAMR_TAWOT_INSTANT        (0x00000000)
#define GPWTM_GPTMTAMR_TAWOT_TRIGGER        (0x00000001)
//--------

//--------
#define GPWTM_GPTMTAMR_R_TASNAPS_MASK       (0x00000080)
#define GPWTM_GPTMTAMR_R_TASNAPS_BIT        (7)
#define GPWTM_GPTMTAMR_R_TASNAPS_DIS        (0x00000000)
#define GPWTM_GPTMTAMR_R_TASNAPS_EN         (0x00000080)

#define GPWTM_GPTMTAMR_TASNAPS_MASK         (0x00000001)
#define GPWTM_GPTMTAMR_TASNAPS_DIS          (0x00000000)
#define GPWTM_GPTMTAMR_TASNAPS_EN           (0x00000001)
//--------

//--------
#define GPWTM_GPTMTAMR_R_TAILD_MASK         (0x00000100)
#define GPWTM_GPTMTAMR_R_TAILD_BIT          (8)
#define GPWTM_GPTMTAMR_R_TAILD_NEXT         (0x00000000)
#define GPWTM_GPTMTAMR_R_TAILD_TIMEOUT      (0x00000100)

#define GPWTM_GPTMTAMR_TAILD_MASK           (0x00000001)
#define GPWTM_GPTMTAMR_TAILD_NEXT           (0x00000000)
#define GPWTM_GPTMTAMR_TAILD_TIMEOUT        (0x00000001)
//--------

//--------
#define GPWTM_GPTMTAMR_R_TAPWMIE_MASK       (0x00000200)
#define GPWTM_GPTMTAMR_R_TAPWMIE_BIT        (9)
#define GPWTM_GPTMTAMR_R_TAPWMIE_DIS        (0x00000000)
#define GPWTM_GPTMTAMR_R_TAPWMIE_EN         (0x00000200)

#define GPWTM_GPTMTAMR_TAPWMIE_MASK         (0x00000001)
#define GPWTM_GPTMTAMR_TAPWMIE_DIS          (0x00000000)
#define GPWTM_GPTMTAMR_TAPWMIE_EN           (0x00000001)
//--------

//--------
#define GPWTM_GPTMTAMR_R_TAMRSU_MASK        (0x00000400)
#define GPWTM_GPTMTAMR_R_TAMRSU_BIT         (10)
#define GPWTM_GPTMTAMR_R_TAMRSU_NEXT        (0x00000000)
#define GPWTM_GPTMTAMR_R_TAMRSU_TIMEOUT     (0x00000400)

#define GPWTM_GPTMTAMR_TAMRSU_MASK          (0x00000001)
#define GPWTM_GPTMTAMR_TAMRSU_NEXT          (0x00000000)
#define GPWTM_GPTMTAMR_TAMRSU_TIMEOUT       (0x00000001)
//--------

//--------
#define GPWTM_GPTMTAMR_R_TAPLO_MASK         (0x00000800)
#define GPWTM_GPTMTAMR_R_TAPLO_BIT          (11)
#define GPWTM_GPTMTAMR_R_TAPLO_LOW          (0x00000000)
#define GPWTM_GPTMTAMR_R_TAPLO_HIGH         (0x00000800)

#define GPWTM_GPTMTAMR_TAPLO_MASK           (0x00000001)
#define GPWTM_GPTMTAMR_TAPLO_LOW            (0x00000000)
#define GPWTM_GPTMTAMR_TAPLO_HIGH           (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnMR_R_TnMR_MASK       (0x00000003)
#define GPWTM_TA_GPTMTnMR_R_TnMR_BIT        (0)
#define GPWTM_TA_GPTMTnMR_R_TnMR_ONESHOT    (0x00000001)
#define GPWTM_TA_GPTMTnMR_R_TnMR_PERIOD     (0x00000002)
#define GPWTM_TA_GPTMTnMR_R_TnMR_CAPTURE    (0x00000003)

#define GPWTM_TA_GPTMTnMR_TnMR_MASK         (0x00000003)
#define GPWTM_TA_GPTMTnMR_TnMR_ONESHOT      (0x00000001)
#define GPWTM_TA_GPTMTnMR_TnMR_PERIOD       (0x00000002)
#define GPWTM_TA_GPTMTnMR_TnMR_CAPTURE      (0x00000003)
//--------

//--------
#define GPWTM_TA_GPTMTnMR_R_TnCMR_MASK      (0x00000004)
#define GPWTM_TA_GPTMTnMR_R_TnCMR_BIT       (2)
#define GPWTM_TA_GPTMTnMR_R_TnCMR_EDGECOUNT (0x00000000)
#define GPWTM_TA_GPTMTnMR_R_TnCMR_EDGETIME  (0x00000004)

#define GPWTM_TA_GPTMTnMR_TnCMR_MASK        (0x00000001)
#define GPWTM_TA_GPTMTnMR_TnCMR_EDGECOUNT   (0x00000000)
#define GPWTM_TA_GPTMTnMR_TnCMR_EDGETIME    (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnMR_R_TnAMS_MASK      (0x00000008)
#define GPWTM_TA_GPTMTnMR_R_TnAMS_BIT       (3)
#define GPWTM_TA_GPTMTnMR_R_TnAMS_CAPCOMP   (0x00000000)
#define GPWTM_TA_GPTMTnMR_R_TnAMS_PWM       (0x00000008)

#define GPWTM_TA_GPTMTnMR_TnAMS_MASK        (0x00000001)
#define GPWTM_TA_GPTMTnMR_TnAMS_CAPCOMP     (0x00000000)
#define GPWTM_TA_GPTMTnMR_TnAMS_PWM         (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnMR_R_TnCDIR_MASK     (0x00000010)
#define GPWTM_TA_GPTMTnMR_R_TnCDIR_BIT      (4)
#define GPWTM_TA_GPTMTnMR_R_TnCDIR_DOWN     (0x00000000)
#define GPWTM_TA_GPTMTnMR_R_TnCDIR_UP       (0x00000010)

#define GPWTM_TA_GPTMTnMR_TnCDIR_MASK       (0x00000001)
#define GPWTM_TA_GPTMTnMR_TnCDIR_DOWN       (0x00000000)
#define GPWTM_TA_GPTMTnMR_TnCDIR_UP         (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnMR_R_TnMIE_MASK      (0x00000020)
#define GPWTM_TA_GPTMTnMR_R_TnMIE_BIT       (5)
#define GPWTM_TA_GPTMTnMR_R_TnMIE_DIS       (0x00000000)
#define GPWTM_TA_GPTMTnMR_R_TnMIE_EN        (0x00000020)

#define GPWTM_TA_GPTMTnMR_TnMIE_MASK        (0x00000001)
#define GPWTM_TA_GPTMTnMR_TnMIE_DIS         (0x00000000)
#define GPWTM_TA_GPTMTnMR_TnMIE_EN          (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnMR_R_TnWOT_MASK      (0x00000040)
#define GPWTM_TA_GPTMTnMR_R_TnWOT_BIT       (6)
#define GPWTM_TA_GPTMTnMR_R_TnWOT_INSTANT   (0x00000000)
#define GPWTM_TA_GPTMTnMR_R_TnWOT_TRIGGER   (0x00000040)

#define GPWTM_TA_GPTMTnMR_TnWOT_MASK        (0x00000001)
#define GPWTM_TA_GPTMTnMR_TnWOT_INSTANT     (0x00000000)
#define GPWTM_TA_GPTMTnMR_TnWOT_TRIGGER     (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnMR_R_TnSNAPS_MASK    (0x00000080)
#define GPWTM_TA_GPTMTnMR_R_TnSNAPS_BIT     (7)
#define GPWTM_TA_GPTMTnMR_R_TnSNAPS_DIS     (0x00000000)
#define GPWTM_TA_GPTMTnMR_R_TnSNAPS_EN      (0x00000080)

#define GPWTM_TA_GPTMTnMR_TnSNAPS_MASK      (0x00000001)
#define GPWTM_TA_GPTMTnMR_TnSNAPS_DIS       (0x00000000)
#define GPWTM_TA_GPTMTnMR_TnSNAPS_EN        (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnMR_R_TnILD_MASK      (0x00000100)
#define GPWTM_TA_GPTMTnMR_R_TnILD_BIT       (8)
#define GPWTM_TA_GPTMTnMR_R_TnILD_NEXT      (0x00000000)
#define GPWTM_TA_GPTMTnMR_R_TnILD_TIMEOUT   (0x00000100)

#define GPWTM_TA_GPTMTnMR_TnILD_MASK        (0x00000001)
#define GPWTM_TA_GPTMTnMR_TnILD_NEXT        (0x00000000)
#define GPWTM_TA_GPTMTnMR_TnILD_TIMEOUT     (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnMR_R_TnPWMIE_MASK    (0x00000200)
#define GPWTM_TA_GPTMTnMR_R_TnPWMIE_BIT     (9)
#define GPWTM_TA_GPTMTnMR_R_TnPWMIE_DIS     (0x00000000)
#define GPWTM_TA_GPTMTnMR_R_TnPWMIE_EN      (0x00000200)

#define GPWTM_TA_GPTMTnMR_TnPWMIE_MASK      (0x00000001)
#define GPWTM_TA_GPTMTnMR_TnPWMIE_DIS       (0x00000000)
#define GPWTM_TA_GPTMTnMR_TnPWMIE_EN        (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnMR_R_TnMRSU_MASK     (0x00000400)
#define GPWTM_TA_GPTMTnMR_R_TnMRSU_BIT      (10)
#define GPWTM_TA_GPTMTnMR_R_TnMRSU_NEXT     (0x00000000)
#define GPWTM_TA_GPTMTnMR_R_TnMRSU_TIMEOUT  (0x00000400)

#define GPWTM_TA_GPTMTnMR_TnMRSU_MASK       (0x00000001)
#define GPWTM_TA_GPTMTnMR_TnMRSU_NEXT       (0x00000000)
#define GPWTM_TA_GPTMTnMR_TnMRSU_TIMEOUT    (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnMR_R_TnPLO_MASK      (0x00000800)
#define GPWTM_TA_GPTMTnMR_R_TnPLO_BIT       (11)
#define GPWTM_TA_GPTMTnMR_R_TnPLO_LOW       (0x00000000)
#define GPWTM_TA_GPTMTnMR_R_TnPLO_HIGH      (0x00000800)

#define GPWTM_TA_GPTMTnMR_TnPLO_MASK        (0x00000001)
#define GPWTM_TA_GPTMTnMR_TnPLO_LOW         (0x00000000)
#define GPWTM_TA_GPTMTnMR_TnPLO_HIGH        (0x00000001)
//--------


//--------
#define GPWTM_TW_GPTMTnMR_R_TnMR_MASK       (0x00000003)
#define GPWTM_TW_GPTMTnMR_R_TnMR_BIT        (0)
#define GPWTM_TW_GPTMTnMR_R_TnMR_ONESHOT    (0x00000001)
#define GPWTM_TW_GPTMTnMR_R_TnMR_PERIOD     (0x00000002)
#define GPWTM_TW_GPTMTnMR_R_TnMR_CAPTURE    (0x00000003)

#define GPWTM_TW_GPTMTnMR_TnMR_MASK         (0x00000003)
#define GPWTM_TW_GPTMTnMR_TnMR_ONESHOT      (0x00000001)
#define GPWTM_TW_GPTMTnMR_TnMR_PERIOD       (0x00000002)
#define GPWTM_TW_GPTMTnMR_TnMR_CAPTURE      (0x00000003)
//--------

//--------
#define GPWTM_TW_GPTMTnMR_R_TnCMR_MASK      (0x00000004)
#define GPWTM_TW_GPTMTnMR_R_TnCMR_BIT       (2)
#define GPWTM_TW_GPTMTnMR_R_TnCMR_EDGECOUNT (0x00000000)
#define GPWTM_TW_GPTMTnMR_R_TnCMR_EDGETIME  (0x00000004)

#define GPWTM_TW_GPTMTnMR_TnCMR_MASK        (0x00000001)
#define GPWTM_TW_GPTMTnMR_TnCMR_EDGECOUNT   (0x00000000)
#define GPWTM_TW_GPTMTnMR_TnCMR_EDGETIME    (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnMR_R_TnAMS_MASK      (0x00000008)
#define GPWTM_TW_GPTMTnMR_R_TnAMS_BIT       (3)
#define GPWTM_TW_GPTMTnMR_R_TnAMS_CAPCOMP   (0x00000000)
#define GPWTM_TW_GPTMTnMR_R_TnAMS_PWM       (0x00000008)

#define GPWTM_TW_GPTMTnMR_TnAMS_MASK        (0x00000001)
#define GPWTM_TW_GPTMTnMR_TnAMS_CAPCOMP     (0x00000000)
#define GPWTM_TW_GPTMTnMR_TnAMS_PWM         (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnMR_R_TnCDIR_MASK     (0x00000010)
#define GPWTM_TW_GPTMTnMR_R_TnCDIR_BIT      (4)
#define GPWTM_TW_GPTMTnMR_R_TnCDIR_DOWN     (0x00000000)
#define GPWTM_TW_GPTMTnMR_R_TnCDIR_UP       (0x00000010)

#define GPWTM_TW_GPTMTnMR_TnCDIR_MASK       (0x00000001)
#define GPWTM_TW_GPTMTnMR_TnCDIR_DOWN       (0x00000000)
#define GPWTM_TW_GPTMTnMR_TnCDIR_UP         (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnMR_R_TnMIE_MASK      (0x00000020)
#define GPWTM_TW_GPTMTnMR_R_TnMIE_BIT       (5)
#define GPWTM_TW_GPTMTnMR_R_TnMIE_DIS       (0x00000000)
#define GPWTM_TW_GPTMTnMR_R_TnMIE_EN        (0x00000020)

#define GPWTM_TW_GPTMTnMR_TnMIE_MASK        (0x00000001)
#define GPWTM_TW_GPTMTnMR_TnMIE_DIS         (0x00000000)
#define GPWTM_TW_GPTMTnMR_TnMIE_EN          (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnMR_R_TnWOT_MASK      (0x00000040)
#define GPWTM_TW_GPTMTnMR_R_TnWOT_BIT       (6)
#define GPWTM_TW_GPTMTnMR_R_TnWOT_INSTANT   (0x00000000)
#define GPWTM_TW_GPTMTnMR_R_TnWOT_TRIGGER   (0x00000040)

#define GPWTM_TW_GPTMTnMR_TnWOT_MASK        (0x00000001)
#define GPWTM_TW_GPTMTnMR_TnWOT_INSTANT     (0x00000000)
#define GPWTM_TW_GPTMTnMR_TnWOT_TRIGGER     (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnMR_R_TnSNAPS_MASK    (0x00000080)
#define GPWTM_TW_GPTMTnMR_R_TnSNAPS_BIT     (7)
#define GPWTM_TW_GPTMTnMR_R_TnSNAPS_DIS     (0x00000000)
#define GPWTM_TW_GPTMTnMR_R_TnSNAPS_EN      (0x00000080)

#define GPWTM_TW_GPTMTnMR_TnSNAPS_MASK      (0x00000001)
#define GPWTM_TW_GPTMTnMR_TnSNAPS_DIS       (0x00000000)
#define GPWTM_TW_GPTMTnMR_TnSNAPS_EN        (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnMR_R_TnILD_MASK      (0x00000100)
#define GPWTM_TW_GPTMTnMR_R_TnILD_BIT       (8)
#define GPWTM_TW_GPTMTnMR_R_TnILD_NEXT      (0x00000000)
#define GPWTM_TW_GPTMTnMR_R_TnILD_TIMEOUT   (0x00000100)

#define GPWTM_TW_GPTMTnMR_TnILD_MASK        (0x00000001)
#define GPWTM_TW_GPTMTnMR_TnILD_NEXT        (0x00000000)
#define GPWTM_TW_GPTMTnMR_TnILD_TIMEOUT     (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnMR_R_TnPWMIE_MASK    (0x00000200)
#define GPWTM_TW_GPTMTnMR_R_TnPWMIE_BIT     (9)
#define GPWTM_TW_GPTMTnMR_R_TnPWMIE_DIS     (0x00000000)
#define GPWTM_TW_GPTMTnMR_R_TnPWMIE_EN      (0x00000200)

#define GPWTM_TW_GPTMTnMR_TnPWMIE_MASK      (0x00000001)
#define GPWTM_TW_GPTMTnMR_TnPWMIE_DIS       (0x00000000)
#define GPWTM_TW_GPTMTnMR_TnPWMIE_EN        (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnMR_R_TnMRSU_MASK     (0x00000400)
#define GPWTM_TW_GPTMTnMR_R_TnMRSU_BIT      (10)
#define GPWTM_TW_GPTMTnMR_R_TnMRSU_NEXT     (0x00000000)
#define GPWTM_TW_GPTMTnMR_R_TnMRSU_TIMEOUT  (0x00000400)

#define GPWTM_TW_GPTMTnMR_TnMRSU_MASK       (0x00000001)
#define GPWTM_TW_GPTMTnMR_TnMRSU_NEXT       (0x00000000)
#define GPWTM_TW_GPTMTnMR_TnMRSU_TIMEOUT    (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnMR_R_TnPLO_MASK      (0x00000800)
#define GPWTM_TW_GPTMTnMR_R_TnPLO_BIT       (11)
#define GPWTM_TW_GPTMTnMR_R_TnPLO_LOW       (0x00000000)
#define GPWTM_TW_GPTMTnMR_R_TnPLO_HIGH      (0x00000800)

#define GPWTM_TW_GPTMTnMR_TnPLO_MASK        (0x00000001)
#define GPWTM_TW_GPTMTnMR_TnPLO_LOW         (0x00000000)
#define GPWTM_TW_GPTMTnMR_TnPLO_HIGH        (0x00000001)
//--------

/* GPTM0 BITBANDING GPTMTAMR*/
#define GPTM0_BITBANDING_GPTMTAMR_TACMR         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TACMR_BIT*4))))
#define GPTM0_BITBANDING_GPTMTAMR_TAAMS         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAAMS_BIT*4))))
#define GPTM0_BITBANDING_GPTMTAMR_TACDIR        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TACDIR_BIT*4))))
#define GPTM0_BITBANDING_GPTMTAMR_TAMIE         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAMIE_BIT*4))))
#define GPTM0_BITBANDING_GPTMTAMR_TAWOT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAWOT_BIT*4))))
#define GPTM0_BITBANDING_GPTMTAMR_TASNAPS       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TASNAPS_BIT*4))))
#define GPTM0_BITBANDING_GPTMTAMR_TAILD         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAILD_BIT*4))))
#define GPTM0_BITBANDING_GPTMTAMR_TAPWMIE       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAPWMIE_BIT*4))))
#define GPTM0_BITBANDING_GPTMTAMR_TAMRSU        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAMRSU_BIT*4))))
#define GPTM0_BITBANDING_GPTMTAMR_TAPLO         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAPLO_BIT*4))))


#define GPTM0_BITBANDING_TA_GPTMTnMR_TnCMR      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnMR_TnAMS      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnMR_TnCDIR     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnMR_TnMIE      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnMR_TnWOT      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnMR_TnSNAPS    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnMR_TnILD      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnILD_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnMR_TnPWMIE    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnMR_TnMRSU     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnMR_TnPLO      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnPLO_BIT*4))))

#define GPTM0_BITBANDING_TW_GPTMTnMR_TnCMR      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnMR_TnAMS      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnMR_TnCDIR     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnMR_TnMIE      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnMR_TnWOT      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnMR_TnSNAPS    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnMR_TnILD      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnILD_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnMR_TnPWMIE    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnMR_TnMRSU     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnMR_TnPLO      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM1 BITBANDING GPTMTAMR*/
#define GPTM1_BITBANDING_GPTMTAMR_TACMR         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TACMR_BIT*4))))
#define GPTM1_BITBANDING_GPTMTAMR_TAAMS         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAAMS_BIT*4))))
#define GPTM1_BITBANDING_GPTMTAMR_TACDIR        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TACDIR_BIT*4))))
#define GPTM1_BITBANDING_GPTMTAMR_TAMIE         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAMIE_BIT*4))))
#define GPTM1_BITBANDING_GPTMTAMR_TAWOT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAWOT_BIT*4))))
#define GPTM1_BITBANDING_GPTMTAMR_TASNAPS       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TASNAPS_BIT*4))))
#define GPTM1_BITBANDING_GPTMTAMR_TAILD         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAILD_BIT*4))))
#define GPTM1_BITBANDING_GPTMTAMR_TAPWMIE       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAPWMIE_BIT*4))))
#define GPTM1_BITBANDING_GPTMTAMR_TAMRSU        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAMRSU_BIT*4))))
#define GPTM1_BITBANDING_GPTMTAMR_TAPLO         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAPLO_BIT*4))))


#define GPTM1_BITBANDING_TA_GPTMTnMR_TnCMR      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnMR_TnAMS      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnMR_TnCDIR     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnMR_TnMIE      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnMR_TnWOT      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnMR_TnSNAPS    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnMR_TnILD      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnILD_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnMR_TnPWMIE    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnMR_TnMRSU     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnMR_TnPLO      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnPLO_BIT*4))))

#define GPTM1_BITBANDING_TW_GPTMTnMR_TnCMR      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnMR_TnAMS      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnMR_TnCDIR     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnMR_TnMIE      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnMR_TnWOT      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnMR_TnSNAPS    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnMR_TnILD      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnILD_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnMR_TnPWMIE    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnMR_TnMRSU     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnMR_TnPLO      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM2 BITBANDING GPTMTAMR*/
#define GPTM2_BITBANDING_GPTMTAMR_TACMR         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TACMR_BIT*4))))
#define GPTM2_BITBANDING_GPTMTAMR_TAAMS         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAAMS_BIT*4))))
#define GPTM2_BITBANDING_GPTMTAMR_TACDIR        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TACDIR_BIT*4))))
#define GPTM2_BITBANDING_GPTMTAMR_TAMIE         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAMIE_BIT*4))))
#define GPTM2_BITBANDING_GPTMTAMR_TAWOT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAWOT_BIT*4))))
#define GPTM2_BITBANDING_GPTMTAMR_TASNAPS       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TASNAPS_BIT*4))))
#define GPTM2_BITBANDING_GPTMTAMR_TAILD         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAILD_BIT*4))))
#define GPTM2_BITBANDING_GPTMTAMR_TAPWMIE       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAPWMIE_BIT*4))))
#define GPTM2_BITBANDING_GPTMTAMR_TAMRSU        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAMRSU_BIT*4))))
#define GPTM2_BITBANDING_GPTMTAMR_TAPLO         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAPLO_BIT*4))))


#define GPTM2_BITBANDING_TA_GPTMTnMR_TnCMR      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnMR_TnAMS      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnMR_TnCDIR     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnMR_TnMIE      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnMR_TnWOT      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnMR_TnSNAPS    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnMR_TnILD      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnILD_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnMR_TnPWMIE    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnMR_TnMRSU     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnMR_TnPLO      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnPLO_BIT*4))))

#define GPTM2_BITBANDING_TW_GPTMTnMR_TnCMR      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnMR_TnAMS      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnMR_TnCDIR     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnMR_TnMIE      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnMR_TnWOT      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnMR_TnSNAPS    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnMR_TnILD      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnILD_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnMR_TnPWMIE    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnMR_TnMRSU     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnMR_TnPLO      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM3 BITBANDING GPTMTAMR*/
#define GPTM3_BITBANDING_GPTMTAMR_TACMR         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TACMR_BIT*4))))
#define GPTM3_BITBANDING_GPTMTAMR_TAAMS         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAAMS_BIT*4))))
#define GPTM3_BITBANDING_GPTMTAMR_TACDIR        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TACDIR_BIT*4))))
#define GPTM3_BITBANDING_GPTMTAMR_TAMIE         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAMIE_BIT*4))))
#define GPTM3_BITBANDING_GPTMTAMR_TAWOT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAWOT_BIT*4))))
#define GPTM3_BITBANDING_GPTMTAMR_TASNAPS       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TASNAPS_BIT*4))))
#define GPTM3_BITBANDING_GPTMTAMR_TAILD         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAILD_BIT*4))))
#define GPTM3_BITBANDING_GPTMTAMR_TAPWMIE       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAPWMIE_BIT*4))))
#define GPTM3_BITBANDING_GPTMTAMR_TAMRSU        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAMRSU_BIT*4))))
#define GPTM3_BITBANDING_GPTMTAMR_TAPLO         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAPLO_BIT*4))))


#define GPTM3_BITBANDING_TA_GPTMTnMR_TnCMR      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnMR_TnAMS      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnMR_TnCDIR     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnMR_TnMIE      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnMR_TnWOT      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnMR_TnSNAPS    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnMR_TnILD      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnILD_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnMR_TnPWMIE    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnMR_TnMRSU     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnMR_TnPLO      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnPLO_BIT*4))))

#define GPTM3_BITBANDING_TW_GPTMTnMR_TnCMR      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnMR_TnAMS      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnMR_TnCDIR     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnMR_TnMIE      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnMR_TnWOT      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnMR_TnSNAPS    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnMR_TnILD      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnILD_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnMR_TnPWMIE    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnMR_TnMRSU     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnMR_TnPLO      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM4 BITBANDING GPTMTAMR*/
#define GPTM4_BITBANDING_GPTMTAMR_TACMR         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TACMR_BIT*4))))
#define GPTM4_BITBANDING_GPTMTAMR_TAAMS         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAAMS_BIT*4))))
#define GPTM4_BITBANDING_GPTMTAMR_TACDIR        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TACDIR_BIT*4))))
#define GPTM4_BITBANDING_GPTMTAMR_TAMIE         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAMIE_BIT*4))))
#define GPTM4_BITBANDING_GPTMTAMR_TAWOT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAWOT_BIT*4))))
#define GPTM4_BITBANDING_GPTMTAMR_TASNAPS       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TASNAPS_BIT*4))))
#define GPTM4_BITBANDING_GPTMTAMR_TAILD         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAILD_BIT*4))))
#define GPTM4_BITBANDING_GPTMTAMR_TAPWMIE       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAPWMIE_BIT*4))))
#define GPTM4_BITBANDING_GPTMTAMR_TAMRSU        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAMRSU_BIT*4))))
#define GPTM4_BITBANDING_GPTMTAMR_TAPLO         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAPLO_BIT*4))))


#define GPTM4_BITBANDING_TA_GPTMTnMR_TnCMR      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnMR_TnAMS      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnMR_TnCDIR     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnMR_TnMIE      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnMR_TnWOT      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnMR_TnSNAPS    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnMR_TnILD      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnILD_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnMR_TnPWMIE    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnMR_TnMRSU     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnMR_TnPLO      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnPLO_BIT*4))))

#define GPTM4_BITBANDING_TW_GPTMTnMR_TnCMR      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnMR_TnAMS      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnMR_TnCDIR     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnMR_TnMIE      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnMR_TnWOT      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnMR_TnSNAPS    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnMR_TnILD      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnILD_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnMR_TnPWMIE    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnMR_TnMRSU     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnMR_TnPLO      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM5 BITBANDING GPTMTAMR*/
#define GPTM5_BITBANDING_GPTMTAMR_TACMR         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TACMR_BIT*4))))
#define GPTM5_BITBANDING_GPTMTAMR_TAAMS         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAAMS_BIT*4))))
#define GPTM5_BITBANDING_GPTMTAMR_TACDIR        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TACDIR_BIT*4))))
#define GPTM5_BITBANDING_GPTMTAMR_TAMIE         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAMIE_BIT*4))))
#define GPTM5_BITBANDING_GPTMTAMR_TAWOT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAWOT_BIT*4))))
#define GPTM5_BITBANDING_GPTMTAMR_TASNAPS       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TASNAPS_BIT*4))))
#define GPTM5_BITBANDING_GPTMTAMR_TAILD         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAILD_BIT*4))))
#define GPTM5_BITBANDING_GPTMTAMR_TAPWMIE       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAPWMIE_BIT*4))))
#define GPTM5_BITBANDING_GPTMTAMR_TAMRSU        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAMRSU_BIT*4))))
#define GPTM5_BITBANDING_GPTMTAMR_TAPLO         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAMR_OFFSET)*32)+(GPTM_GPTMTAMR_R_TAPLO_BIT*4))))


#define GPTM5_BITBANDING_TA_GPTMTnMR_TnCMR      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnMR_TnAMS      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnMR_TnCDIR     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnMR_TnMIE      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnMR_TnWOT      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnMR_TnSNAPS    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnMR_TnILD      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnILD_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnMR_TnPWMIE    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnMR_TnMRSU     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnMR_TnPLO      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnMR_OFFSET)*32)+(GPTM_TA_GPTMTnMR_R_TnPLO_BIT*4))))

#define GPTM5_BITBANDING_TW_GPTMTnMR_TnCMR      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnMR_TnAMS      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnMR_TnCDIR     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnMR_TnMIE      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnMR_TnWOT      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnMR_TnSNAPS    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnMR_TnILD      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnILD_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnMR_TnPWMIE    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnMR_TnMRSU     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnMR_TnPLO      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnMR_OFFSET)*32)+(GPTM_TW_GPTMTnMR_R_TnPLO_BIT*4))))


/* GPTM0 BITBANDING GPTMTAMR*/
#define GPWTM0_BITBANDING_GPTMTAMR_TACMR        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TACMR_BIT*4))))
#define GPWTM0_BITBANDING_GPTMTAMR_TAAMS        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAAMS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMTAMR_TACDIR       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TACDIR_BIT*4))))
#define GPWTM0_BITBANDING_GPTMTAMR_TAMIE        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAMIE_BIT*4))))
#define GPWTM0_BITBANDING_GPTMTAMR_TAWOT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAWOT_BIT*4))))
#define GPWTM0_BITBANDING_GPTMTAMR_TASNAPS      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TASNAPS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMTAMR_TAILD        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAILD_BIT*4))))
#define GPWTM0_BITBANDING_GPTMTAMR_TAPWMIE      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAPWMIE_BIT*4))))
#define GPWTM0_BITBANDING_GPTMTAMR_TAMRSU       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAMRSU_BIT*4))))
#define GPWTM0_BITBANDING_GPTMTAMR_TAPLO        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAPLO_BIT*4))))


#define GPWTM0_BITBANDING_TA_GPTMTnMR_TnCMR     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnMR_TnAMS     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnMR_TnCDIR    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnMR_TnMIE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnMR_TnWOT     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnMR_TnSNAPS   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnMR_TnILD     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnILD_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnMR_TnPWMIE   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnMR_TnMRSU    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnMR_TnPLO     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnPLO_BIT*4))))

#define GPWTM0_BITBANDING_TW_GPTMTnMR_TnCMR     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnMR_TnAMS     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnMR_TnCDIR    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnMR_TnMIE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnMR_TnWOT     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnMR_TnSNAPS   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnMR_TnILD     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnILD_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnMR_TnPWMIE   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnMR_TnMRSU    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnMR_TnPLO     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM1 BITBANDING GPTMTAMR*/
#define GPWTM1_BITBANDING_GPTMTAMR_TACMR        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TACMR_BIT*4))))
#define GPWTM1_BITBANDING_GPTMTAMR_TAAMS        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAAMS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMTAMR_TACDIR       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TACDIR_BIT*4))))
#define GPWTM1_BITBANDING_GPTMTAMR_TAMIE        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAMIE_BIT*4))))
#define GPWTM1_BITBANDING_GPTMTAMR_TAWOT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAWOT_BIT*4))))
#define GPWTM1_BITBANDING_GPTMTAMR_TASNAPS      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TASNAPS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMTAMR_TAILD        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAILD_BIT*4))))
#define GPWTM1_BITBANDING_GPTMTAMR_TAPWMIE      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAPWMIE_BIT*4))))
#define GPWTM1_BITBANDING_GPTMTAMR_TAMRSU       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAMRSU_BIT*4))))
#define GPWTM1_BITBANDING_GPTMTAMR_TAPLO        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAPLO_BIT*4))))


#define GPWTM1_BITBANDING_TA_GPTMTnMR_TnCMR     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnMR_TnAMS     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnMR_TnCDIR    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnMR_TnMIE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnMR_TnWOT     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnMR_TnSNAPS   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnMR_TnILD     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnILD_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnMR_TnPWMIE   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnMR_TnMRSU    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnMR_TnPLO     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnPLO_BIT*4))))

#define GPWTM1_BITBANDING_TW_GPTMTnMR_TnCMR     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnMR_TnAMS     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnMR_TnCDIR    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnMR_TnMIE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnMR_TnWOT     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnMR_TnSNAPS   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnMR_TnILD     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnILD_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnMR_TnPWMIE   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnMR_TnMRSU    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnMR_TnPLO     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM2 BITBANDING GPTMTAMR*/
#define GPWTM2_BITBANDING_GPTMTAMR_TACMR        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TACMR_BIT*4))))
#define GPWTM2_BITBANDING_GPTMTAMR_TAAMS        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAAMS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMTAMR_TACDIR       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TACDIR_BIT*4))))
#define GPWTM2_BITBANDING_GPTMTAMR_TAMIE        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAMIE_BIT*4))))
#define GPWTM2_BITBANDING_GPTMTAMR_TAWOT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAWOT_BIT*4))))
#define GPWTM2_BITBANDING_GPTMTAMR_TASNAPS      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TASNAPS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMTAMR_TAILD        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAILD_BIT*4))))
#define GPWTM2_BITBANDING_GPTMTAMR_TAPWMIE      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAPWMIE_BIT*4))))
#define GPWTM2_BITBANDING_GPTMTAMR_TAMRSU       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAMRSU_BIT*4))))
#define GPWTM2_BITBANDING_GPTMTAMR_TAPLO        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAPLO_BIT*4))))


#define GPWTM2_BITBANDING_TA_GPTMTnMR_TnCMR     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnMR_TnAMS     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnMR_TnCDIR    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnMR_TnMIE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnMR_TnWOT     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnMR_TnSNAPS   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnMR_TnILD     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnILD_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnMR_TnPWMIE   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnMR_TnMRSU    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnMR_TnPLO     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnPLO_BIT*4))))

#define GPWTM2_BITBANDING_TW_GPTMTnMR_TnCMR     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnMR_TnAMS     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnMR_TnCDIR    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnMR_TnMIE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnMR_TnWOT     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnMR_TnSNAPS   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnMR_TnILD     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnILD_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnMR_TnPWMIE   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnMR_TnMRSU    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnMR_TnPLO     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM3 BITBANDING GPTMTAMR*/
#define GPWTM3_BITBANDING_GPTMTAMR_TACMR        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TACMR_BIT*4))))
#define GPWTM3_BITBANDING_GPTMTAMR_TAAMS        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAAMS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMTAMR_TACDIR       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TACDIR_BIT*4))))
#define GPWTM3_BITBANDING_GPTMTAMR_TAMIE        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAMIE_BIT*4))))
#define GPWTM3_BITBANDING_GPTMTAMR_TAWOT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAWOT_BIT*4))))
#define GPWTM3_BITBANDING_GPTMTAMR_TASNAPS      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TASNAPS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMTAMR_TAILD        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAILD_BIT*4))))
#define GPWTM3_BITBANDING_GPTMTAMR_TAPWMIE      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAPWMIE_BIT*4))))
#define GPWTM3_BITBANDING_GPTMTAMR_TAMRSU       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAMRSU_BIT*4))))
#define GPWTM3_BITBANDING_GPTMTAMR_TAPLO        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAPLO_BIT*4))))


#define GPWTM3_BITBANDING_TA_GPTMTnMR_TnCMR     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnMR_TnAMS     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnMR_TnCDIR    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnMR_TnMIE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnMR_TnWOT     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnMR_TnSNAPS   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnMR_TnILD     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnILD_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnMR_TnPWMIE   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnMR_TnMRSU    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnMR_TnPLO     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnPLO_BIT*4))))

#define GPWTM3_BITBANDING_TW_GPTMTnMR_TnCMR     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnMR_TnAMS     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnMR_TnCDIR    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnMR_TnMIE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnMR_TnWOT     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnMR_TnSNAPS   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnMR_TnILD     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnILD_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnMR_TnPWMIE   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnMR_TnMRSU    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnMR_TnPLO     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM4 BITBANDING GPTMTAMR*/
#define GPWTM4_BITBANDING_GPTMTAMR_TACMR        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TACMR_BIT*4))))
#define GPWTM4_BITBANDING_GPTMTAMR_TAAMS        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAAMS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMTAMR_TACDIR       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TACDIR_BIT*4))))
#define GPWTM4_BITBANDING_GPTMTAMR_TAMIE        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAMIE_BIT*4))))
#define GPWTM4_BITBANDING_GPTMTAMR_TAWOT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAWOT_BIT*4))))
#define GPWTM4_BITBANDING_GPTMTAMR_TASNAPS      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TASNAPS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMTAMR_TAILD        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAILD_BIT*4))))
#define GPWTM4_BITBANDING_GPTMTAMR_TAPWMIE      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAPWMIE_BIT*4))))
#define GPWTM4_BITBANDING_GPTMTAMR_TAMRSU       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAMRSU_BIT*4))))
#define GPWTM4_BITBANDING_GPTMTAMR_TAPLO        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAPLO_BIT*4))))


#define GPWTM4_BITBANDING_TA_GPTMTnMR_TnCMR     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnMR_TnAMS     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnMR_TnCDIR    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnMR_TnMIE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnMR_TnWOT     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnMR_TnSNAPS   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnMR_TnILD     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnILD_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnMR_TnPWMIE   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnMR_TnMRSU    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnMR_TnPLO     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnPLO_BIT*4))))

#define GPWTM4_BITBANDING_TW_GPTMTnMR_TnCMR     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnMR_TnAMS     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnMR_TnCDIR    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnMR_TnMIE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnMR_TnWOT     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnMR_TnSNAPS   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnMR_TnILD     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnILD_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnMR_TnPWMIE   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnMR_TnMRSU    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnMR_TnPLO     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM5 BITBANDING GPTMTAMR*/
#define GPWTM5_BITBANDING_GPTMTAMR_TACMR        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TACMR_BIT*4))))
#define GPWTM5_BITBANDING_GPTMTAMR_TAAMS        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAAMS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMTAMR_TACDIR       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TACDIR_BIT*4))))
#define GPWTM5_BITBANDING_GPTMTAMR_TAMIE        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAMIE_BIT*4))))
#define GPWTM5_BITBANDING_GPTMTAMR_TAWOT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAWOT_BIT*4))))
#define GPWTM5_BITBANDING_GPTMTAMR_TASNAPS      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TASNAPS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMTAMR_TAILD        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAILD_BIT*4))))
#define GPWTM5_BITBANDING_GPTMTAMR_TAPWMIE      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAPWMIE_BIT*4))))
#define GPWTM5_BITBANDING_GPTMTAMR_TAMRSU       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAMRSU_BIT*4))))
#define GPWTM5_BITBANDING_GPTMTAMR_TAPLO        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAMR_OFFSET)*32)+(GPWTM_GPTMTAMR_R_TAPLO_BIT*4))))


#define GPWTM5_BITBANDING_TA_GPTMTnMR_TnCMR     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnMR_TnAMS     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnMR_TnCDIR    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnMR_TnMIE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnMR_TnWOT     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnMR_TnSNAPS   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnMR_TnILD     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnILD_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnMR_TnPWMIE   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnMR_TnMRSU    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnMR_TnPLO     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnMR_OFFSET)*32)+(GPWTM_TA_GPTMTnMR_R_TnPLO_BIT*4))))

#define GPWTM5_BITBANDING_TW_GPTMTnMR_TnCMR     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnMR_TnAMS     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnMR_TnCDIR    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnMR_TnMIE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnMR_TnWOT     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnMR_TnSNAPS   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnMR_TnILD     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnILD_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnMR_TnPWMIE   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnMR_TnMRSU    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnMR_TnPLO     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMR_OFFSET)*32)+(GPWTM_TW_GPTMTnMR_R_TnPLO_BIT*4))))


/******************************************************************************************
************************************ 3 GPTMTBMR *********************************************
******************************************************************************************/

/* GPTM0 GPTMTBMR*/
#define GPTM0_BITBANDING_GPTMTBMR       (((BITBANDING_GPTMTBMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBMR_OFFSET)*32))))
#define GPTM0_GPTMTBMR                  (((GPTMTBMR_TypeDef*)(GPTM0_BASE + GPTM_GPTMTBMR_OFFSET )))
#define GPTM0_GPTMTBMR_R                (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMTBMR_OFFSET)))

#define GPTM0_BITBANDING_TB_GPTMTnMR    (((BITBANDING_TB_GPTMMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32))))
#define GPTM0_TB_GPTMTnMR               (((TB_GPTMMR_TypeDef*)(GPTM0_BASE + GPTM_TB_GPTMTnMR_OFFSET )))
#define GPTM0_TB_GPTMTnMR_R             (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TB_GPTMTnMR_OFFSET)))

/* GPTM1 GPTMTBMR*/
#define GPTM1_BITBANDING_GPTMTBMR       (((BITBANDING_GPTMTBMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBMR_OFFSET)*32))))
#define GPTM1_GPTMTBMR                  (((GPTMTBMR_TypeDef*)(GPTM1_BASE + GPTM_GPTMTBMR_OFFSET )))
#define GPTM1_GPTMTBMR_R                (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMTBMR_OFFSET)))

#define GPTM1_BITBANDING_TB_GPTMTnMR    (((BITBANDING_TB_GPTMMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32))))
#define GPTM1_TB_GPTMTnMR               (((TB_GPTMMR_TypeDef*)(GPTM1_BASE + GPTM_TB_GPTMTnMR_OFFSET )))
#define GPTM1_TB_GPTMTnMR_R             (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TB_GPTMTnMR_OFFSET)))

/* GPTM2 GPTMTBMR*/
#define GPTM2_BITBANDING_GPTMTBMR       (((BITBANDING_GPTMTBMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBMR_OFFSET)*32))))
#define GPTM2_GPTMTBMR                  (((GPTMTBMR_TypeDef*)(GPTM2_BASE + GPTM_GPTMTBMR_OFFSET )))
#define GPTM2_GPTMTBMR_R                (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMTBMR_OFFSET)))

#define GPTM2_BITBANDING_TB_GPTMTnMR    (((BITBANDING_TB_GPTMMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32))))
#define GPTM2_TB_GPTMTnMR               (((TB_GPTMMR_TypeDef*)(GPTM2_BASE + GPTM_TB_GPTMTnMR_OFFSET )))
#define GPTM2_TB_GPTMTnMR_R             (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TB_GPTMTnMR_OFFSET)))

/* GPTM3 GPTMTBMR*/
#define GPTM3_BITBANDING_GPTMTBMR       (((BITBANDING_GPTMTBMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBMR_OFFSET)*32))))
#define GPTM3_GPTMTBMR                  (((GPTMTBMR_TypeDef*)(GPTM3_BASE + GPTM_GPTMTBMR_OFFSET )))
#define GPTM3_GPTMTBMR_R                (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMTBMR_OFFSET)))

#define GPTM3_BITBANDING_TB_GPTMTnMR    (((BITBANDING_TB_GPTMMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32))))
#define GPTM3_TB_GPTMTnMR               (((TB_GPTMMR_TypeDef*)(GPTM3_BASE + GPTM_TB_GPTMTnMR_OFFSET )))
#define GPTM3_TB_GPTMTnMR_R             (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TB_GPTMTnMR_OFFSET)))

/* GPTM4 GPTMTBMR*/
#define GPTM4_BITBANDING_GPTMTBMR       (((BITBANDING_GPTMTBMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBMR_OFFSET)*32))))
#define GPTM4_GPTMTBMR                  (((GPTMTBMR_TypeDef*)(GPTM4_BASE + GPTM_GPTMTBMR_OFFSET )))
#define GPTM4_GPTMTBMR_R                (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMTBMR_OFFSET)))

#define GPTM4_BITBANDING_TB_GPTMTnMR    (((BITBANDING_TB_GPTMMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32))))
#define GPTM4_TB_GPTMTnMR               (((TB_GPTMMR_TypeDef*)(GPTM4_BASE + GPTM_TB_GPTMTnMR_OFFSET )))
#define GPTM4_TB_GPTMTnMR_R             (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TB_GPTMTnMR_OFFSET)))

/* GPTM5 GPTMTBMR*/
#define GPTM5_BITBANDING_GPTMTBMR       (((BITBANDING_GPTMTBMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBMR_OFFSET)*32))))
#define GPTM5_GPTMTBMR                  (((GPTMTBMR_TypeDef*)(GPTM5_BASE + GPTM_GPTMTBMR_OFFSET )))
#define GPTM5_GPTMTBMR_R                (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMTBMR_OFFSET)))

#define GPTM5_BITBANDING_TB_GPTMTnMR    (((BITBANDING_TB_GPTMMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32))))
#define GPTM5_TB_GPTMTnMR               (((TB_GPTMMR_TypeDef*)(GPTM5_BASE + GPTM_TB_GPTMTnMR_OFFSET )))
#define GPTM5_TB_GPTMTnMR_R             (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TB_GPTMTnMR_OFFSET)))

/* GPWTM0 GPTMTBMR*/
#define GPWTM0_BITBANDING_GPTMTBMR       (((BITBANDING_GPTMTBMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32))))
#define GPWTM0_GPTMTBMR                  (((GPTMTBMR_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMTBMR_OFFSET )))
#define GPWTM0_GPTMTBMR_R                (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMTBMR_OFFSET)))

#define GPWTM0_BITBANDING_TB_GPTMTnMR    (((BITBANDING_TB_GPTMMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32))))
#define GPWTM0_TB_GPTMTnMR               (((TB_GPTMMR_TypeDef*)(GPWTM0_BASE + GPWTM_TB_GPTMTnMR_OFFSET )))
#define GPWTM0_TB_GPTMTnMR_R             (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TB_GPTMTnMR_OFFSET)))

/* GPWTM1 GPTMTBMR*/
#define GPWTM1_BITBANDING_GPTMTBMR       (((BITBANDING_GPTMTBMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32))))
#define GPWTM1_GPTMTBMR                  (((GPTMTBMR_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMTBMR_OFFSET )))
#define GPWTM1_GPTMTBMR_R                (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMTBMR_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnMR    (((BITBANDING_TB_GPTMMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnMR               (((TB_GPTMMR_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnMR_OFFSET )))
#define GPWTM1_TB_GPTMTnMR_R             (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnMR_OFFSET)))

/* GPWTM2 GPTMTBMR*/
#define GPWTM2_BITBANDING_GPTMTBMR       (((BITBANDING_GPTMTBMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32))))
#define GPWTM2_GPTMTBMR                  (((GPTMTBMR_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMTBMR_OFFSET )))
#define GPWTM2_GPTMTBMR_R                (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMTBMR_OFFSET)))

#define GPWTM2_BITBANDING_TB_GPTMTnMR    (((BITBANDING_TB_GPTMMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32))))
#define GPWTM2_TB_GPTMTnMR               (((TB_GPTMMR_TypeDef*)(GPWTM2_BASE + GPWTM_TB_GPTMTnMR_OFFSET )))
#define GPWTM2_TB_GPTMTnMR_R             (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TB_GPTMTnMR_OFFSET)))

/* GPWTM3 GPTMTBMR*/
#define GPWTM3_BITBANDING_GPTMTBMR       (((BITBANDING_GPTMTBMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32))))
#define GPWTM3_GPTMTBMR                  (((GPTMTBMR_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMTBMR_OFFSET )))
#define GPWTM3_GPTMTBMR_R                (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMTBMR_OFFSET)))

#define GPWTM3_BITBANDING_TB_GPTMTnMR    (((BITBANDING_TB_GPTMMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32))))
#define GPWTM3_TB_GPTMTnMR               (((TB_GPTMMR_TypeDef*)(GPWTM3_BASE + GPWTM_TB_GPTMTnMR_OFFSET )))
#define GPWTM3_TB_GPTMTnMR_R             (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TB_GPTMTnMR_OFFSET)))

/* GPWTM4 GPTMTBMR*/
#define GPWTM4_BITBANDING_GPTMTBMR       (((BITBANDING_GPTMTBMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32))))
#define GPWTM4_GPTMTBMR                  (((GPTMTBMR_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMTBMR_OFFSET )))
#define GPWTM4_GPTMTBMR_R                (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMTBMR_OFFSET)))

#define GPWTM4_BITBANDING_TB_GPTMTnMR    (((BITBANDING_TB_GPTMMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32))))
#define GPWTM4_TB_GPTMTnMR               (((TB_GPTMMR_TypeDef*)(GPWTM4_BASE + GPWTM_TB_GPTMTnMR_OFFSET )))
#define GPWTM4_TB_GPTMTnMR_R             (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TB_GPTMTnMR_OFFSET)))

/* GPWTM5 GPTMTBMR*/
#define GPWTM5_BITBANDING_GPTMTBMR       (((BITBANDING_GPTMTBMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32))))
#define GPWTM5_GPTMTBMR                  (((GPTMTBMR_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMTBMR_OFFSET )))
#define GPWTM5_GPTMTBMR_R                (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMTBMR_OFFSET)))

#define GPWTM5_BITBANDING_TB_GPTMTnMR    (((BITBANDING_TB_GPTMMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32))))
#define GPWTM5_TB_GPTMTnMR               (((TB_GPTMMR_TypeDef*)(GPWTM5_BASE + GPWTM_TB_GPTMTnMR_OFFSET )))
#define GPWTM5_TB_GPTMTnMR_R             (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TB_GPTMTnMR_OFFSET)))



//--------
#define GPTM_GPTMTBMR_R_TBMR_MASK           (0x00000003)
#define GPTM_GPTMTBMR_R_TBMR_BIT            (0)
#define GPTM_GPTMTBMR_R_TBMR_ONESHOT        (0x00000001)
#define GPTM_GPTMTBMR_R_TBMR_PERIOD         (0x00000002)
#define GPTM_GPTMTBMR_R_TBMR_CAPTURE        (0x00000003)

#define GPTM_GPTMTBMR_TBMR_MASK             (0x00000003)
#define GPTM_GPTMTBMR_TBMR_ONESHOT          (0x00000001)
#define GPTM_GPTMTBMR_TBMR_PERIOD           (0x00000002)
#define GPTM_GPTMTBMR_TBMR_CAPTURE          (0x00000003)
//--------

//--------
#define GPTM_GPTMTBMR_R_TBCMR_MASK          (0x00000004)
#define GPTM_GPTMTBMR_R_TBCMR_BIT           (2)
#define GPTM_GPTMTBMR_R_TBCMR_EDGECOUNT     (0x00000000)
#define GPTM_GPTMTBMR_R_TBCMR_EDGETIME      (0x00000004)

#define GPTM_GPTMTBMR_TBCMR_MASK            (0x00000001)
#define GPTM_GPTMTBMR_TBCMR_EDGECOUNT       (0x00000000)
#define GPTM_GPTMTBMR_TBCMR_EDGETIME        (0x00000001)
//--------

//--------
#define GPTM_GPTMTBMR_R_TBAMS_MASK          (0x00000008)
#define GPTM_GPTMTBMR_R_TBAMS_BIT           (3)
#define GPTM_GPTMTBMR_R_TBAMS_CAPCOMP       (0x00000000)
#define GPTM_GPTMTBMR_R_TBAMS_PWM           (0x00000008)

#define GPTM_GPTMTBMR_TBAMS_MASK            (0x00000001)
#define GPTM_GPTMTBMR_TBAMS_CAPCOMP         (0x00000000)
#define GPTM_GPTMTBMR_TBAMS_PWM             (0x00000001)
//--------

//--------
#define GPTM_GPTMTBMR_R_TBCDIR_MASK         (0x00000010)
#define GPTM_GPTMTBMR_R_TBCDIR_BIT          (4)
#define GPTM_GPTMTBMR_R_TBCDIR_DOWN         (0x00000000)
#define GPTM_GPTMTBMR_R_TBCDIR_UP           (0x00000010)

#define GPTM_GPTMTBMR_TBCDIR_MASK           (0x00000001)
#define GPTM_GPTMTBMR_TBCDIR_DOWN           (0x00000000)
#define GPTM_GPTMTBMR_TBCDIR_UP             (0x00000001)
//--------

//--------
#define GPTM_GPTMTBMR_R_TBMIE_MASK          (0x00000020)
#define GPTM_GPTMTBMR_R_TBMIE_BIT           (5)
#define GPTM_GPTMTBMR_R_TBMIE_DIS           (0x00000000)
#define GPTM_GPTMTBMR_R_TBMIE_EN            (0x00000020)

#define GPTM_GPTMTBMR_TBMIE_MASK            (0x00000001)
#define GPTM_GPTMTBMR_TBMIE_DIS             (0x00000000)
#define GPTM_GPTMTBMR_TBMIE_EN              (0x00000001)
//--------

//--------
#define GPTM_GPTMTBMR_R_TBWOT_MASK          (0x00000040)
#define GPTM_GPTMTBMR_R_TBWOT_BIT           (6)
#define GPTM_GPTMTBMR_R_TBWOT_INSTBNT       (0x00000000)
#define GPTM_GPTMTBMR_R_TBWOT_TRIGGER       (0x00000040)

#define GPTM_GPTMTBMR_TBWOT_MASK            (0x00000001)
#define GPTM_GPTMTBMR_TBWOT_INSTBNT         (0x00000000)
#define GPTM_GPTMTBMR_TBWOT_TRIGGER         (0x00000001)
//--------

//--------
#define GPTM_GPTMTBMR_R_TBSNAPS_MASK        (0x00000080)
#define GPTM_GPTMTBMR_R_TBSNAPS_BIT         (7)
#define GPTM_GPTMTBMR_R_TBSNAPS_DIS         (0x00000000)
#define GPTM_GPTMTBMR_R_TBSNAPS_EN          (0x00000080)

#define GPTM_GPTMTBMR_TBSNAPS_MASK          (0x00000001)
#define GPTM_GPTMTBMR_TBSNAPS_DIS           (0x00000000)
#define GPTM_GPTMTBMR_TBSNAPS_EN            (0x00000001)
//--------

//--------
#define GPTM_GPTMTBMR_R_TBILD_MASK          (0x00000100)
#define GPTM_GPTMTBMR_R_TBILD_BIT           (8)
#define GPTM_GPTMTBMR_R_TBILD_NEXT          (0x00000000)
#define GPTM_GPTMTBMR_R_TBILD_TIMEOUT       (0x00000100)

#define GPTM_GPTMTBMR_TBILD_MASK            (0x00000001)
#define GPTM_GPTMTBMR_TBILD_NEXT            (0x00000000)
#define GPTM_GPTMTBMR_TBILD_TIMEOUT         (0x00000001)
//--------

//--------
#define GPTM_GPTMTBMR_R_TBPWMIE_MASK        (0x00000200)
#define GPTM_GPTMTBMR_R_TBPWMIE_BIT         (9)
#define GPTM_GPTMTBMR_R_TBPWMIE_DIS         (0x00000000)
#define GPTM_GPTMTBMR_R_TBPWMIE_EN          (0x00000200)

#define GPTM_GPTMTBMR_TBPWMIE_MASK          (0x00000001)
#define GPTM_GPTMTBMR_TBPWMIE_DIS           (0x00000000)
#define GPTM_GPTMTBMR_TBPWMIE_EN            (0x00000001)
//--------

//--------
#define GPTM_GPTMTBMR_R_TBMRSU_MASK         (0x00000400)
#define GPTM_GPTMTBMR_R_TBMRSU_BIT          (10)
#define GPTM_GPTMTBMR_R_TBMRSU_NEXT         (0x00000000)
#define GPTM_GPTMTBMR_R_TBMRSU_TIMEOUT      (0x00000400)

#define GPTM_GPTMTBMR_TBMRSU_MASK           (0x00000001)
#define GPTM_GPTMTBMR_TBMRSU_NEXT           (0x00000000)
#define GPTM_GPTMTBMR_TBMRSU_TIMEOUT        (0x00000001)
//--------

//--------
#define GPTM_GPTMTBMR_R_TBPLO_MASK          (0x00000800)
#define GPTM_GPTMTBMR_R_TBPLO_BIT           (11)
#define GPTM_GPTMTBMR_R_TBPLO_LOW           (0x00000000)
#define GPTM_GPTMTBMR_R_TBPLO_HIGH          (0x00000800)

#define GPTM_GPTMTBMR_TBPLO_MASK            (0x00000001)
#define GPTM_GPTMTBMR_TBPLO_LOW             (0x00000000)
#define GPTM_GPTMTBMR_TBPLO_HIGH            (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnMR_R_TnMR_MASK        (0x00000003)
#define GPTM_TB_GPTMTnMR_R_TnMR_BIT         (0)
#define GPTM_TB_GPTMTnMR_R_TnMR_ONESHOT     (0x00000001)
#define GPTM_TB_GPTMTnMR_R_TnMR_PERIOD      (0x00000002)
#define GPTM_TB_GPTMTnMR_R_TnMR_CAPTURE     (0x00000003)

#define GPTM_TB_GPTMTnMR_TnMR_MASK          (0x00000003)
#define GPTM_TB_GPTMTnMR_TnMR_ONESHOT       (0x00000001)
#define GPTM_TB_GPTMTnMR_TnMR_PERIOD        (0x00000002)
#define GPTM_TB_GPTMTnMR_TnMR_CAPTURE       (0x00000003)
//--------

//--------
#define GPTM_TB_GPTMTnMR_R_TnCMR_MASK       (0x00000004)
#define GPTM_TB_GPTMTnMR_R_TnCMR_BIT        (2)
#define GPTM_TB_GPTMTnMR_R_TnCMR_EDGECOUNT  (0x00000000)
#define GPTM_TB_GPTMTnMR_R_TnCMR_EDGETIME   (0x00000004)

#define GPTM_TB_GPTMTnMR_TnCMR_MASK         (0x00000001)
#define GPTM_TB_GPTMTnMR_TnCMR_EDGECOUNT    (0x00000000)
#define GPTM_TB_GPTMTnMR_TnCMR_EDGETIME     (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnMR_R_TnAMS_MASK       (0x00000008)
#define GPTM_TB_GPTMTnMR_R_TnAMS_BIT        (3)
#define GPTM_TB_GPTMTnMR_R_TnAMS_CAPCOMP    (0x00000000)
#define GPTM_TB_GPTMTnMR_R_TnAMS_PWM        (0x00000008)

#define GPTM_TB_GPTMTnMR_TnAMS_MASK         (0x00000001)
#define GPTM_TB_GPTMTnMR_TnAMS_CAPCOMP      (0x00000000)
#define GPTM_TB_GPTMTnMR_TnAMS_PWM          (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnMR_R_TnCDIR_MASK      (0x00000010)
#define GPTM_TB_GPTMTnMR_R_TnCDIR_BIT       (4)
#define GPTM_TB_GPTMTnMR_R_TnCDIR_DOWN      (0x00000000)
#define GPTM_TB_GPTMTnMR_R_TnCDIR_UP        (0x00000010)

#define GPTM_TB_GPTMTnMR_TnCDIR_MASK        (0x00000001)
#define GPTM_TB_GPTMTnMR_TnCDIR_DOWN        (0x00000000)
#define GPTM_TB_GPTMTnMR_TnCDIR_UP          (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnMR_R_TnMIE_MASK       (0x00000020)
#define GPTM_TB_GPTMTnMR_R_TnMIE_BIT        (5)
#define GPTM_TB_GPTMTnMR_R_TnMIE_DIS        (0x00000000)
#define GPTM_TB_GPTMTnMR_R_TnMIE_EN         (0x00000020)

#define GPTM_TB_GPTMTnMR_TnMIE_MASK         (0x00000001)
#define GPTM_TB_GPTMTnMR_TnMIE_DIS          (0x00000000)
#define GPTM_TB_GPTMTnMR_TnMIE_EN           (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnMR_R_TnWOT_MASK       (0x00000040)
#define GPTM_TB_GPTMTnMR_R_TnWOT_BIT        (6)
#define GPTM_TB_GPTMTnMR_R_TnWOT_INSTBNT    (0x00000000)
#define GPTM_TB_GPTMTnMR_R_TnWOT_TRIGGER    (0x00000040)

#define GPTM_TB_GPTMTnMR_TnWOT_MASK         (0x00000001)
#define GPTM_TB_GPTMTnMR_TnWOT_INSTBNT      (0x00000000)
#define GPTM_TB_GPTMTnMR_TnWOT_TRIGGER      (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnMR_R_TnSNAPS_MASK     (0x00000080)
#define GPTM_TB_GPTMTnMR_R_TnSNAPS_BIT      (7)
#define GPTM_TB_GPTMTnMR_R_TnSNAPS_DIS      (0x00000000)
#define GPTM_TB_GPTMTnMR_R_TnSNAPS_EN       (0x00000080)

#define GPTM_TB_GPTMTnMR_TnSNAPS_MASK       (0x00000001)
#define GPTM_TB_GPTMTnMR_TnSNAPS_DIS        (0x00000000)
#define GPTM_TB_GPTMTnMR_TnSNAPS_EN         (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnMR_R_TnILD_MASK       (0x00000100)
#define GPTM_TB_GPTMTnMR_R_TnILD_BIT        (8)
#define GPTM_TB_GPTMTnMR_R_TnILD_NEXT       (0x00000000)
#define GPTM_TB_GPTMTnMR_R_TnILD_TIMEOUT    (0x00000100)

#define GPTM_TB_GPTMTnMR_TnILD_MASK         (0x00000001)
#define GPTM_TB_GPTMTnMR_TnILD_NEXT         (0x00000000)
#define GPTM_TB_GPTMTnMR_TnILD_TIMEOUT      (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnMR_R_TnPWMIE_MASK     (0x00000200)
#define GPTM_TB_GPTMTnMR_R_TnPWMIE_BIT      (9)
#define GPTM_TB_GPTMTnMR_R_TnPWMIE_DIS      (0x00000000)
#define GPTM_TB_GPTMTnMR_R_TnPWMIE_EN       (0x00000200)

#define GPTM_TB_GPTMTnMR_TnPWMIE_MASK       (0x00000001)
#define GPTM_TB_GPTMTnMR_TnPWMIE_DIS        (0x00000000)
#define GPTM_TB_GPTMTnMR_TnPWMIE_EN         (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnMR_R_TnMRSU_MASK      (0x00000400)
#define GPTM_TB_GPTMTnMR_R_TnMRSU_BIT       (10)
#define GPTM_TB_GPTMTnMR_R_TnMRSU_NEXT      (0x00000000)
#define GPTM_TB_GPTMTnMR_R_TnMRSU_TIMEOUT   (0x00000400)

#define GPTM_TB_GPTMTnMR_TnMRSU_MASK        (0x00000001)
#define GPTM_TB_GPTMTnMR_TnMRSU_NEXT        (0x00000000)
#define GPTM_TB_GPTMTnMR_TnMRSU_TIMEOUT     (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnMR_R_TnPLO_MASK       (0x00000800)
#define GPTM_TB_GPTMTnMR_R_TnPLO_BIT        (11)
#define GPTM_TB_GPTMTnMR_R_TnPLO_LOW        (0x00000000)
#define GPTM_TB_GPTMTnMR_R_TnPLO_HIGH       (0x00000800)

#define GPTM_TB_GPTMTnMR_TnPLO_MASK         (0x00000001)
#define GPTM_TB_GPTMTnMR_TnPLO_LOW          (0x00000000)
#define GPTM_TB_GPTMTnMR_TnPLO_HIGH         (0x00000001)
//--------

//--------
#define GPWTM_GPTMTBMR_R_TBMR_MASK          (0x00000003)
#define GPWTM_GPTMTBMR_R_TBMR_BIT           (0)
#define GPWTM_GPTMTBMR_R_TBMR_ONESHOT       (0x00000001)
#define GPWTM_GPTMTBMR_R_TBMR_PERIOD        (0x00000002)
#define GPWTM_GPTMTBMR_R_TBMR_CAPTURE       (0x00000003)

#define GPWTM_GPTMTBMR_TBMR_MASK            (0x00000003)
#define GPWTM_GPTMTBMR_TBMR_ONESHOT         (0x00000001)
#define GPWTM_GPTMTBMR_TBMR_PERIOD          (0x00000002)
#define GPWTM_GPTMTBMR_TBMR_CAPTURE         (0x00000003)
//--------

//--------
#define GPWTM_GPTMTBMR_R_TBCMR_MASK         (0x00000004)
#define GPWTM_GPTMTBMR_R_TBCMR_BIT          (2)
#define GPWTM_GPTMTBMR_R_TBCMR_EDGECOUNT    (0x00000000)
#define GPWTM_GPTMTBMR_R_TBCMR_EDGETIME     (0x00000004)

#define GPWTM_GPTMTBMR_TBCMR_MASK           (0x00000001)
#define GPWTM_GPTMTBMR_TBCMR_EDGECOUNT      (0x00000000)
#define GPWTM_GPTMTBMR_TBCMR_EDGETIME       (0x00000001)
//--------

//--------
#define GPWTM_GPTMTBMR_R_TBAMS_MASK         (0x00000008)
#define GPWTM_GPTMTBMR_R_TBAMS_BIT          (3)
#define GPWTM_GPTMTBMR_R_TBAMS_CAPCOMP      (0x00000000)
#define GPWTM_GPTMTBMR_R_TBAMS_PWM          (0x00000008)

#define GPWTM_GPTMTBMR_TBAMS_MASK           (0x00000001)
#define GPWTM_GPTMTBMR_TBAMS_CAPCOMP        (0x00000000)
#define GPWTM_GPTMTBMR_TBAMS_PWM            (0x00000001)
//--------

//--------
#define GPWTM_GPTMTBMR_R_TBCDIR_MASK        (0x00000010)
#define GPWTM_GPTMTBMR_R_TBCDIR_BIT         (4)
#define GPWTM_GPTMTBMR_R_TBCDIR_DOWN        (0x00000000)
#define GPWTM_GPTMTBMR_R_TBCDIR_UP          (0x00000010)

#define GPWTM_GPTMTBMR_TBCDIR_MASK          (0x00000001)
#define GPWTM_GPTMTBMR_TBCDIR_DOWN          (0x00000000)
#define GPWTM_GPTMTBMR_TBCDIR_UP            (0x00000001)
//--------

//--------
#define GPWTM_GPTMTBMR_R_TBMIE_MASK         (0x00000020)
#define GPWTM_GPTMTBMR_R_TBMIE_BIT          (5)
#define GPWTM_GPTMTBMR_R_TBMIE_DIS          (0x00000000)
#define GPWTM_GPTMTBMR_R_TBMIE_EN           (0x00000020)

#define GPWTM_GPTMTBMR_TBMIE_MASK           (0x00000001)
#define GPWTM_GPTMTBMR_TBMIE_DIS            (0x00000000)
#define GPWTM_GPTMTBMR_TBMIE_EN             (0x00000001)
//--------

//--------
#define GPWTM_GPTMTBMR_R_TBWOT_MASK         (0x00000040)
#define GPWTM_GPTMTBMR_R_TBWOT_BIT          (6)
#define GPWTM_GPTMTBMR_R_TBWOT_INSTBNT      (0x00000000)
#define GPWTM_GPTMTBMR_R_TBWOT_TRIGGER      (0x00000040)

#define GPWTM_GPTMTBMR_TBWOT_MASK           (0x00000001)
#define GPWTM_GPTMTBMR_TBWOT_INSTBNT        (0x00000000)
#define GPWTM_GPTMTBMR_TBWOT_TRIGGER        (0x00000001)
//--------

//--------
#define GPWTM_GPTMTBMR_R_TBSNAPS_MASK       (0x00000080)
#define GPWTM_GPTMTBMR_R_TBSNAPS_BIT        (7)
#define GPWTM_GPTMTBMR_R_TBSNAPS_DIS        (0x00000000)
#define GPWTM_GPTMTBMR_R_TBSNAPS_EN         (0x00000080)

#define GPWTM_GPTMTBMR_TBSNAPS_MASK         (0x00000001)
#define GPWTM_GPTMTBMR_TBSNAPS_DIS          (0x00000000)
#define GPWTM_GPTMTBMR_TBSNAPS_EN           (0x00000001)
//--------

//--------
#define GPWTM_GPTMTBMR_R_TBILD_MASK         (0x00000100)
#define GPWTM_GPTMTBMR_R_TBILD_BIT          (8)
#define GPWTM_GPTMTBMR_R_TBILD_NEXT         (0x00000000)
#define GPWTM_GPTMTBMR_R_TBILD_TIMEOUT      (0x00000100)

#define GPWTM_GPTMTBMR_TBILD_MASK           (0x00000001)
#define GPWTM_GPTMTBMR_TBILD_NEXT           (0x00000000)
#define GPWTM_GPTMTBMR_TBILD_TIMEOUT        (0x00000001)
//--------

//--------
#define GPWTM_GPTMTBMR_R_TBPWMIE_MASK       (0x00000200)
#define GPWTM_GPTMTBMR_R_TBPWMIE_BIT        (9)
#define GPWTM_GPTMTBMR_R_TBPWMIE_DIS        (0x00000000)
#define GPWTM_GPTMTBMR_R_TBPWMIE_EN         (0x00000200)

#define GPWTM_GPTMTBMR_TBPWMIE_MASK         (0x00000001)
#define GPWTM_GPTMTBMR_TBPWMIE_DIS          (0x00000000)
#define GPWTM_GPTMTBMR_TBPWMIE_EN           (0x00000001)
//--------

//--------
#define GPWTM_GPTMTBMR_R_TBMRSU_MASK        (0x00000400)
#define GPWTM_GPTMTBMR_R_TBMRSU_BIT         (10)
#define GPWTM_GPTMTBMR_R_TBMRSU_NEXT        (0x00000000)
#define GPWTM_GPTMTBMR_R_TBMRSU_TIMEOUT     (0x00000400)

#define GPWTM_GPTMTBMR_TBMRSU_MASK          (0x00000001)
#define GPWTM_GPTMTBMR_TBMRSU_NEXT          (0x00000000)
#define GPWTM_GPTMTBMR_TBMRSU_TIMEOUT       (0x00000001)
//--------

//--------
#define GPWTM_GPTMTBMR_R_TBPLO_MASK         (0x00000800)
#define GPWTM_GPTMTBMR_R_TBPLO_BIT          (11)
#define GPWTM_GPTMTBMR_R_TBPLO_LOW          (0x00000000)
#define GPWTM_GPTMTBMR_R_TBPLO_HIGH         (0x00000800)

#define GPWTM_GPTMTBMR_TBPLO_MASK           (0x00000001)
#define GPWTM_GPTMTBMR_TBPLO_LOW            (0x00000000)
#define GPWTM_GPTMTBMR_TBPLO_HIGH           (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnMR_R_TnMR_MASK       (0x00000003)
#define GPWTM_TB_GPTMTnMR_R_TnMR_BIT        (0)
#define GPWTM_TB_GPTMTnMR_R_TnMR_ONESHOT    (0x00000001)
#define GPWTM_TB_GPTMTnMR_R_TnMR_PERIOD     (0x00000002)
#define GPWTM_TB_GPTMTnMR_R_TnMR_CAPTURE    (0x00000003)

#define GPWTM_TB_GPTMTnMR_TnMR_MASK         (0x00000003)
#define GPWTM_TB_GPTMTnMR_TnMR_ONESHOT      (0x00000001)
#define GPWTM_TB_GPTMTnMR_TnMR_PERIOD       (0x00000002)
#define GPWTM_TB_GPTMTnMR_TnMR_CAPTURE      (0x00000003)
//--------

//--------
#define GPWTM_TB_GPTMTnMR_R_TnCMR_MASK      (0x00000004)
#define GPWTM_TB_GPTMTnMR_R_TnCMR_BIT       (2)
#define GPWTM_TB_GPTMTnMR_R_TnCMR_EDGECOUNT (0x00000000)
#define GPWTM_TB_GPTMTnMR_R_TnCMR_EDGETIME  (0x00000004)

#define GPWTM_TB_GPTMTnMR_TnCMR_MASK        (0x00000001)
#define GPWTM_TB_GPTMTnMR_TnCMR_EDGECOUNT   (0x00000000)
#define GPWTM_TB_GPTMTnMR_TnCMR_EDGETIME    (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnMR_R_TnAMS_MASK      (0x00000008)
#define GPWTM_TB_GPTMTnMR_R_TnAMS_BIT       (3)
#define GPWTM_TB_GPTMTnMR_R_TnAMS_CAPCOMP   (0x00000000)
#define GPWTM_TB_GPTMTnMR_R_TnAMS_PWM       (0x00000008)

#define GPWTM_TB_GPTMTnMR_TnAMS_MASK        (0x00000001)
#define GPWTM_TB_GPTMTnMR_TnAMS_CAPCOMP     (0x00000000)
#define GPWTM_TB_GPTMTnMR_TnAMS_PWM         (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnMR_R_TnCDIR_MASK     (0x00000010)
#define GPWTM_TB_GPTMTnMR_R_TnCDIR_BIT      (4)
#define GPWTM_TB_GPTMTnMR_R_TnCDIR_DOWN     (0x00000000)
#define GPWTM_TB_GPTMTnMR_R_TnCDIR_UP       (0x00000010)

#define GPWTM_TB_GPTMTnMR_TnCDIR_MASK       (0x00000001)
#define GPWTM_TB_GPTMTnMR_TnCDIR_DOWN       (0x00000000)
#define GPWTM_TB_GPTMTnMR_TnCDIR_UP         (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnMR_R_TnMIE_MASK      (0x00000020)
#define GPWTM_TB_GPTMTnMR_R_TnMIE_BIT       (5)
#define GPWTM_TB_GPTMTnMR_R_TnMIE_DIS       (0x00000000)
#define GPWTM_TB_GPTMTnMR_R_TnMIE_EN        (0x00000020)

#define GPWTM_TB_GPTMTnMR_TnMIE_MASK        (0x00000001)
#define GPWTM_TB_GPTMTnMR_TnMIE_DIS         (0x00000000)
#define GPWTM_TB_GPTMTnMR_TnMIE_EN          (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnMR_R_TnWOT_MASK      (0x00000040)
#define GPWTM_TB_GPTMTnMR_R_TnWOT_BIT       (6)
#define GPWTM_TB_GPTMTnMR_R_TnWOT_INSTBNT   (0x00000000)
#define GPWTM_TB_GPTMTnMR_R_TnWOT_TRIGGER   (0x00000040)

#define GPWTM_TB_GPTMTnMR_TnWOT_MASK        (0x00000001)
#define GPWTM_TB_GPTMTnMR_TnWOT_INSTBNT     (0x00000000)
#define GPWTM_TB_GPTMTnMR_TnWOT_TRIGGER     (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnMR_R_TnSNAPS_MASK    (0x00000080)
#define GPWTM_TB_GPTMTnMR_R_TnSNAPS_BIT     (7)
#define GPWTM_TB_GPTMTnMR_R_TnSNAPS_DIS     (0x00000000)
#define GPWTM_TB_GPTMTnMR_R_TnSNAPS_EN      (0x00000080)

#define GPWTM_TB_GPTMTnMR_TnSNAPS_MASK      (0x00000001)
#define GPWTM_TB_GPTMTnMR_TnSNAPS_DIS       (0x00000000)
#define GPWTM_TB_GPTMTnMR_TnSNAPS_EN        (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnMR_R_TnILD_MASK      (0x00000100)
#define GPWTM_TB_GPTMTnMR_R_TnILD_BIT       (8)
#define GPWTM_TB_GPTMTnMR_R_TnILD_NEXT      (0x00000000)
#define GPWTM_TB_GPTMTnMR_R_TnILD_TIMEOUT   (0x00000100)

#define GPWTM_TB_GPTMTnMR_TnILD_MASK        (0x00000001)
#define GPWTM_TB_GPTMTnMR_TnILD_NEXT        (0x00000000)
#define GPWTM_TB_GPTMTnMR_TnILD_TIMEOUT     (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnMR_R_TnPWMIE_MASK    (0x00000200)
#define GPWTM_TB_GPTMTnMR_R_TnPWMIE_BIT     (9)
#define GPWTM_TB_GPTMTnMR_R_TnPWMIE_DIS     (0x00000000)
#define GPWTM_TB_GPTMTnMR_R_TnPWMIE_EN      (0x00000200)

#define GPWTM_TB_GPTMTnMR_TnPWMIE_MASK      (0x00000001)
#define GPWTM_TB_GPTMTnMR_TnPWMIE_DIS       (0x00000000)
#define GPWTM_TB_GPTMTnMR_TnPWMIE_EN        (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnMR_R_TnMRSU_MASK     (0x00000400)
#define GPWTM_TB_GPTMTnMR_R_TnMRSU_BIT      (10)
#define GPWTM_TB_GPTMTnMR_R_TnMRSU_NEXT     (0x00000000)
#define GPWTM_TB_GPTMTnMR_R_TnMRSU_TIMEOUT  (0x00000400)

#define GPWTM_TB_GPTMTnMR_TnMRSU_MASK       (0x00000001)
#define GPWTM_TB_GPTMTnMR_TnMRSU_NEXT       (0x00000000)
#define GPWTM_TB_GPTMTnMR_TnMRSU_TIMEOUT    (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnMR_R_TnPLO_MASK      (0x00000800)
#define GPWTM_TB_GPTMTnMR_R_TnPLO_BIT       (11)
#define GPWTM_TB_GPTMTnMR_R_TnPLO_LOW       (0x00000000)
#define GPWTM_TB_GPTMTnMR_R_TnPLO_HIGH      (0x00000800)

#define GPWTM_TB_GPTMTnMR_TnPLO_MASK        (0x00000001)
#define GPWTM_TB_GPTMTnMR_TnPLO_LOW         (0x00000000)
#define GPWTM_TB_GPTMTnMR_TnPLO_HIGH        (0x00000001)
//--------

/* GPTM0 BITBANDING GPTMTBMR*/
#define GPTM0_BITBANDING_GPTMTBMR_TBCMR         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBCMR_BIT*4))))
#define GPTM0_BITBANDING_GPTMTBMR_TBAMS         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBAMS_BIT*4))))
#define GPTM0_BITBANDING_GPTMTBMR_TBCDIR        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBCDIR_BIT*4))))
#define GPTM0_BITBANDING_GPTMTBMR_TBMIE         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBMIE_BIT*4))))
#define GPTM0_BITBANDING_GPTMTBMR_TBWOT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBWOT_BIT*4))))
#define GPTM0_BITBANDING_GPTMTBMR_TBSNAPS       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBSNAPS_BIT*4))))
#define GPTM0_BITBANDING_GPTMTBMR_TBILD         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBILD_BIT*4))))
#define GPTM0_BITBANDING_GPTMTBMR_TBPWMIE       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBPWMIE_BIT*4))))
#define GPTM0_BITBANDING_GPTMTBMR_TBMRSU        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBMRSU_BIT*4))))
#define GPTM0_BITBANDING_GPTMTBMR_TBPLO         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBPLO_BIT*4))))

#define GPTM0_BITBANDING_TB_GPTMTnMR_TnCMR      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnMR_TnAMS      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnMR_TnCDIR     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnMR_TnMIE      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnMR_TnWOT      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnMR_TnSNAPS    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnMR_TnILD      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnILD_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnMR_TnPWMIE    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnMR_TnMRSU     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnMR_TnPLO      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM1 BITBANDING GPTMTBMR*/
#define GPTM1_BITBANDING_GPTMTBMR_TBCMR         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBCMR_BIT*4))))
#define GPTM1_BITBANDING_GPTMTBMR_TBAMS         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBAMS_BIT*4))))
#define GPTM1_BITBANDING_GPTMTBMR_TBCDIR        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBCDIR_BIT*4))))
#define GPTM1_BITBANDING_GPTMTBMR_TBMIE         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBMIE_BIT*4))))
#define GPTM1_BITBANDING_GPTMTBMR_TBWOT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBWOT_BIT*4))))
#define GPTM1_BITBANDING_GPTMTBMR_TBSNAPS       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBSNAPS_BIT*4))))
#define GPTM1_BITBANDING_GPTMTBMR_TBILD         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBILD_BIT*4))))
#define GPTM1_BITBANDING_GPTMTBMR_TBPWMIE       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBPWMIE_BIT*4))))
#define GPTM1_BITBANDING_GPTMTBMR_TBMRSU        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBMRSU_BIT*4))))
#define GPTM1_BITBANDING_GPTMTBMR_TBPLO         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBPLO_BIT*4))))

#define GPTM1_BITBANDING_TB_GPTMTnMR_TnCMR      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnMR_TnAMS      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnMR_TnCDIR     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnMR_TnMIE      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnMR_TnWOT      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnMR_TnSNAPS    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnMR_TnILD      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnILD_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnMR_TnPWMIE    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnMR_TnMRSU     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnMR_TnPLO      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM2 BITBANDING GPTMTBMR*/
#define GPTM2_BITBANDING_GPTMTBMR_TBCMR         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBCMR_BIT*4))))
#define GPTM2_BITBANDING_GPTMTBMR_TBAMS         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBAMS_BIT*4))))
#define GPTM2_BITBANDING_GPTMTBMR_TBCDIR        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBCDIR_BIT*4))))
#define GPTM2_BITBANDING_GPTMTBMR_TBMIE         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBMIE_BIT*4))))
#define GPTM2_BITBANDING_GPTMTBMR_TBWOT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBWOT_BIT*4))))
#define GPTM2_BITBANDING_GPTMTBMR_TBSNAPS       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBSNAPS_BIT*4))))
#define GPTM2_BITBANDING_GPTMTBMR_TBILD         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBILD_BIT*4))))
#define GPTM2_BITBANDING_GPTMTBMR_TBPWMIE       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBPWMIE_BIT*4))))
#define GPTM2_BITBANDING_GPTMTBMR_TBMRSU        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBMRSU_BIT*4))))
#define GPTM2_BITBANDING_GPTMTBMR_TBPLO         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBPLO_BIT*4))))

#define GPTM2_BITBANDING_TB_GPTMTnMR_TnCMR      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnMR_TnAMS      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnMR_TnCDIR     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnMR_TnMIE      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnMR_TnWOT      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnMR_TnSNAPS    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnMR_TnILD      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnILD_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnMR_TnPWMIE    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnMR_TnMRSU     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnMR_TnPLO      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM3 BITBANDING GPTMTBMR*/
#define GPTM3_BITBANDING_GPTMTBMR_TBCMR         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBCMR_BIT*4))))
#define GPTM3_BITBANDING_GPTMTBMR_TBAMS         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBAMS_BIT*4))))
#define GPTM3_BITBANDING_GPTMTBMR_TBCDIR        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBCDIR_BIT*4))))
#define GPTM3_BITBANDING_GPTMTBMR_TBMIE         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBMIE_BIT*4))))
#define GPTM3_BITBANDING_GPTMTBMR_TBWOT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBWOT_BIT*4))))
#define GPTM3_BITBANDING_GPTMTBMR_TBSNAPS       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBSNAPS_BIT*4))))
#define GPTM3_BITBANDING_GPTMTBMR_TBILD         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBILD_BIT*4))))
#define GPTM3_BITBANDING_GPTMTBMR_TBPWMIE       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBPWMIE_BIT*4))))
#define GPTM3_BITBANDING_GPTMTBMR_TBMRSU        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBMRSU_BIT*4))))
#define GPTM3_BITBANDING_GPTMTBMR_TBPLO         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBPLO_BIT*4))))

#define GPTM3_BITBANDING_TB_GPTMTnMR_TnCMR      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnMR_TnAMS      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnMR_TnCDIR     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnMR_TnMIE      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnMR_TnWOT      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnMR_TnSNAPS    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnMR_TnILD      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnILD_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnMR_TnPWMIE    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnMR_TnMRSU     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnMR_TnPLO      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM4 BITBANDING GPTMTBMR*/
#define GPTM4_BITBANDING_GPTMTBMR_TBCMR         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBCMR_BIT*4))))
#define GPTM4_BITBANDING_GPTMTBMR_TBAMS         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBAMS_BIT*4))))
#define GPTM4_BITBANDING_GPTMTBMR_TBCDIR        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBCDIR_BIT*4))))
#define GPTM4_BITBANDING_GPTMTBMR_TBMIE         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBMIE_BIT*4))))
#define GPTM4_BITBANDING_GPTMTBMR_TBWOT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBWOT_BIT*4))))
#define GPTM4_BITBANDING_GPTMTBMR_TBSNAPS       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBSNAPS_BIT*4))))
#define GPTM4_BITBANDING_GPTMTBMR_TBILD         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBILD_BIT*4))))
#define GPTM4_BITBANDING_GPTMTBMR_TBPWMIE       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBPWMIE_BIT*4))))
#define GPTM4_BITBANDING_GPTMTBMR_TBMRSU        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBMRSU_BIT*4))))
#define GPTM4_BITBANDING_GPTMTBMR_TBPLO         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBPLO_BIT*4))))

#define GPTM4_BITBANDING_TB_GPTMTnMR_TnCMR      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnMR_TnAMS      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnMR_TnCDIR     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnMR_TnMIE      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnMR_TnWOT      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnMR_TnSNAPS    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnMR_TnILD      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnILD_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnMR_TnPWMIE    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnMR_TnMRSU     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnMR_TnPLO      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM5 BITBANDING GPTMTBMR*/
#define GPTM5_BITBANDING_GPTMTBMR_TBCMR         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBCMR_BIT*4))))
#define GPTM5_BITBANDING_GPTMTBMR_TBAMS         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBAMS_BIT*4))))
#define GPTM5_BITBANDING_GPTMTBMR_TBCDIR        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBCDIR_BIT*4))))
#define GPTM5_BITBANDING_GPTMTBMR_TBMIE         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBMIE_BIT*4))))
#define GPTM5_BITBANDING_GPTMTBMR_TBWOT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBWOT_BIT*4))))
#define GPTM5_BITBANDING_GPTMTBMR_TBSNAPS       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBSNAPS_BIT*4))))
#define GPTM5_BITBANDING_GPTMTBMR_TBILD         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBILD_BIT*4))))
#define GPTM5_BITBANDING_GPTMTBMR_TBPWMIE       (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBPWMIE_BIT*4))))
#define GPTM5_BITBANDING_GPTMTBMR_TBMRSU        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBMRSU_BIT*4))))
#define GPTM5_BITBANDING_GPTMTBMR_TBPLO         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBMR_OFFSET)*32)+(GPTM_GPTMTBMR_R_TBPLO_BIT*4))))

#define GPTM5_BITBANDING_TB_GPTMTnMR_TnCMR      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnMR_TnAMS      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnMR_TnCDIR     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnMR_TnMIE      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnMR_TnWOT      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnMR_TnSNAPS    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnMR_TnILD      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnILD_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnMR_TnPWMIE    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnMR_TnMRSU     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnMR_TnPLO      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnMR_OFFSET)*32)+(GPTM_TB_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM0 BITBANDING GPTMTBMR*/
#define GPWTM0_BITBANDING_GPTMTBMR_TBCMR        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBCMR_BIT*4))))
#define GPWTM0_BITBANDING_GPTMTBMR_TBAMS        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBAMS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMTBMR_TBCDIR       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBCDIR_BIT*4))))
#define GPWTM0_BITBANDING_GPTMTBMR_TBMIE        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBMIE_BIT*4))))
#define GPWTM0_BITBANDING_GPTMTBMR_TBWOT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBWOT_BIT*4))))
#define GPWTM0_BITBANDING_GPTMTBMR_TBSNAPS      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBSNAPS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMTBMR_TBILD        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBILD_BIT*4))))
#define GPWTM0_BITBANDING_GPTMTBMR_TBPWMIE      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBPWMIE_BIT*4))))
#define GPWTM0_BITBANDING_GPTMTBMR_TBMRSU       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBMRSU_BIT*4))))
#define GPWTM0_BITBANDING_GPTMTBMR_TBPLO        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBPLO_BIT*4))))

#define GPWTM0_BITBANDING_TB_GPTMTnMR_TnCMR     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnMR_TnAMS     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnMR_TnCDIR    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnMR_TnMIE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnMR_TnWOT     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnMR_TnSNAPS   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnMR_TnILD     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnILD_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnMR_TnPWMIE   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnMR_TnMRSU    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnMR_TnPLO     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM1 BITBANDING GPTMTBMR*/
#define GPWTM1_BITBANDING_GPTMTBMR_TBCMR        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBCMR_BIT*4))))
#define GPWTM1_BITBANDING_GPTMTBMR_TBAMS        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBAMS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMTBMR_TBCDIR       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBCDIR_BIT*4))))
#define GPWTM1_BITBANDING_GPTMTBMR_TBMIE        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBMIE_BIT*4))))
#define GPWTM1_BITBANDING_GPTMTBMR_TBWOT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBWOT_BIT*4))))
#define GPWTM1_BITBANDING_GPTMTBMR_TBSNAPS      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBSNAPS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMTBMR_TBILD        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBILD_BIT*4))))
#define GPWTM1_BITBANDING_GPTMTBMR_TBPWMIE      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBPWMIE_BIT*4))))
#define GPWTM1_BITBANDING_GPTMTBMR_TBMRSU       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBMRSU_BIT*4))))
#define GPWTM1_BITBANDING_GPTMTBMR_TBPLO        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBPLO_BIT*4))))

#define GPWTM1_BITBANDING_TB_GPTMTnMR_TnCMR     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnMR_TnAMS     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnMR_TnCDIR    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnMR_TnMIE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnMR_TnWOT     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnMR_TnSNAPS   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnMR_TnILD     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnILD_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnMR_TnPWMIE   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnMR_TnMRSU    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnMR_TnPLO     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM2 BITBANDING GPTMTBMR*/
#define GPWTM2_BITBANDING_GPTMTBMR_TBCMR        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBCMR_BIT*4))))
#define GPWTM2_BITBANDING_GPTMTBMR_TBAMS        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBAMS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMTBMR_TBCDIR       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBCDIR_BIT*4))))
#define GPWTM2_BITBANDING_GPTMTBMR_TBMIE        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBMIE_BIT*4))))
#define GPWTM2_BITBANDING_GPTMTBMR_TBWOT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBWOT_BIT*4))))
#define GPWTM2_BITBANDING_GPTMTBMR_TBSNAPS      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBSNAPS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMTBMR_TBILD        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBILD_BIT*4))))
#define GPWTM2_BITBANDING_GPTMTBMR_TBPWMIE      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBPWMIE_BIT*4))))
#define GPWTM2_BITBANDING_GPTMTBMR_TBMRSU       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBMRSU_BIT*4))))
#define GPWTM2_BITBANDING_GPTMTBMR_TBPLO        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBPLO_BIT*4))))

#define GPWTM2_BITBANDING_TB_GPTMTnMR_TnCMR     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnMR_TnAMS     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnMR_TnCDIR    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnMR_TnMIE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnMR_TnWOT     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnMR_TnSNAPS   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnMR_TnILD     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnILD_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnMR_TnPWMIE   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnMR_TnMRSU    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnMR_TnPLO     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM3 BITBANDING GPTMTBMR*/
#define GPWTM3_BITBANDING_GPTMTBMR_TBCMR        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBCMR_BIT*4))))
#define GPWTM3_BITBANDING_GPTMTBMR_TBAMS        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBAMS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMTBMR_TBCDIR       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBCDIR_BIT*4))))
#define GPWTM3_BITBANDING_GPTMTBMR_TBMIE        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBMIE_BIT*4))))
#define GPWTM3_BITBANDING_GPTMTBMR_TBWOT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBWOT_BIT*4))))
#define GPWTM3_BITBANDING_GPTMTBMR_TBSNAPS      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBSNAPS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMTBMR_TBILD        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBILD_BIT*4))))
#define GPWTM3_BITBANDING_GPTMTBMR_TBPWMIE      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBPWMIE_BIT*4))))
#define GPWTM3_BITBANDING_GPTMTBMR_TBMRSU       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBMRSU_BIT*4))))
#define GPWTM3_BITBANDING_GPTMTBMR_TBPLO        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBPLO_BIT*4))))

#define GPWTM3_BITBANDING_TB_GPTMTnMR_TnCMR     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnMR_TnAMS     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnMR_TnCDIR    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnMR_TnMIE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnMR_TnWOT     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnMR_TnSNAPS   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnMR_TnILD     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnILD_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnMR_TnPWMIE   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnMR_TnMRSU    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnMR_TnPLO     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM4 BITBANDING GPTMTBMR*/
#define GPWTM4_BITBANDING_GPTMTBMR_TBCMR        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBCMR_BIT*4))))
#define GPWTM4_BITBANDING_GPTMTBMR_TBAMS        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBAMS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMTBMR_TBCDIR       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBCDIR_BIT*4))))
#define GPWTM4_BITBANDING_GPTMTBMR_TBMIE        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBMIE_BIT*4))))
#define GPWTM4_BITBANDING_GPTMTBMR_TBWOT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBWOT_BIT*4))))
#define GPWTM4_BITBANDING_GPTMTBMR_TBSNAPS      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBSNAPS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMTBMR_TBILD        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBILD_BIT*4))))
#define GPWTM4_BITBANDING_GPTMTBMR_TBPWMIE      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBPWMIE_BIT*4))))
#define GPWTM4_BITBANDING_GPTMTBMR_TBMRSU       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBMRSU_BIT*4))))
#define GPWTM4_BITBANDING_GPTMTBMR_TBPLO        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBPLO_BIT*4))))

#define GPWTM4_BITBANDING_TB_GPTMTnMR_TnCMR     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnMR_TnAMS     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnMR_TnCDIR    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnMR_TnMIE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnMR_TnWOT     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnMR_TnSNAPS   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnMR_TnILD     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnILD_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnMR_TnPWMIE   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnMR_TnMRSU    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnMR_TnPLO     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnPLO_BIT*4))))

/* GPTM5 BITBANDING GPTMTBMR*/
#define GPWTM5_BITBANDING_GPTMTBMR_TBCMR        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBCMR_BIT*4))))
#define GPWTM5_BITBANDING_GPTMTBMR_TBAMS        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBAMS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMTBMR_TBCDIR       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBCDIR_BIT*4))))
#define GPWTM5_BITBANDING_GPTMTBMR_TBMIE        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBMIE_BIT*4))))
#define GPWTM5_BITBANDING_GPTMTBMR_TBWOT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBWOT_BIT*4))))
#define GPWTM5_BITBANDING_GPTMTBMR_TBSNAPS      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBSNAPS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMTBMR_TBILD        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBILD_BIT*4))))
#define GPWTM5_BITBANDING_GPTMTBMR_TBPWMIE      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBPWMIE_BIT*4))))
#define GPWTM5_BITBANDING_GPTMTBMR_TBMRSU       (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBMRSU_BIT*4))))
#define GPWTM5_BITBANDING_GPTMTBMR_TBPLO        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBMR_OFFSET)*32)+(GPWTM_GPTMTBMR_R_TBPLO_BIT*4))))

#define GPWTM5_BITBANDING_TB_GPTMTnMR_TnCMR     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnCMR_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnMR_TnAMS     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnAMS_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnMR_TnCDIR    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnCDIR_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnMR_TnMIE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnMIE_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnMR_TnWOT     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnWOT_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnMR_TnSNAPS   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnSNAPS_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnMR_TnILD     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnILD_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnMR_TnPWMIE   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnPWMIE_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnMR_TnMRSU    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnMRSU_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnMR_TnPLO     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnMR_OFFSET)*32)+(GPWTM_TB_GPTMTnMR_R_TnPLO_BIT*4))))


/******************************************************************************************
************************************ 4 GPTMCTL *********************************************
******************************************************************************************/

/* GPTM0 GPTMCTL*/
#define GPTM0_BITBANDING_GPTMCTL            (((BITBANDING_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMCTL_OFFSET)*32))))
#define GPTM0_GPTMCTL                       (((GPTMCTL_TypeDef*)(GPTM0_BASE + GPTM_GPTMCTL_OFFSET )))
#define GPTM0_GPTMCTL_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMCTL_OFFSET)))

#define GPTM0_BITBANDING_TA_GPTMTnCTL       (((BITBANDING_TA_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32))))
#define GPTM0_TA_GPTMTnCTL                  (((TA_GPTMCTL_TypeDef*)(GPTM0_BASE + GPTM_TA_GPTMTnCTL_OFFSET )))
#define GPTM0_TA_GPTMTnCTL_R                (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TA_GPTMTnCTL_OFFSET)))

#define GPTM0_BITBANDING_TB_GPTMTnCTL       (((BITBANDING_TB_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32))))
#define GPTM0_TB_GPTMTnCTL                  (((TB_GPTMCTL_TypeDef*)(GPTM0_BASE + GPTM_TB_GPTMTnCTL_OFFSET )))
#define GPTM0_TB_GPTMTnCTL_R                (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TB_GPTMTnCTL_OFFSET)))

#define GPTM0_BITBANDING_TW_GPTMTnCTL       (((BITBANDING_TW_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32))))
#define GPTM0_TW_GPTMTnCTL                  (((TW_GPTMCTL_TypeDef*)(GPTM0_BASE + GPTM_TW_GPTMTnCTL_OFFSET )))
#define GPTM0_TW_GPTMTnCTL_R                (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TW_GPTMTnCTL_OFFSET)))

/* GPTM1 GPTMCTL*/
#define GPTM1_BITBANDING_GPTMCTL            (((BITBANDING_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMCTL_OFFSET)*32))))
#define GPTM1_GPTMCTL                       (((GPTMCTL_TypeDef*)(GPTM1_BASE + GPTM_GPTMCTL_OFFSET )))
#define GPTM1_GPTMCTL_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMCTL_OFFSET)))

#define GPTM1_BITBANDING_TA_GPTMTnCTL       (((BITBANDING_TA_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32))))
#define GPTM1_TA_GPTMTnCTL                  (((TA_GPTMCTL_TypeDef*)(GPTM1_BASE + GPTM_TA_GPTMTnCTL_OFFSET )))
#define GPTM1_TA_GPTMTnCTL_R                (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TA_GPTMTnCTL_OFFSET)))

#define GPTM1_BITBANDING_TB_GPTMTnCTL       (((BITBANDING_TB_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32))))
#define GPTM1_TB_GPTMTnCTL                  (((TB_GPTMCTL_TypeDef*)(GPTM1_BASE + GPTM_TB_GPTMTnCTL_OFFSET )))
#define GPTM1_TB_GPTMTnCTL_R                (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TB_GPTMTnCTL_OFFSET)))

#define GPTM1_BITBANDING_TW_GPTMTnCTL       (((BITBANDING_TW_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32))))
#define GPTM1_TW_GPTMTnCTL                  (((TW_GPTMCTL_TypeDef*)(GPTM1_BASE + GPTM_TW_GPTMTnCTL_OFFSET )))
#define GPTM1_TW_GPTMTnCTL_R                (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TW_GPTMTnCTL_OFFSET)))

/* GPTM2 GPTMCTL*/
#define GPTM2_BITBANDING_GPTMCTL            (((BITBANDING_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMCTL_OFFSET)*32))))
#define GPTM2_GPTMCTL                       (((GPTMCTL_TypeDef*)(GPTM2_BASE + GPTM_GPTMCTL_OFFSET )))
#define GPTM2_GPTMCTL_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMCTL_OFFSET)))

#define GPTM2_BITBANDING_TA_GPTMTnCTL       (((BITBANDING_TA_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32))))
#define GPTM2_TA_GPTMTnCTL                  (((TA_GPTMCTL_TypeDef*)(GPTM2_BASE + GPTM_TA_GPTMTnCTL_OFFSET )))
#define GPTM2_TA_GPTMTnCTL_R                (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TA_GPTMTnCTL_OFFSET)))

#define GPTM2_BITBANDING_TB_GPTMTnCTL       (((BITBANDING_TB_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32))))
#define GPTM2_TB_GPTMTnCTL                  (((TB_GPTMCTL_TypeDef*)(GPTM2_BASE + GPTM_TB_GPTMTnCTL_OFFSET )))
#define GPTM2_TB_GPTMTnCTL_R                (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TB_GPTMTnCTL_OFFSET)))

#define GPTM2_BITBANDING_TW_GPTMTnCTL       (((BITBANDING_TW_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32))))
#define GPTM2_TW_GPTMTnCTL                  (((TW_GPTMCTL_TypeDef*)(GPTM2_BASE + GPTM_TW_GPTMTnCTL_OFFSET )))
#define GPTM2_TW_GPTMTnCTL_R                (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TW_GPTMTnCTL_OFFSET)))

/* GPTM3 GPTMCTL*/
#define GPTM3_BITBANDING_GPTMCTL            (((BITBANDING_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMCTL_OFFSET)*32))))
#define GPTM3_GPTMCTL                       (((GPTMCTL_TypeDef*)(GPTM3_BASE + GPTM_GPTMCTL_OFFSET )))
#define GPTM3_GPTMCTL_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMCTL_OFFSET)))

#define GPTM3_BITBANDING_TA_GPTMTnCTL       (((BITBANDING_TA_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32))))
#define GPTM3_TA_GPTMTnCTL                  (((TA_GPTMCTL_TypeDef*)(GPTM3_BASE + GPTM_TA_GPTMTnCTL_OFFSET )))
#define GPTM3_TA_GPTMTnCTL_R                (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TA_GPTMTnCTL_OFFSET)))

#define GPTM3_BITBANDING_TB_GPTMTnCTL       (((BITBANDING_TB_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32))))
#define GPTM3_TB_GPTMTnCTL                  (((TB_GPTMCTL_TypeDef*)(GPTM3_BASE + GPTM_TB_GPTMTnCTL_OFFSET )))
#define GPTM3_TB_GPTMTnCTL_R                (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TB_GPTMTnCTL_OFFSET)))

#define GPTM3_BITBANDING_TW_GPTMTnCTL       (((BITBANDING_TW_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32))))
#define GPTM3_TW_GPTMTnCTL                  (((TW_GPTMCTL_TypeDef*)(GPTM3_BASE + GPTM_TW_GPTMTnCTL_OFFSET )))
#define GPTM3_TW_GPTMTnCTL_R                (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TW_GPTMTnCTL_OFFSET)))

/* GPTM4 GPTMCTL*/
#define GPTM4_BITBANDING_GPTMCTL            (((BITBANDING_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMCTL_OFFSET)*32))))
#define GPTM4_GPTMCTL                       (((GPTMCTL_TypeDef*)(GPTM4_BASE + GPTM_GPTMCTL_OFFSET )))
#define GPTM4_GPTMCTL_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMCTL_OFFSET)))

#define GPTM4_BITBANDING_TA_GPTMTnCTL       (((BITBANDING_TA_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32))))
#define GPTM4_TA_GPTMTnCTL                  (((TA_GPTMCTL_TypeDef*)(GPTM4_BASE + GPTM_TA_GPTMTnCTL_OFFSET )))
#define GPTM4_TA_GPTMTnCTL_R                (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TA_GPTMTnCTL_OFFSET)))

#define GPTM4_BITBANDING_TB_GPTMTnCTL       (((BITBANDING_TB_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32))))
#define GPTM4_TB_GPTMTnCTL                  (((TB_GPTMCTL_TypeDef*)(GPTM4_BASE + GPTM_TB_GPTMTnCTL_OFFSET )))
#define GPTM4_TB_GPTMTnCTL_R                (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TB_GPTMTnCTL_OFFSET)))

#define GPTM4_BITBANDING_TW_GPTMTnCTL       (((BITBANDING_TW_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32))))
#define GPTM4_TW_GPTMTnCTL                  (((TW_GPTMCTL_TypeDef*)(GPTM4_BASE + GPTM_TW_GPTMTnCTL_OFFSET )))
#define GPTM4_TW_GPTMTnCTL_R                (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TW_GPTMTnCTL_OFFSET)))

/* GPTM5 GPTMCTL*/
#define GPTM5_BITBANDING_GPTMCTL            (((BITBANDING_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMCTL_OFFSET)*32))))
#define GPTM5_GPTMCTL                       (((GPTMCTL_TypeDef*)(GPTM5_BASE + GPTM_GPTMCTL_OFFSET )))
#define GPTM5_GPTMCTL_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMCTL_OFFSET)))

#define GPTM5_BITBANDING_TA_GPTMTnCTL       (((BITBANDING_TA_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32))))
#define GPTM5_TA_GPTMTnCTL                  (((TA_GPTMCTL_TypeDef*)(GPTM5_BASE + GPTM_TA_GPTMTnCTL_OFFSET )))
#define GPTM5_TA_GPTMTnCTL_R                (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TA_GPTMTnCTL_OFFSET)))

#define GPTM5_BITBANDING_TB_GPTMTnCTL       (((BITBANDING_TB_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32))))
#define GPTM5_TB_GPTMTnCTL                  (((TB_GPTMCTL_TypeDef*)(GPTM5_BASE + GPTM_TB_GPTMTnCTL_OFFSET )))
#define GPTM5_TB_GPTMTnCTL_R                (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TB_GPTMTnCTL_OFFSET)))

#define GPTM5_BITBANDING_TW_GPTMTnCTL       (((BITBANDING_TW_GPTMCTL_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32))))
#define GPTM5_TW_GPTMTnCTL                  (((TW_GPTMCTL_TypeDef*)(GPTM5_BASE + GPTM_TW_GPTMTnCTL_OFFSET )))
#define GPTM5_TW_GPTMTnCTL_R                (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TW_GPTMTnCTL_OFFSET)))

/* GPWTM0 GPTMCTL*/
#define GPWTM0_BITBANDING_GPTMCTL           (((BITBANDING_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMCTL_OFFSET)*32))))
#define GPWTM0_GPTMCTL                      (((GPTMCTL_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMCTL_OFFSET )))
#define GPWTM0_GPTMCTL_R                    (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMCTL_OFFSET)))

#define GPWTM0_BITBANDING_TA_GPTMTnCTL      (((BITBANDING_TA_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32))))
#define GPWTM0_TA_GPTMTnCTL                 (((TA_GPTMCTL_TypeDef*)(GPWTM0_BASE + GPWTM_TA_GPTMTnCTL_OFFSET )))
#define GPWTM0_TA_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TA_GPTMTnCTL_OFFSET)))

#define GPWTM0_BITBANDING_TB_GPTMTnCTL      (((BITBANDING_TB_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32))))
#define GPWTM0_TB_GPTMTnCTL                 (((TB_GPTMCTL_TypeDef*)(GPWTM0_BASE + GPWTM_TB_GPTMTnCTL_OFFSET )))
#define GPWTM0_TB_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TB_GPTMTnCTL_OFFSET)))

#define GPWTM0_BITBANDING_TW_GPTMTnCTL      (((BITBANDING_TW_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32))))
#define GPWTM0_TW_GPTMTnCTL                 (((TW_GPTMCTL_TypeDef*)(GPWTM0_BASE + GPWTM_TW_GPTMTnCTL_OFFSET )))
#define GPWTM0_TW_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TW_GPTMTnCTL_OFFSET)))

/* GPWTM1 GPTMCTL*/
#define GPWTM1_BITBANDING_GPTMCTL           (((BITBANDING_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMCTL_OFFSET)*32))))
#define GPWTM1_GPTMCTL                      (((GPTMCTL_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMCTL_OFFSET )))
#define GPWTM1_GPTMCTL_R                    (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMCTL_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnCTL      (((BITBANDING_TA_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnCTL                 (((TA_GPTMCTL_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnCTL_OFFSET )))
#define GPWTM1_TA_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnCTL_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnCTL      (((BITBANDING_TB_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnCTL                 (((TB_GPTMCTL_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnCTL_OFFSET )))
#define GPWTM1_TB_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnCTL_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnCTL      (((BITBANDING_TW_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnCTL                 (((TW_GPTMCTL_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnCTL_OFFSET )))
#define GPWTM1_TW_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnCTL_OFFSET)))

/* GPWTM1 GPTMCTL*/
#define GPWTM1_BITBANDING_GPTMCTL           (((BITBANDING_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMCTL_OFFSET)*32))))
#define GPWTM1_GPTMCTL                      (((GPTMCTL_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMCTL_OFFSET )))
#define GPWTM1_GPTMCTL_R                    (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMCTL_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnCTL      (((BITBANDING_TA_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnCTL                 (((TA_GPTMCTL_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnCTL_OFFSET )))
#define GPWTM1_TA_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnCTL_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnCTL      (((BITBANDING_TB_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnCTL                 (((TB_GPTMCTL_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnCTL_OFFSET )))
#define GPWTM1_TB_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnCTL_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnCTL      (((BITBANDING_TW_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnCTL                 (((TW_GPTMCTL_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnCTL_OFFSET )))
#define GPWTM1_TW_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnCTL_OFFSET)))

/* GPWTM2 GPTMCTL*/
#define GPWTM2_BITBANDING_GPTMCTL           (((BITBANDING_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMCTL_OFFSET)*32))))
#define GPWTM2_GPTMCTL                      (((GPTMCTL_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMCTL_OFFSET )))
#define GPWTM2_GPTMCTL_R                    (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMCTL_OFFSET)))

#define GPWTM2_BITBANDING_TA_GPTMTnCTL      (((BITBANDING_TA_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32))))
#define GPWTM2_TA_GPTMTnCTL                 (((TA_GPTMCTL_TypeDef*)(GPWTM2_BASE + GPWTM_TA_GPTMTnCTL_OFFSET )))
#define GPWTM2_TA_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TA_GPTMTnCTL_OFFSET)))

#define GPWTM2_BITBANDING_TB_GPTMTnCTL      (((BITBANDING_TB_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32))))
#define GPWTM2_TB_GPTMTnCTL                 (((TB_GPTMCTL_TypeDef*)(GPWTM2_BASE + GPWTM_TB_GPTMTnCTL_OFFSET )))
#define GPWTM2_TB_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TB_GPTMTnCTL_OFFSET)))

#define GPWTM2_BITBANDING_TW_GPTMTnCTL      (((BITBANDING_TW_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32))))
#define GPWTM2_TW_GPTMTnCTL                 (((TW_GPTMCTL_TypeDef*)(GPWTM2_BASE + GPWTM_TW_GPTMTnCTL_OFFSET )))
#define GPWTM2_TW_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TW_GPTMTnCTL_OFFSET)))

/* GPWTM3 GPTMCTL*/
#define GPWTM3_BITBANDING_GPTMCTL           (((BITBANDING_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMCTL_OFFSET)*32))))
#define GPWTM3_GPTMCTL                      (((GPTMCTL_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMCTL_OFFSET )))
#define GPWTM3_GPTMCTL_R                    (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMCTL_OFFSET)))

#define GPWTM3_BITBANDING_TA_GPTMTnCTL      (((BITBANDING_TA_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32))))
#define GPWTM3_TA_GPTMTnCTL                 (((TA_GPTMCTL_TypeDef*)(GPWTM3_BASE + GPWTM_TA_GPTMTnCTL_OFFSET )))
#define GPWTM3_TA_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TA_GPTMTnCTL_OFFSET)))

#define GPWTM3_BITBANDING_TB_GPTMTnCTL      (((BITBANDING_TB_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32))))
#define GPWTM3_TB_GPTMTnCTL                 (((TB_GPTMCTL_TypeDef*)(GPWTM3_BASE + GPWTM_TB_GPTMTnCTL_OFFSET )))
#define GPWTM3_TB_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TB_GPTMTnCTL_OFFSET)))

#define GPWTM3_BITBANDING_TW_GPTMTnCTL      (((BITBANDING_TW_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32))))
#define GPWTM3_TW_GPTMTnCTL                 (((TW_GPTMCTL_TypeDef*)(GPWTM3_BASE + GPWTM_TW_GPTMTnCTL_OFFSET )))
#define GPWTM3_TW_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TW_GPTMTnCTL_OFFSET)))

/* GPWTM4 GPTMCTL*/
#define GPWTM4_BITBANDING_GPTMCTL           (((BITBANDING_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMCTL_OFFSET)*32))))
#define GPWTM4_GPTMCTL                      (((GPTMCTL_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMCTL_OFFSET )))
#define GPWTM4_GPTMCTL_R                    (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMCTL_OFFSET)))

#define GPWTM4_BITBANDING_TA_GPTMTnCTL      (((BITBANDING_TA_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32))))
#define GPWTM4_TA_GPTMTnCTL                 (((TA_GPTMCTL_TypeDef*)(GPWTM4_BASE + GPWTM_TA_GPTMTnCTL_OFFSET )))
#define GPWTM4_TA_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TA_GPTMTnCTL_OFFSET)))

#define GPWTM4_BITBANDING_TB_GPTMTnCTL      (((BITBANDING_TB_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32))))
#define GPWTM4_TB_GPTMTnCTL                 (((TB_GPTMCTL_TypeDef*)(GPWTM4_BASE + GPWTM_TB_GPTMTnCTL_OFFSET )))
#define GPWTM4_TB_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TB_GPTMTnCTL_OFFSET)))

#define GPWTM4_BITBANDING_TW_GPTMTnCTL      (((BITBANDING_TW_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32))))
#define GPWTM4_TW_GPTMTnCTL                 (((TW_GPTMCTL_TypeDef*)(GPWTM4_BASE + GPWTM_TW_GPTMTnCTL_OFFSET )))
#define GPWTM4_TW_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TW_GPTMTnCTL_OFFSET)))

/* GPWTM5 GPTMCTL*/
#define GPWTM5_BITBANDING_GPTMCTL           (((BITBANDING_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMCTL_OFFSET)*32))))
#define GPWTM5_GPTMCTL                      (((GPTMCTL_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMCTL_OFFSET )))
#define GPWTM5_GPTMCTL_R                    (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMCTL_OFFSET)))

#define GPWTM5_BITBANDING_TA_GPTMTnCTL      (((BITBANDING_TA_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32))))
#define GPWTM5_TA_GPTMTnCTL                 (((TA_GPTMCTL_TypeDef*)(GPWTM5_BASE + GPWTM_TA_GPTMTnCTL_OFFSET )))
#define GPWTM5_TA_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TA_GPTMTnCTL_OFFSET)))

#define GPWTM5_BITBANDING_TB_GPTMTnCTL      (((BITBANDING_TB_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32))))
#define GPWTM5_TB_GPTMTnCTL                 (((TB_GPTMCTL_TypeDef*)(GPWTM5_BASE + GPWTM_TB_GPTMTnCTL_OFFSET )))
#define GPWTM5_TB_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TB_GPTMTnCTL_OFFSET)))

#define GPWTM5_BITBANDING_TW_GPTMTnCTL      (((BITBANDING_TW_GPTMCTL_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32))))
#define GPWTM5_TW_GPTMTnCTL                 (((TW_GPTMCTL_TypeDef*)(GPWTM5_BASE + GPWTM_TW_GPTMTnCTL_OFFSET )))
#define GPWTM5_TW_GPTMTnCTL_R               (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TW_GPTMTnCTL_OFFSET)))


//--------
#define GPTM_GPTMCTL_R_TAEN_MASK            (0x00000001)
#define GPTM_GPTMCTL_R_TAEN_BIT             (0)
#define GPTM_GPTMCTL_R_TAEN_DIS             (0x00000000)
#define GPTM_GPTMCTL_R_TAEN_EN              (0x00000001)

#define GPTM_GPTMCTL_TAEN_MASK              (0x00000001)
#define GPTM_GPTMCTL_TAEN_DIS               (0x00000000)
#define GPTM_GPTMCTL_TAEN_EN                (0x00000001)
//--------

//--------
#define GPTM_GPTMCTL_R_TASTALL_MASK         (0x00000002)
#define GPTM_GPTMCTL_R_TASTALL_BIT          (1)
#define GPTM_GPTMCTL_R_TASTALL_CONTINUE     (0x00000000)
#define GPTM_GPTMCTL_R_TASTALL_FREEZE       (0x00000002)

#define GPTM_GPTMCTL_TASTALL_MASK           (0x00000001)
#define GPTM_GPTMCTL_TASTALL_CONTINUE       (0x00000000)
#define GPTM_GPTMCTL_TASTALL_FREEZE         (0x00000001)
//--------

//--------
#define GPTM_GPTMCTL_R_TAEVENT_MASK         (0x0000000C)
#define GPTM_GPTMCTL_R_TAEVENT_BIT          (2)
#define GPTM_GPTMCTL_R_TAEVENT_POS          (0x00000000)
#define GPTM_GPTMCTL_R_TAEVENT_NEG          (0x00000004)
#define GPTM_GPTMCTL_R_TAEVENT_BOTH         (0x0000000C)

#define GPTM_GPTMCTL_TAEVENT_MASK           (0x00000003)
#define GPTM_GPTMCTL_TAEVENT_NEG            (0x00000000)
#define GPTM_GPTMCTL_TAEVENT_POS            (0x00000001)
#define GPTM_GPTMCTL_TAEVENT_BOTH           (0x00000003)
//--------

//--------
#define GPTM_GPTMCTL_R_RTCEN_MASK           (0x00000010)
#define GPTM_GPTMCTL_R_RTCEN_BIT            (4)
#define GPTM_GPTMCTL_R_RTCEN_CONTINUE       (0x00000000)
#define GPTM_GPTMCTL_R_RTCEN_FREEZE         (0x00000010)

#define GPTM_GPTMCTL_RTCEN_MASK             (0x00000001)
#define GPTM_GPTMCTL_RTCEN_CONTINUE         (0x00000000)
#define GPTM_GPTMCTL_RTCEN_FREEZE           (0x00000001)
//--------

//--------
#define GPTM_GPTMCTL_R_TAOTE_MASK           (0x00000020)
#define GPTM_GPTMCTL_R_TAOTE_BIT            (5)
#define GPTM_GPTMCTL_R_TAOTE_DIS            (0x00000000)
#define GPTM_GPTMCTL_R_TAOTE_EN             (0x00000020)

#define GPTM_GPTMCTL_TAOTE_MASK             (0x00000001)
#define GPTM_GPTMCTL_TAOTE_DIS              (0x00000000)
#define GPTM_GPTMCTL_TAOTE_EN               (0x00000001)
//--------

//--------
#define GPTM_GPTMCTL_R_TAPWML_MASK          (0x00000040)
#define GPTM_GPTMCTL_R_TAPWML_BIT           (6)
#define GPTM_GPTMCTL_R_TAPWML_NA            (0x00000000)
#define GPTM_GPTMCTL_R_TAPWML_INV           (0x00000040)

#define GPTM_GPTMCTL_TAPWML_MASK            (0x00000001)
#define GPTM_GPTMCTL_TAPWML_NA              (0x00000000)
#define GPTM_GPTMCTL_TAPWML_INV             (0x00000001)
//--------

//--------
#define GPTM_GPTMCTL_R_TBEN_MASK            (0x00000100)
#define GPTM_GPTMCTL_R_TBEN_BIT             (8)
#define GPTM_GPTMCTL_R_TBEN_DIS             (0x00000000)
#define GPTM_GPTMCTL_R_TBEN_EN              (0x00000100)

#define GPTM_GPTMCTL_TBEN_MASK              (0x00000001)
#define GPTM_GPTMCTL_TBEN_DIS               (0x00000000)
#define GPTM_GPTMCTL_TBEN_EN                (0x00000001)
//--------

//--------
#define GPTM_GPTMCTL_R_TBSTALL_MASK         (0x00000200)
#define GPTM_GPTMCTL_R_TBSTALL_BIT          (9)
#define GPTM_GPTMCTL_R_TBSTALL_CONTINUE     (0x00000000)
#define GPTM_GPTMCTL_R_TBSTALL_FREEZE       (0x00000200)

#define GPTM_GPTMCTL_TBSTALL_MASK           (0x00000001)
#define GPTM_GPTMCTL_TBSTALL_CONTINUE       (0x00000000)
#define GPTM_GPTMCTL_TBSTALL_FREEZE         (0x00000001)
//--------

//--------
#define GPTM_GPTMCTL_R_TBEVENT_MASK         (0x00000C00)
#define GPTM_GPTMCTL_R_TBEVENT_BIT          (10)
#define GPTM_GPTMCTL_R_TBEVENT_POS          (0x00000000)
#define GPTM_GPTMCTL_R_TBEVENT_NEG          (0x00000400)
#define GPTM_GPTMCTL_R_TBEVENT_BOTH         (0x00000C00)

#define GPTM_GPTMCTL_TBEVENT_MASK           (0x00000003)
#define GPTM_GPTMCTL_TBEVENT_NEG            (0x00000000)
#define GPTM_GPTMCTL_TBEVENT_POS            (0x00000001)
#define GPTM_GPTMCTL_TBEVENT_BOTH           (0x00000003)
//--------

//--------
#define GPTM_GPTMCTL_R_TBOTE_MASK           (0x00002000)
#define GPTM_GPTMCTL_R_TBOTE_BIT            (13)
#define GPTM_GPTMCTL_R_TBOTE_DIS            (0x00000000)
#define GPTM_GPTMCTL_R_TBOTE_EN             (0x00002000)

#define GPTM_GPTMCTL_TBOTE_MASK             (0x00000001)
#define GPTM_GPTMCTL_TBOTE_DIS              (0x00000000)
#define GPTM_GPTMCTL_TBOTE_EN               (0x00000001)
//--------

//--------
#define GPTM_GPTMCTL_R_TBPWML_MASK          (0x00004000)
#define GPTM_GPTMCTL_R_TBPWML_BIT           (14)
#define GPTM_GPTMCTL_R_TBPWML_NA            (0x00000000)
#define GPTM_GPTMCTL_R_TBPWML_INV           (0x00004000)

#define GPTM_GPTMCTL_TBPWML_MASK            (0x00000001)
#define GPTM_GPTMCTL_TBPWML_NA              (0x00000000)
#define GPTM_GPTMCTL_TBPWML_INV             (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnCTL_R_TnEN_MASK       (0x00000001)
#define GPTM_TA_GPTMTnCTL_R_TnEN_BIT        (0)
#define GPTM_TA_GPTMTnCTL_R_TnEN_DIS        (0x00000000)
#define GPTM_TA_GPTMTnCTL_R_TnEN_EN         (0x00000001)

#define GPTM_TA_GPTMTnCTL_TnEN_MASK         (0x00000001)
#define GPTM_TA_GPTMTnCTL_TnEN_DIS          (0x00000000)
#define GPTM_TA_GPTMTnCTL_TnEN_EN           (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnCTL_R_TnSTALL_MASK    (0x00000002)
#define GPTM_TA_GPTMTnCTL_R_TnSTALL_BIT     (1)
#define GPTM_TA_GPTMTnCTL_R_TnSTALL_CONTINUE    (0x00000000)
#define GPTM_TA_GPTMTnCTL_R_TnSTALL_FREEZE  (0x00000002)

#define GPTM_TA_GPTMTnCTL_TnSTALL_MASK      (0x00000001)
#define GPTM_TA_GPTMTnCTL_TnSTALL_CONTINUE  (0x00000000)
#define GPTM_TA_GPTMTnCTL_TnSTALL_FREEZE    (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnCTL_R_TnEVENT_MASK    (0x0000000C)
#define GPTM_TA_GPTMTnCTL_R_TnEVENT_BIT     (2)
#define GPTM_TA_GPTMTnCTL_R_TnEVENT_POS     (0x00000000)
#define GPTM_TA_GPTMTnCTL_R_TnEVENT_NEG     (0x00000004)
#define GPTM_TA_GPTMTnCTL_R_TnEVENT_BOTH    (0x0000000C)

#define GPTM_TA_GPTMTnCTL_TnEVENT_MASK      (0x00000003)
#define GPTM_TA_GPTMTnCTL_TnEVENT_NEG       (0x00000000)
#define GPTM_TA_GPTMTnCTL_TnEVENT_POS       (0x00000001)
#define GPTM_TA_GPTMTnCTL_TnEVENT_BOTH      (0x00000003)
//--------

//--------
#define GPTM_TA_GPTMTnCTL_R_TnOTE_MASK      (0x00000020)
#define GPTM_TA_GPTMTnCTL_R_TnOTE_BIT       (5)
#define GPTM_TA_GPTMTnCTL_R_TnOTE_DIS       (0x00000000)
#define GPTM_TA_GPTMTnCTL_R_TnOTE_EN        (0x00000020)

#define GPTM_TA_GPTMTnCTL_TnOTE_MASK        (0x00000001)
#define GPTM_TA_GPTMTnCTL_TnOTE_DIS         (0x00000000)
#define GPTM_TA_GPTMTnCTL_TnOTE_EN          (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnCTL_R_TnPWML_MASK     (0x00000040)
#define GPTM_TA_GPTMTnCTL_R_TnPWML_BIT      (6)
#define GPTM_TA_GPTMTnCTL_R_TnPWML_NA       (0x00000000)
#define GPTM_TA_GPTMTnCTL_R_TnPWML_INV      (0x00000040)

#define GPTM_TA_GPTMTnCTL_TnPWML_MASK       (0x00000001)
#define GPTM_TA_GPTMTnCTL_TnPWML_NA         (0x00000000)
#define GPTM_TA_GPTMTnCTL_TnPWML_INV        (0x00000001)
//--------


//--------
#define GPTM_TB_GPTMTnCTL_R_TnEN_MASK            (0x00000100)
#define GPTM_TB_GPTMTnCTL_R_TnEN_BIT             (8)
#define GPTM_TB_GPTMTnCTL_R_TnEN_DIS             (0x00000000)
#define GPTM_TB_GPTMTnCTL_R_TnEN_EN              (0x00000100)

#define GPTM_TB_GPTMTnCTL_TnEN_MASK              (0x00000001)
#define GPTM_TB_GPTMTnCTL_TnEN_DIS               (0x00000000)
#define GPTM_TB_GPTMTnCTL_TnEN_EN                (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnCTL_R_TnSTALL_MASK         (0x00000200)
#define GPTM_TB_GPTMTnCTL_R_TnSTALL_BIT          (9)
#define GPTM_TB_GPTMTnCTL_R_TnSTALL_CONTINUE     (0x00000000)
#define GPTM_TB_GPTMTnCTL_R_TnSTALL_FREEZE       (0x00000200)

#define GPTM_TB_GPTMTnCTL_TnSTALL_MASK           (0x00000001)
#define GPTM_TB_GPTMTnCTL_TnSTALL_CONTINUE       (0x00000000)
#define GPTM_TB_GPTMTnCTL_TnSTALL_FREEZE         (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnCTL_R_TnEVENT_MASK         (0x00000C00)
#define GPTM_TB_GPTMTnCTL_R_TnEVENT_BIT          (10)
#define GPTM_TB_GPTMTnCTL_R_TnEVENT_POS          (0x00000000)
#define GPTM_TB_GPTMTnCTL_R_TnEVENT_NEG          (0x00000400)
#define GPTM_TB_GPTMTnCTL_R_TnEVENT_BOTH         (0x00000C00)

#define GPTM_TB_GPTMTnCTL_TnEVENT_MASK           (0x00000003)
#define GPTM_TB_GPTMTnCTL_TnEVENT_NEG            (0x00000000)
#define GPTM_TB_GPTMTnCTL_TnEVENT_POS            (0x00000001)
#define GPTM_TB_GPTMTnCTL_TnEVENT_BOTH           (0x00000003)
//--------

//--------
#define GPTM_TB_GPTMTnCTL_R_TnOTE_MASK           (0x00002000)
#define GPTM_TB_GPTMTnCTL_R_TnOTE_BIT            (13)
#define GPTM_TB_GPTMTnCTL_R_TnOTE_DIS            (0x00000000)
#define GPTM_TB_GPTMTnCTL_R_TnOTE_EN             (0x00002000)

#define GPTM_TB_GPTMTnCTL_TnOTE_MASK             (0x00000001)
#define GPTM_TB_GPTMTnCTL_TnOTE_DIS              (0x00000000)
#define GPTM_TB_GPTMTnCTL_TnOTE_EN               (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnCTL_R_TnPWML_MASK          (0x00004000)
#define GPTM_TB_GPTMTnCTL_R_TnPWML_BIT           (14)
#define GPTM_TB_GPTMTnCTL_R_TnPWML_NA            (0x00000000)
#define GPTM_TB_GPTMTnCTL_R_TnPWML_INV           (0x00004000)

#define GPTM_TB_GPTMTnCTL_TnPWML_MASK            (0x00000001)
#define GPTM_TB_GPTMTnCTL_TnPWML_NA              (0x00000000)
#define GPTM_TB_GPTMTnCTL_TnPWML_INV             (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnCTL_R_TnEN_MASK       (0x00000001)
#define GPTM_TW_GPTMTnCTL_R_TnEN_BIT        (0)
#define GPTM_TW_GPTMTnCTL_R_TnEN_DIS        (0x00000000)
#define GPTM_TW_GPTMTnCTL_R_TnEN_EN         (0x00000001)

#define GPTM_TW_GPTMTnCTL_TnEN_MASK         (0x00000001)
#define GPTM_TW_GPTMTnCTL_TnEN_DIS          (0x00000000)
#define GPTM_TW_GPTMTnCTL_TnEN_EN           (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnCTL_R_TnSTALL_MASK    (0x00000002)
#define GPTM_TW_GPTMTnCTL_R_TnSTALL_BIT     (1)
#define GPTM_TW_GPTMTnCTL_R_TnSTALL_CONTINUE    (0x00000000)
#define GPTM_TW_GPTMTnCTL_R_TnSTALL_FREEZE  (0x00000002)

#define GPTM_TW_GPTMTnCTL_TnSTALL_MASK      (0x00000001)
#define GPTM_TW_GPTMTnCTL_TnSTALL_CONTINUE  (0x00000000)
#define GPTM_TW_GPTMTnCTL_TnSTALL_FREEZE    (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnCTL_R_TnEVENT_MASK    (0x0000000C)
#define GPTM_TW_GPTMTnCTL_R_TnEVENT_BIT     (2)
#define GPTM_TW_GPTMTnCTL_R_TnEVENT_POS     (0x00000000)
#define GPTM_TW_GPTMTnCTL_R_TnEVENT_NEG     (0x00000004)
#define GPTM_TW_GPTMTnCTL_R_TnEVENT_BOTH    (0x0000000C)

#define GPTM_TW_GPTMTnCTL_TnEVENT_MASK      (0x00000003)
#define GPTM_TW_GPTMTnCTL_TnEVENT_NEG       (0x00000000)
#define GPTM_TW_GPTMTnCTL_TnEVENT_POS       (0x00000001)
#define GPTM_TW_GPTMTnCTL_TnEVENT_BOTH      (0x00000003)
//--------

//--------
#define GPTM_TW_GPTMTnCTL_R_RTCEN_MASK      (0x00000010)
#define GPTM_TW_GPTMTnCTL_R_RTCEN_BIT       (4)
#define GPTM_TW_GPTMTnCTL_R_RTCEN_DIS       (0x00000000)
#define GPTM_TW_GPTMTnCTL_R_RTCEN_EN        (0x00000010)

#define GPTM_TW_GPTMTnCTL_RTCEN_MASK        (0x00000001)
#define GPTM_TW_GPTMTnCTL_RTCEN_DIS         (0x00000000)
#define GPTM_TW_GPTMTnCTL_RTCEN_EN          (0x00000001)
//--------
//--------
#define GPTM_TW_GPTMTnCTL_R_TnOTE_MASK      (0x00000020)
#define GPTM_TW_GPTMTnCTL_R_TnOTE_BIT       (5)
#define GPTM_TW_GPTMTnCTL_R_TnOTE_DIS       (0x00000000)
#define GPTM_TW_GPTMTnCTL_R_TnOTE_EN        (0x00000020)

#define GPTM_TW_GPTMTnCTL_TnOTE_MASK        (0x00000001)
#define GPTM_TW_GPTMTnCTL_TnOTE_DIS         (0x00000000)
#define GPTM_TW_GPTMTnCTL_TnOTE_EN          (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnCTL_R_TnPWML_MASK     (0x00000040)
#define GPTM_TW_GPTMTnCTL_R_TnPWML_BIT      (6)
#define GPTM_TW_GPTMTnCTL_R_TnPWML_NA       (0x00000000)
#define GPTM_TW_GPTMTnCTL_R_TnPWML_INV      (0x00000040)

#define GPTM_TW_GPTMTnCTL_TnPWML_MASK       (0x00000001)
#define GPTM_TW_GPTMTnCTL_TnPWML_NA         (0x00000000)
#define GPTM_TW_GPTMTnCTL_TnPWML_INV        (0x00000001)
//--------


//--------
#define GPWTM_GPTMCTL_R_TAEN_MASK            (0x00000001)
#define GPWTM_GPTMCTL_R_TAEN_BIT             (0)
#define GPWTM_GPTMCTL_R_TAEN_DIS             (0x00000000)
#define GPWTM_GPTMCTL_R_TAEN_EN              (0x00000001)

#define GPWTM_GPTMCTL_TAEN_MASK              (0x00000001)
#define GPWTM_GPTMCTL_TAEN_DIS               (0x00000000)
#define GPWTM_GPTMCTL_TAEN_EN                (0x00000001)
//--------

//--------
#define GPWTM_GPTMCTL_R_TASTALL_MASK         (0x00000002)
#define GPWTM_GPTMCTL_R_TASTALL_BIT          (1)
#define GPWTM_GPTMCTL_R_TASTALL_CONTINUE     (0x00000000)
#define GPWTM_GPTMCTL_R_TASTALL_FREEZE       (0x00000002)

#define GPWTM_GPTMCTL_TASTALL_MASK           (0x00000001)
#define GPWTM_GPTMCTL_TASTALL_CONTINUE       (0x00000000)
#define GPWTM_GPTMCTL_TASTALL_FREEZE         (0x00000001)
//--------

//--------
#define GPWTM_GPTMCTL_R_TAEVENT_MASK         (0x0000000C)
#define GPWTM_GPTMCTL_R_TAEVENT_BIT          (2)
#define GPWTM_GPTMCTL_R_TAEVENT_POS          (0x00000000)
#define GPWTM_GPTMCTL_R_TAEVENT_NEG          (0x00000004)
#define GPWTM_GPTMCTL_R_TAEVENT_BOTH         (0x0000000C)

#define GPWTM_GPTMCTL_TAEVENT_MASK           (0x00000003)
#define GPWTM_GPTMCTL_TAEVENT_NEG            (0x00000000)
#define GPWTM_GPTMCTL_TAEVENT_POS            (0x00000001)
#define GPWTM_GPTMCTL_TAEVENT_BOTH           (0x00000003)
//--------

//--------
#define GPWTM_GPTMCTL_R_RTCEN_MASK           (0x00000010)
#define GPWTM_GPTMCTL_R_RTCEN_BIT            (4)
#define GPWTM_GPTMCTL_R_RTCEN_CONTINUE       (0x00000000)
#define GPWTM_GPTMCTL_R_RTCEN_FREEZE         (0x00000010)

#define GPWTM_GPTMCTL_RTCEN_MASK             (0x00000001)
#define GPWTM_GPTMCTL_RTCEN_CONTINUE         (0x00000000)
#define GPWTM_GPTMCTL_RTCEN_FREEZE           (0x00000001)
//--------

//--------
#define GPWTM_GPTMCTL_R_TAOTE_MASK           (0x00000020)
#define GPWTM_GPTMCTL_R_TAOTE_BIT            (5)
#define GPWTM_GPTMCTL_R_TAOTE_DIS            (0x00000000)
#define GPWTM_GPTMCTL_R_TAOTE_EN             (0x00000020)

#define GPWTM_GPTMCTL_TAOTE_MASK             (0x00000001)
#define GPWTM_GPTMCTL_TAOTE_DIS              (0x00000000)
#define GPWTM_GPTMCTL_TAOTE_EN               (0x00000001)
//--------

//--------
#define GPWTM_GPTMCTL_R_TAPWML_MASK          (0x00000040)
#define GPWTM_GPTMCTL_R_TAPWML_BIT           (6)
#define GPWTM_GPTMCTL_R_TAPWML_NA            (0x00000000)
#define GPWTM_GPTMCTL_R_TAPWML_INV           (0x00000040)

#define GPWTM_GPTMCTL_TAPWML_MASK            (0x00000001)
#define GPWTM_GPTMCTL_TAPWML_NA              (0x00000000)
#define GPWTM_GPTMCTL_TAPWML_INV             (0x00000001)
//--------

//--------
#define GPWTM_GPTMCTL_R_TBEN_MASK            (0x00000100)
#define GPWTM_GPTMCTL_R_TBEN_BIT             (8)
#define GPWTM_GPTMCTL_R_TBEN_DIS             (0x00000000)
#define GPWTM_GPTMCTL_R_TBEN_EN              (0x00000100)

#define GPWTM_GPTMCTL_TBEN_MASK              (0x00000001)
#define GPWTM_GPTMCTL_TBEN_DIS               (0x00000000)
#define GPWTM_GPTMCTL_TBEN_EN                (0x00000001)
//--------

//--------
#define GPWTM_GPTMCTL_R_TBSTALL_MASK         (0x00000200)
#define GPWTM_GPTMCTL_R_TBSTALL_BIT          (9)
#define GPWTM_GPTMCTL_R_TBSTALL_CONTINUE     (0x00000000)
#define GPWTM_GPTMCTL_R_TBSTALL_FREEZE       (0x00000200)

#define GPWTM_GPTMCTL_TBSTALL_MASK           (0x00000001)
#define GPWTM_GPTMCTL_TBSTALL_CONTINUE       (0x00000000)
#define GPWTM_GPTMCTL_TBSTALL_FREEZE         (0x00000001)
//--------

//--------
#define GPWTM_GPTMCTL_R_TBEVENT_MASK         (0x00000C00)
#define GPWTM_GPTMCTL_R_TBEVENT_BIT          (10)
#define GPWTM_GPTMCTL_R_TBEVENT_POS          (0x00000000)
#define GPWTM_GPTMCTL_R_TBEVENT_NEG          (0x00000400)
#define GPWTM_GPTMCTL_R_TBEVENT_BOTH         (0x00000C00)

#define GPWTM_GPTMCTL_TBEVENT_MASK           (0x00000003)
#define GPWTM_GPTMCTL_TBEVENT_NEG            (0x00000000)
#define GPWTM_GPTMCTL_TBEVENT_POS            (0x00000001)
#define GPWTM_GPTMCTL_TBEVENT_BOTH           (0x00000003)
//--------

//--------
#define GPWTM_GPTMCTL_R_TBOTE_MASK           (0x00002000)
#define GPWTM_GPTMCTL_R_TBOTE_BIT            (13)
#define GPWTM_GPTMCTL_R_TBOTE_DIS            (0x00000000)
#define GPWTM_GPTMCTL_R_TBOTE_EN             (0x00002000)

#define GPWTM_GPTMCTL_TBOTE_MASK             (0x00000001)
#define GPWTM_GPTMCTL_TBOTE_DIS              (0x00000000)
#define GPWTM_GPTMCTL_TBOTE_EN               (0x00000001)
//--------

//--------
#define GPWTM_GPTMCTL_R_TBPWML_MASK          (0x00004000)
#define GPWTM_GPTMCTL_R_TBPWML_BIT           (14)
#define GPWTM_GPTMCTL_R_TBPWML_NA            (0x00000000)
#define GPWTM_GPTMCTL_R_TBPWML_INV           (0x00004000)

#define GPWTM_GPTMCTL_TBPWML_MASK            (0x00000001)
#define GPWTM_GPTMCTL_TBPWML_NA              (0x00000000)
#define GPWTM_GPTMCTL_TBPWML_INV             (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnCTL_R_TnEN_MASK       (0x00000001)
#define GPWTM_TA_GPTMTnCTL_R_TnEN_BIT        (0)
#define GPWTM_TA_GPTMTnCTL_R_TnEN_DIS        (0x00000000)
#define GPWTM_TA_GPTMTnCTL_R_TnEN_EN         (0x00000001)

#define GPWTM_TA_GPTMTnCTL_TnEN_MASK         (0x00000001)
#define GPWTM_TA_GPTMTnCTL_TnEN_DIS          (0x00000000)
#define GPWTM_TA_GPTMTnCTL_TnEN_EN           (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnCTL_R_TnSTALL_MASK    (0x00000002)
#define GPWTM_TA_GPTMTnCTL_R_TnSTALL_BIT     (1)
#define GPWTM_TA_GPTMTnCTL_R_TnSTALL_CONTINUE    (0x00000000)
#define GPWTM_TA_GPTMTnCTL_R_TnSTALL_FREEZE  (0x00000002)

#define GPWTM_TA_GPTMTnCTL_TnSTALL_MASK      (0x00000001)
#define GPWTM_TA_GPTMTnCTL_TnSTALL_CONTINUE  (0x00000000)
#define GPWTM_TA_GPTMTnCTL_TnSTALL_FREEZE    (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnCTL_R_TnEVENT_MASK    (0x0000000C)
#define GPWTM_TA_GPTMTnCTL_R_TnEVENT_BIT     (2)
#define GPWTM_TA_GPTMTnCTL_R_TnEVENT_POS     (0x00000000)
#define GPWTM_TA_GPTMTnCTL_R_TnEVENT_NEG     (0x00000004)
#define GPWTM_TA_GPTMTnCTL_R_TnEVENT_BOTH    (0x0000000C)

#define GPWTM_TA_GPTMTnCTL_TnEVENT_MASK      (0x00000003)
#define GPWTM_TA_GPTMTnCTL_TnEVENT_NEG       (0x00000000)
#define GPWTM_TA_GPTMTnCTL_TnEVENT_POS       (0x00000001)
#define GPWTM_TA_GPTMTnCTL_TnEVENT_BOTH      (0x00000003)
//--------

//--------
#define GPWTM_TA_GPTMTnCTL_R_TnOTE_MASK      (0x00000020)
#define GPWTM_TA_GPTMTnCTL_R_TnOTE_BIT       (5)
#define GPWTM_TA_GPTMTnCTL_R_TnOTE_DIS       (0x00000000)
#define GPWTM_TA_GPTMTnCTL_R_TnOTE_EN        (0x00000020)

#define GPWTM_TA_GPTMTnCTL_TnOTE_MASK        (0x00000001)
#define GPWTM_TA_GPTMTnCTL_TnOTE_DIS         (0x00000000)
#define GPWTM_TA_GPTMTnCTL_TnOTE_EN          (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnCTL_R_TnPWML_MASK     (0x00000040)
#define GPWTM_TA_GPTMTnCTL_R_TnPWML_BIT      (6)
#define GPWTM_TA_GPTMTnCTL_R_TnPWML_NA       (0x00000000)
#define GPWTM_TA_GPTMTnCTL_R_TnPWML_INV      (0x00000040)

#define GPWTM_TA_GPTMTnCTL_TnPWML_MASK       (0x00000001)
#define GPWTM_TA_GPTMTnCTL_TnPWML_NA         (0x00000000)
#define GPWTM_TA_GPTMTnCTL_TnPWML_INV        (0x00000001)
//--------


//--------
#define GPWTM_TB_GPTMTnCTL_R_TnEN_MASK            (0x00000100)
#define GPWTM_TB_GPTMTnCTL_R_TnEN_BIT             (8)
#define GPWTM_TB_GPTMTnCTL_R_TnEN_DIS             (0x00000000)
#define GPWTM_TB_GPTMTnCTL_R_TnEN_EN              (0x00000100)

#define GPWTM_TB_GPTMTnCTL_TnEN_MASK              (0x00000001)
#define GPWTM_TB_GPTMTnCTL_TnEN_DIS               (0x00000000)
#define GPWTM_TB_GPTMTnCTL_TnEN_EN                (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnCTL_R_TnSTALL_MASK         (0x00000200)
#define GPWTM_TB_GPTMTnCTL_R_TnSTALL_BIT          (9)
#define GPWTM_TB_GPTMTnCTL_R_TnSTALL_CONTINUE     (0x00000000)
#define GPWTM_TB_GPTMTnCTL_R_TnSTALL_FREEZE       (0x00000200)

#define GPWTM_TB_GPTMTnCTL_TnSTALL_MASK           (0x00000001)
#define GPWTM_TB_GPTMTnCTL_TnSTALL_CONTINUE       (0x00000000)
#define GPWTM_TB_GPTMTnCTL_TnSTALL_FREEZE         (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnCTL_R_TnEVENT_MASK         (0x00000C00)
#define GPWTM_TB_GPTMTnCTL_R_TnEVENT_BIT          (10)
#define GPWTM_TB_GPTMTnCTL_R_TnEVENT_POS          (0x00000000)
#define GPWTM_TB_GPTMTnCTL_R_TnEVENT_NEG          (0x00000400)
#define GPWTM_TB_GPTMTnCTL_R_TnEVENT_BOTH         (0x00000C00)

#define GPWTM_TB_GPTMTnCTL_TnEVENT_MASK           (0x00000003)
#define GPWTM_TB_GPTMTnCTL_TnEVENT_NEG            (0x00000000)
#define GPWTM_TB_GPTMTnCTL_TnEVENT_POS            (0x00000001)
#define GPWTM_TB_GPTMTnCTL_TnEVENT_BOTH           (0x00000003)
//--------

//--------
#define GPWTM_TB_GPTMTnCTL_R_TnOTE_MASK           (0x00002000)
#define GPWTM_TB_GPTMTnCTL_R_TnOTE_BIT            (13)
#define GPWTM_TB_GPTMTnCTL_R_TnOTE_DIS            (0x00000000)
#define GPWTM_TB_GPTMTnCTL_R_TnOTE_EN             (0x00002000)

#define GPWTM_TB_GPTMTnCTL_TnOTE_MASK             (0x00000001)
#define GPWTM_TB_GPTMTnCTL_TnOTE_DIS              (0x00000000)
#define GPWTM_TB_GPTMTnCTL_TnOTE_EN               (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnCTL_R_TnPWML_MASK          (0x00004000)
#define GPWTM_TB_GPTMTnCTL_R_TnPWML_BIT           (14)
#define GPWTM_TB_GPTMTnCTL_R_TnPWML_NA            (0x00000000)
#define GPWTM_TB_GPTMTnCTL_R_TnPWML_INV           (0x00004000)

#define GPWTM_TB_GPTMTnCTL_TnPWML_MASK            (0x00000001)
#define GPWTM_TB_GPTMTnCTL_TnPWML_NA              (0x00000000)
#define GPWTM_TB_GPTMTnCTL_TnPWML_INV             (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnCTL_R_TnEN_MASK       (0x00000001)
#define GPWTM_TW_GPTMTnCTL_R_TnEN_BIT        (0)
#define GPWTM_TW_GPTMTnCTL_R_TnEN_DIS        (0x00000000)
#define GPWTM_TW_GPTMTnCTL_R_TnEN_EN         (0x00000001)

#define GPWTM_TW_GPTMTnCTL_TnEN_MASK         (0x00000001)
#define GPWTM_TW_GPTMTnCTL_TnEN_DIS          (0x00000000)
#define GPWTM_TW_GPTMTnCTL_TnEN_EN           (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnCTL_R_TnSTALL_MASK    (0x00000002)
#define GPWTM_TW_GPTMTnCTL_R_TnSTALL_BIT     (1)
#define GPWTM_TW_GPTMTnCTL_R_TnSTALL_CONTINUE    (0x00000000)
#define GPWTM_TW_GPTMTnCTL_R_TnSTALL_FREEZE  (0x00000002)

#define GPWTM_TW_GPTMTnCTL_TnSTALL_MASK      (0x00000001)
#define GPWTM_TW_GPTMTnCTL_TnSTALL_CONTINUE  (0x00000000)
#define GPWTM_TW_GPTMTnCTL_TnSTALL_FREEZE    (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnCTL_R_TnEVENT_MASK    (0x0000000C)
#define GPWTM_TW_GPTMTnCTL_R_TnEVENT_BIT     (2)
#define GPWTM_TW_GPTMTnCTL_R_TnEVENT_POS     (0x00000000)
#define GPWTM_TW_GPTMTnCTL_R_TnEVENT_NEG     (0x00000004)
#define GPWTM_TW_GPTMTnCTL_R_TnEVENT_BOTH    (0x0000000C)

#define GPWTM_TW_GPTMTnCTL_TnEVENT_MASK      (0x00000003)
#define GPWTM_TW_GPTMTnCTL_TnEVENT_NEG       (0x00000000)
#define GPWTM_TW_GPTMTnCTL_TnEVENT_POS       (0x00000001)
#define GPWTM_TW_GPTMTnCTL_TnEVENT_BOTH      (0x00000003)
//--------

//--------
#define GPWTM_TW_GPTMTnCTL_R_RTCEN_MASK      (0x00000010)
#define GPWTM_TW_GPTMTnCTL_R_RTCEN_BIT       (4)
#define GPWTM_TW_GPTMTnCTL_R_RTCEN_DIS       (0x00000000)
#define GPWTM_TW_GPTMTnCTL_R_RTCEN_EN        (0x00000010)

#define GPWTM_TW_GPTMTnCTL_RTCEN_MASK        (0x00000001)
#define GPWTM_TW_GPTMTnCTL_RTCEN_DIS         (0x00000000)
#define GPWTM_TW_GPTMTnCTL_RTCEN_EN          (0x00000001)
//--------
//--------
#define GPWTM_TW_GPTMTnCTL_R_TnOTE_MASK      (0x00000020)
#define GPWTM_TW_GPTMTnCTL_R_TnOTE_BIT       (5)
#define GPWTM_TW_GPTMTnCTL_R_TnOTE_DIS       (0x00000000)
#define GPWTM_TW_GPTMTnCTL_R_TnOTE_EN        (0x00000020)

#define GPWTM_TW_GPTMTnCTL_TnOTE_MASK        (0x00000001)
#define GPWTM_TW_GPTMTnCTL_TnOTE_DIS         (0x00000000)
#define GPWTM_TW_GPTMTnCTL_TnOTE_EN          (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnCTL_R_TnPWML_MASK     (0x00000040)
#define GPWTM_TW_GPTMTnCTL_R_TnPWML_BIT      (6)
#define GPWTM_TW_GPTMTnCTL_R_TnPWML_NA       (0x00000000)
#define GPWTM_TW_GPTMTnCTL_R_TnPWML_INV      (0x00000040)

#define GPWTM_TW_GPTMTnCTL_TnPWML_MASK       (0x00000001)
#define GPWTM_TW_GPTMTnCTL_TnPWML_NA         (0x00000000)
#define GPWTM_TW_GPTMTnCTL_TnPWML_INV        (0x00000001)
//--------


/* GPTM0 BITBANDING GPTMCTL*/
#define GPTM0_BITBANDING_GPTMCTL_TAEN           (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TAEN_BIT*4))))
#define GPTM0_BITBANDING_GPTMCTL_TASTALL        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TASTALL_BIT*4))))
#define GPTM0_BITBANDING_GPTMCTL_RTCEN          (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_RTCEN_BIT*4))))
#define GPTM0_BITBANDING_GPTMCTL_TAOTE          (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TAOTE_BIT*4))))
#define GPTM0_BITBANDING_GPTMCTL_TAPWML         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TAPWML_BIT*4))))
#define GPTM0_BITBANDING_GPTMCTL_TBEN           (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBEN_BIT*4))))
#define GPTM0_BITBANDING_GPTMCTL_TBSTALL        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBSTALL_BIT*4))))
#define GPTM0_BITBANDING_GPTMCTL_TBOTE          (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBOTE_BIT*4))))
#define GPTM0_BITBANDING_GPTMCTL_TBPWML         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBPWML_BIT*4))))

#define GPTM0_BITBANDING_TA_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPTM0_BITBANDING_TB_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPTM0_BITBANDING_TW_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnCTL_RTCEN     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_RTCEN_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnPWML_BIT*4))))

/* GPTM1 BITBANDING GPTMCTL*/
#define GPTM1_BITBANDING_GPTMCTL_TAEN           (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TAEN_BIT*4))))
#define GPTM1_BITBANDING_GPTMCTL_TASTALL        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TASTALL_BIT*4))))
#define GPTM1_BITBANDING_GPTMCTL_RTCEN          (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_RTCEN_BIT*4))))
#define GPTM1_BITBANDING_GPTMCTL_TAOTE          (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TAOTE_BIT*4))))
#define GPTM1_BITBANDING_GPTMCTL_TAPWML         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TAPWML_BIT*4))))
#define GPTM1_BITBANDING_GPTMCTL_TBEN           (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBEN_BIT*4))))
#define GPTM1_BITBANDING_GPTMCTL_TBSTALL        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBSTALL_BIT*4))))
#define GPTM1_BITBANDING_GPTMCTL_TBOTE          (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBOTE_BIT*4))))
#define GPTM1_BITBANDING_GPTMCTL_TBPWML         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBPWML_BIT*4))))

#define GPTM1_BITBANDING_TA_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPTM1_BITBANDING_TB_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPTM1_BITBANDING_TW_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnCTL_RTCEN     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_RTCEN_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnPWML_BIT*4))))

/* GPTM2 BITBANDING GPTMCTL*/
#define GPTM2_BITBANDING_GPTMCTL_TAEN           (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TAEN_BIT*4))))
#define GPTM2_BITBANDING_GPTMCTL_TASTALL        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TASTALL_BIT*4))))
#define GPTM2_BITBANDING_GPTMCTL_RTCEN          (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_RTCEN_BIT*4))))
#define GPTM2_BITBANDING_GPTMCTL_TAOTE          (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TAOTE_BIT*4))))
#define GPTM2_BITBANDING_GPTMCTL_TAPWML         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TAPWML_BIT*4))))
#define GPTM2_BITBANDING_GPTMCTL_TBEN           (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBEN_BIT*4))))
#define GPTM2_BITBANDING_GPTMCTL_TBSTALL        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBSTALL_BIT*4))))
#define GPTM2_BITBANDING_GPTMCTL_TBOTE          (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBOTE_BIT*4))))
#define GPTM2_BITBANDING_GPTMCTL_TBPWML         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBPWML_BIT*4))))

#define GPTM2_BITBANDING_TA_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPTM2_BITBANDING_TB_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPTM2_BITBANDING_TW_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnCTL_RTCEN     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_RTCEN_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnPWML_BIT*4))))

/* GPTM3 BITBANDING GPTMCTL*/
#define GPTM3_BITBANDING_GPTMCTL_TAEN           (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TAEN_BIT*4))))
#define GPTM3_BITBANDING_GPTMCTL_TASTALL        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TASTALL_BIT*4))))
#define GPTM3_BITBANDING_GPTMCTL_RTCEN          (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_RTCEN_BIT*4))))
#define GPTM3_BITBANDING_GPTMCTL_TAOTE          (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TAOTE_BIT*4))))
#define GPTM3_BITBANDING_GPTMCTL_TAPWML         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TAPWML_BIT*4))))
#define GPTM3_BITBANDING_GPTMCTL_TBEN           (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBEN_BIT*4))))
#define GPTM3_BITBANDING_GPTMCTL_TBSTALL        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBSTALL_BIT*4))))
#define GPTM3_BITBANDING_GPTMCTL_TBOTE          (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBOTE_BIT*4))))
#define GPTM3_BITBANDING_GPTMCTL_TBPWML         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBPWML_BIT*4))))

#define GPTM3_BITBANDING_TA_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPTM3_BITBANDING_TB_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPTM3_BITBANDING_TW_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnCTL_RTCEN     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_RTCEN_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnPWML_BIT*4))))

/* GPTM4 BITBANDING GPTMCTL*/
#define GPTM4_BITBANDING_GPTMCTL_TAEN           (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TAEN_BIT*4))))
#define GPTM4_BITBANDING_GPTMCTL_TASTALL        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TASTALL_BIT*4))))
#define GPTM4_BITBANDING_GPTMCTL_RTCEN          (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_RTCEN_BIT*4))))
#define GPTM4_BITBANDING_GPTMCTL_TAOTE          (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TAOTE_BIT*4))))
#define GPTM4_BITBANDING_GPTMCTL_TAPWML         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TAPWML_BIT*4))))
#define GPTM4_BITBANDING_GPTMCTL_TBEN           (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBEN_BIT*4))))
#define GPTM4_BITBANDING_GPTMCTL_TBSTALL        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBSTALL_BIT*4))))
#define GPTM4_BITBANDING_GPTMCTL_TBOTE          (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBOTE_BIT*4))))
#define GPTM4_BITBANDING_GPTMCTL_TBPWML         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBPWML_BIT*4))))

#define GPTM4_BITBANDING_TA_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPTM4_BITBANDING_TB_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPTM4_BITBANDING_TW_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnCTL_RTCEN     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_RTCEN_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnPWML_BIT*4))))

/* GPTM5 BITBANDING GPTMCTL*/
#define GPTM5_BITBANDING_GPTMCTL_TAEN           (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TAEN_BIT*4))))
#define GPTM5_BITBANDING_GPTMCTL_TASTALL        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TASTALL_BIT*4))))
#define GPTM5_BITBANDING_GPTMCTL_RTCEN          (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_RTCEN_BIT*4))))
#define GPTM5_BITBANDING_GPTMCTL_TAOTE          (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TAOTE_BIT*4))))
#define GPTM5_BITBANDING_GPTMCTL_TAPWML         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TAPWML_BIT*4))))
#define GPTM5_BITBANDING_GPTMCTL_TBEN           (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBEN_BIT*4))))
#define GPTM5_BITBANDING_GPTMCTL_TBSTALL        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBSTALL_BIT*4))))
#define GPTM5_BITBANDING_GPTMCTL_TBOTE          (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBOTE_BIT*4))))
#define GPTM5_BITBANDING_GPTMCTL_TBPWML         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMCTL_OFFSET)*32)+(GPTM_GPTMCTL_R_TBPWML_BIT*4))))

#define GPTM5_BITBANDING_TA_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnCTL_OFFSET)*32)+(GPTM_TA_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPTM5_BITBANDING_TB_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnCTL_OFFSET)*32)+(GPTM_TB_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPTM5_BITBANDING_TW_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnCTL_RTCEN     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_RTCEN_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnCTL_OFFSET)*32)+(GPTM_TW_GPTMTnCTL_R_TnPWML_BIT*4))))

/* GPWTM0 BITBANDING GPTMCTL*/
#define GPWTM0_BITBANDING_GPTMCTL_TAEN           (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TAEN_BIT*4))))
#define GPWTM0_BITBANDING_GPTMCTL_TASTALL        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TASTALL_BIT*4))))
#define GPWTM0_BITBANDING_GPTMCTL_RTCEN          (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_RTCEN_BIT*4))))
#define GPWTM0_BITBANDING_GPTMCTL_TAOTE          (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TAOTE_BIT*4))))
#define GPWTM0_BITBANDING_GPTMCTL_TAPWML         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TAPWML_BIT*4))))
#define GPWTM0_BITBANDING_GPTMCTL_TBEN           (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBEN_BIT*4))))
#define GPWTM0_BITBANDING_GPTMCTL_TBSTALL        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBSTALL_BIT*4))))
#define GPWTM0_BITBANDING_GPTMCTL_TBOTE          (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBOTE_BIT*4))))
#define GPWTM0_BITBANDING_GPTMCTL_TBPWML         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBPWML_BIT*4))))

#define GPWTM0_BITBANDING_TA_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPWTM0_BITBANDING_TB_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPWTM0_BITBANDING_TW_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnCTL_RTCEN     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_RTCEN_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnPWML_BIT*4))))

/* GPWTM1 BITBANDING GPTMCTL*/
#define GPWTM1_BITBANDING_GPTMCTL_TAEN           (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TAEN_BIT*4))))
#define GPWTM1_BITBANDING_GPTMCTL_TASTALL        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TASTALL_BIT*4))))
#define GPWTM1_BITBANDING_GPTMCTL_RTCEN          (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_RTCEN_BIT*4))))
#define GPWTM1_BITBANDING_GPTMCTL_TAOTE          (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TAOTE_BIT*4))))
#define GPWTM1_BITBANDING_GPTMCTL_TAPWML         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TAPWML_BIT*4))))
#define GPWTM1_BITBANDING_GPTMCTL_TBEN           (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBEN_BIT*4))))
#define GPWTM1_BITBANDING_GPTMCTL_TBSTALL        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBSTALL_BIT*4))))
#define GPWTM1_BITBANDING_GPTMCTL_TBOTE          (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBOTE_BIT*4))))
#define GPWTM1_BITBANDING_GPTMCTL_TBPWML         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBPWML_BIT*4))))

#define GPWTM1_BITBANDING_TA_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPWTM1_BITBANDING_TB_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPWTM1_BITBANDING_TW_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnCTL_RTCEN     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_RTCEN_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnPWML_BIT*4))))

/* GPWTM2 BITBANDING GPTMCTL*/
#define GPWTM2_BITBANDING_GPTMCTL_TAEN           (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TAEN_BIT*4))))
#define GPWTM2_BITBANDING_GPTMCTL_TASTALL        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TASTALL_BIT*4))))
#define GPWTM2_BITBANDING_GPTMCTL_RTCEN          (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_RTCEN_BIT*4))))
#define GPWTM2_BITBANDING_GPTMCTL_TAOTE          (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TAOTE_BIT*4))))
#define GPWTM2_BITBANDING_GPTMCTL_TAPWML         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TAPWML_BIT*4))))
#define GPWTM2_BITBANDING_GPTMCTL_TBEN           (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBEN_BIT*4))))
#define GPWTM2_BITBANDING_GPTMCTL_TBSTALL        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBSTALL_BIT*4))))
#define GPWTM2_BITBANDING_GPTMCTL_TBOTE          (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBOTE_BIT*4))))
#define GPWTM2_BITBANDING_GPTMCTL_TBPWML         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBPWML_BIT*4))))

#define GPWTM2_BITBANDING_TA_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPWTM2_BITBANDING_TB_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPWTM2_BITBANDING_TW_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnCTL_RTCEN     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_RTCEN_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnPWML_BIT*4))))

/* GPWTM3 BITBANDING GPTMCTL*/
#define GPWTM3_BITBANDING_GPTMCTL_TAEN           (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TAEN_BIT*4))))
#define GPWTM3_BITBANDING_GPTMCTL_TASTALL        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TASTALL_BIT*4))))
#define GPWTM3_BITBANDING_GPTMCTL_RTCEN          (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_RTCEN_BIT*4))))
#define GPWTM3_BITBANDING_GPTMCTL_TAOTE          (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TAOTE_BIT*4))))
#define GPWTM3_BITBANDING_GPTMCTL_TAPWML         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TAPWML_BIT*4))))
#define GPWTM3_BITBANDING_GPTMCTL_TBEN           (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBEN_BIT*4))))
#define GPWTM3_BITBANDING_GPTMCTL_TBSTALL        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBSTALL_BIT*4))))
#define GPWTM3_BITBANDING_GPTMCTL_TBOTE          (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBOTE_BIT*4))))
#define GPWTM3_BITBANDING_GPTMCTL_TBPWML         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBPWML_BIT*4))))

#define GPWTM3_BITBANDING_TA_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPWTM3_BITBANDING_TB_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPWTM3_BITBANDING_TW_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnCTL_RTCEN     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_RTCEN_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnPWML_BIT*4))))

/* GPWTM4 BITBANDING GPTMCTL*/
#define GPWTM4_BITBANDING_GPTMCTL_TAEN           (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TAEN_BIT*4))))
#define GPWTM4_BITBANDING_GPTMCTL_TASTALL        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TASTALL_BIT*4))))
#define GPWTM4_BITBANDING_GPTMCTL_RTCEN          (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_RTCEN_BIT*4))))
#define GPWTM4_BITBANDING_GPTMCTL_TAOTE          (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TAOTE_BIT*4))))
#define GPWTM4_BITBANDING_GPTMCTL_TAPWML         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TAPWML_BIT*4))))
#define GPWTM4_BITBANDING_GPTMCTL_TBEN           (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBEN_BIT*4))))
#define GPWTM4_BITBANDING_GPTMCTL_TBSTALL        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBSTALL_BIT*4))))
#define GPWTM4_BITBANDING_GPTMCTL_TBOTE          (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBOTE_BIT*4))))
#define GPWTM4_BITBANDING_GPTMCTL_TBPWML         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBPWML_BIT*4))))

#define GPWTM4_BITBANDING_TA_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPWTM4_BITBANDING_TB_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPWTM4_BITBANDING_TW_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnCTL_RTCEN     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_RTCEN_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnPWML_BIT*4))))

/* GPWTM5 BITBANDING GPTMCTL*/
#define GPWTM5_BITBANDING_GPTMCTL_TAEN           (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TAEN_BIT*4))))
#define GPWTM5_BITBANDING_GPTMCTL_TASTALL        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TASTALL_BIT*4))))
#define GPWTM5_BITBANDING_GPTMCTL_RTCEN          (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_RTCEN_BIT*4))))
#define GPWTM5_BITBANDING_GPTMCTL_TAOTE          (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TAOTE_BIT*4))))
#define GPWTM5_BITBANDING_GPTMCTL_TAPWML         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TAPWML_BIT*4))))
#define GPWTM5_BITBANDING_GPTMCTL_TBEN           (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBEN_BIT*4))))
#define GPWTM5_BITBANDING_GPTMCTL_TBSTALL        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBSTALL_BIT*4))))
#define GPWTM5_BITBANDING_GPTMCTL_TBOTE          (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBOTE_BIT*4))))
#define GPWTM5_BITBANDING_GPTMCTL_TBPWML         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMCTL_OFFSET)*32)+(GPWTM_GPTMCTL_R_TBPWML_BIT*4))))

#define GPWTM5_BITBANDING_TA_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnCTL_OFFSET)*32)+(GPWTM_TA_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPWTM5_BITBANDING_TB_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnCTL_OFFSET)*32)+(GPWTM_TB_GPTMTnCTL_R_TnPWML_BIT*4))))

#define GPWTM5_BITBANDING_TW_GPTMTnCTL_TnEN      (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnEN_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnCTL_TnSTALL   (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnSTALL_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnCTL_RTCEN     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_RTCEN_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnCTL_TnOTE     (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnOTE_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnCTL_TnPWML    (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnCTL_OFFSET)*32)+(GPWTM_TW_GPTMTnCTL_R_TnPWML_BIT*4))))



/******************************************************************************************
************************************ 5 GPTMSYNC *********************************************
******************************************************************************************/

/* GPTM0 GPTMSYNC*/
#define GPTM0_BITBANDING_GPTMSYNC           (((BITBANDING_GPTMSYNC_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMSYNC_OFFSET)*32))))
#define GPTM0_GPTMSYNC                      (((GPTMSYNC_TypeDef*)(GPTM0_BASE + GPTM_GPTMSYNC_OFFSET )))
#define GPTM0_GPTMSYNC_R                    (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMSYNC_OFFSET)))

#define GPTM0_BITBANDING_CTL_GPTMSYNC       (((BITBANDING_GPTMSYNC_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_CTL_GPTMSYNC_OFFSET)*32))))
#define GPTM0_CTL_GPTMSYNC                  (((GPTMSYNC_TypeDef*)(GPTM0_BASE + GPTM_CTL_GPTMSYNC_OFFSET )))
#define GPTM0_CTL_GPTMSYNC_R                (*((volatile uint32_t *)(GPTM0_BASE +GPTM_CTL_GPTMSYNC_OFFSET)))

//--------
#define GPTM_GPTMSYNC_R_SYNCT0_MASK        (0x00000003)
#define GPTM_GPTMSYNC_R_SYNCT0_BIT         (0)
#define GPTM_GPTMSYNC_R_SYNCT0_NA          (0x00000000)
#define GPTM_GPTMSYNC_R_SYNCT0_TA          (0x00000001)
#define GPTM_GPTMSYNC_R_SYNCT0_TB          (0x00000002)
#define GPTM_GPTMSYNC_R_SYNCT0_BOTH        (0x00000003)

#define GPTM_GPTMSYNC_SYNCT0_MASK          (0x00000003)
#define GPTM_GPTMSYNC_SYNCT0_NA            (0x00000000)
#define GPTM_GPTMSYNC_SYNCT0_TA            (0x00000001)
#define GPTM_GPTMSYNC_SYNCT0_TB            (0x00000002)
#define GPTM_GPTMSYNC_SYNCT0_BOTH          (0x00000003)
//--------

//--------
#define GPTM_GPTMSYNC_R_SYNCT1_MASK        (0x0000000C)
#define GPTM_GPTMSYNC_R_SYNCT1_BIT         (2)
#define GPTM_GPTMSYNC_R_SYNCT1_NA          (0x00000000)
#define GPTM_GPTMSYNC_R_SYNCT1_TA          (0x00000004)
#define GPTM_GPTMSYNC_R_SYNCT1_TB          (0x00000008)
#define GPTM_GPTMSYNC_R_SYNCT1_BOTH        (0x0000000C)

#define GPTM_GPTMSYNC_SYNCT1_MASK          (0x00000003)
#define GPTM_GPTMSYNC_SYNCT1_NA            (0x00000000)
#define GPTM_GPTMSYNC_SYNCT1_TA            (0x00000001)
#define GPTM_GPTMSYNC_SYNCT1_TB            (0x00000002)
#define GPTM_GPTMSYNC_SYNCT1_BOTH          (0x00000003)
//--------

//--------
#define GPTM_GPTMSYNC_R_SYNCT2_MASK        (0x00000030)
#define GPTM_GPTMSYNC_R_SYNCT2_BIT         (4)
#define GPTM_GPTMSYNC_R_SYNCT2_NA          (0x00000000)
#define GPTM_GPTMSYNC_R_SYNCT2_TA          (0x00000010)
#define GPTM_GPTMSYNC_R_SYNCT2_TB          (0x00000020)
#define GPTM_GPTMSYNC_R_SYNCT2_BOTH        (0x00000030)

#define GPTM_GPTMSYNC_SYNCT2_MASK          (0x00000003)
#define GPTM_GPTMSYNC_SYNCT2_NA            (0x00000000)
#define GPTM_GPTMSYNC_SYNCT2_TA            (0x00000001)
#define GPTM_GPTMSYNC_SYNCT2_TB            (0x00000002)
#define GPTM_GPTMSYNC_SYNCT2_BOTH          (0x00000003)
//--------

//--------
#define GPTM_GPTMSYNC_R_SYNCT3_MASK        (0x000000C0)
#define GPTM_GPTMSYNC_R_SYNCT3_BIT         (6)
#define GPTM_GPTMSYNC_R_SYNCT3_NA          (0x00000000)
#define GPTM_GPTMSYNC_R_SYNCT3_TA          (0x00000040)
#define GPTM_GPTMSYNC_R_SYNCT3_TB          (0x00000080)
#define GPTM_GPTMSYNC_R_SYNCT3_BOTH        (0x000000C0)

#define GPTM_GPTMSYNC_SYNCT3_MASK          (0x00000003)
#define GPTM_GPTMSYNC_SYNCT3_NA            (0x00000000)
#define GPTM_GPTMSYNC_SYNCT3_TA            (0x00000001)
#define GPTM_GPTMSYNC_SYNCT3_TB            (0x00000002)
#define GPTM_GPTMSYNC_SYNCT3_BOTH          (0x00000003)
//--------

//--------
#define GPTM_GPTMSYNC_R_SYNCT4_MASK        (0x00000300)
#define GPTM_GPTMSYNC_R_SYNCT4_BIT         (8)
#define GPTM_GPTMSYNC_R_SYNCT4_NA          (0x00000000)
#define GPTM_GPTMSYNC_R_SYNCT4_TA          (0x00000100)
#define GPTM_GPTMSYNC_R_SYNCT4_TB          (0x00000200)
#define GPTM_GPTMSYNC_R_SYNCT4_BOTH        (0x00000300)

#define GPTM_GPTMSYNC_SYNCT4_MASK          (0x00000003)
#define GPTM_GPTMSYNC_SYNCT4_NA            (0x00000000)
#define GPTM_GPTMSYNC_SYNCT4_TA            (0x00000001)
#define GPTM_GPTMSYNC_SYNCT4_TB            (0x00000002)
#define GPTM_GPTMSYNC_SYNCT4_BOTH          (0x00000003)
//--------

//--------
#define GPTM_GPTMSYNC_R_SYNCT5_MASK        (0x00000C00)
#define GPTM_GPTMSYNC_R_SYNCT5_BIT         (10)
#define GPTM_GPTMSYNC_R_SYNCT5_NA          (0x00000000)
#define GPTM_GPTMSYNC_R_SYNCT5_TA          (0x00000400)
#define GPTM_GPTMSYNC_R_SYNCT5_TB          (0x00000800)
#define GPTM_GPTMSYNC_R_SYNCT5_BOTH        (0x00000C00)

#define GPTM_GPTMSYNC_SYNCT5_MASK          (0x00000003)
#define GPTM_GPTMSYNC_SYNCT5_NA            (0x00000000)
#define GPTM_GPTMSYNC_SYNCT5_TA            (0x00000001)
#define GPTM_GPTMSYNC_SYNCT5_TB            (0x00000002)
#define GPTM_GPTMSYNC_SYNCT5_BOTH          (0x00000003)
//--------

//--------
#define GPTM_GPTMSYNC_R_SYNCWT0_MASK       (0x00003000)
#define GPTM_GPTMSYNC_R_SYNCWT0_BIT        (12)
#define GPTM_GPTMSYNC_R_SYNCWT0_NA         (0x00000000)
#define GPTM_GPTMSYNC_R_SYNCWT0_TA         (0x00001000)
#define GPTM_GPTMSYNC_R_SYNCWT0_TB         (0x00002000)
#define GPTM_GPTMSYNC_R_SYNCWT0_BOTH       (0x00003000)

#define GPTM_GPTMSYNC_SYNCWT0_MASK         (0x00000003)
#define GPTM_GPTMSYNC_SYNCWT0_NA           (0x00000000)
#define GPTM_GPTMSYNC_SYNCWT0_TA           (0x00000001)
#define GPTM_GPTMSYNC_SYNCWT0_TB           (0x00000002)
#define GPTM_GPTMSYNC_SYNCWT0_BOTH         (0x00000003)
//--------

//--------
#define GPTM_GPTMSYNC_R_SYNCWT1_MASK       (0x0000C000)
#define GPTM_GPTMSYNC_R_SYNCWT1_BIT        (14)
#define GPTM_GPTMSYNC_R_SYNCWT1_NA         (0x00000000)
#define GPTM_GPTMSYNC_R_SYNCWT1_TA         (0x00004000)
#define GPTM_GPTMSYNC_R_SYNCWT1_TB         (0x00008000)
#define GPTM_GPTMSYNC_R_SYNCWT1_BOTH       (0x0000C000)

#define GPTM_GPTMSYNC_SYNCWT1_MASK         (0x00000003)
#define GPTM_GPTMSYNC_SYNCWT1_NA           (0x00000000)
#define GPTM_GPTMSYNC_SYNCWT1_TA           (0x00000001)
#define GPTM_GPTMSYNC_SYNCWT1_TB           (0x00000002)
#define GPTM_GPTMSYNC_SYNCWT1_BOTH         (0x00000003)
//--------

//--------
#define GPTM_GPTMSYNC_R_SYNCWT2_MASK       (0x00030000)
#define GPTM_GPTMSYNC_R_SYNCWT2_BIT        (16)
#define GPTM_GPTMSYNC_R_SYNCWT2_NA         (0x00000000)
#define GPTM_GPTMSYNC_R_SYNCWT2_TA         (0x00010000)
#define GPTM_GPTMSYNC_R_SYNCWT2_TB         (0x00020000)
#define GPTM_GPTMSYNC_R_SYNCWT2_BOTH       (0x00030000)

#define GPTM_GPTMSYNC_SYNCWT2_MASK         (0x00000003)
#define GPTM_GPTMSYNC_SYNCWT2_NA           (0x00000000)
#define GPTM_GPTMSYNC_SYNCWT2_TA           (0x00000001)
#define GPTM_GPTMSYNC_SYNCWT2_TB           (0x00000002)
#define GPTM_GPTMSYNC_SYNCWT2_BOTH         (0x00000003)
//--------

//--------
#define GPTM_GPTMSYNC_R_SYNCWT3_MASK       (0x000C0000)
#define GPTM_GPTMSYNC_R_SYNCWT3_BIT        (18)
#define GPTM_GPTMSYNC_R_SYNCWT3_NA         (0x00000000)
#define GPTM_GPTMSYNC_R_SYNCWT3_TA         (0x00040000)
#define GPTM_GPTMSYNC_R_SYNCWT3_TB         (0x00080000)
#define GPTM_GPTMSYNC_R_SYNCWT3_BOTH       (0x000C0000)

#define GPTM_GPTMSYNC_SYNCWT3_MASK         (0x00000003)
#define GPTM_GPTMSYNC_SYNCWT3_NA           (0x00000000)
#define GPTM_GPTMSYNC_SYNCWT3_TA           (0x00000001)
#define GPTM_GPTMSYNC_SYNCWT3_TB           (0x00000002)
#define GPTM_GPTMSYNC_SYNCWT3_BOTH         (0x00000003)
//--------

//--------
#define GPTM_GPTMSYNC_R_SYNCWT4_MASK       (0x0030000)
#define GPTM_GPTMSYNC_R_SYNCWT4_BIT        (20)
#define GPTM_GPTMSYNC_R_SYNCWT4_NA         (0x00000000)
#define GPTM_GPTMSYNC_R_SYNCWT4_TA         (0x00100000)
#define GPTM_GPTMSYNC_R_SYNCWT4_TB         (0x00200000)
#define GPTM_GPTMSYNC_R_SYNCWT4_BOTH       (0x00300000)

#define GPTM_GPTMSYNC_SYNCWT4_MASK         (0x00000003)
#define GPTM_GPTMSYNC_SYNCWT4_NA           (0x00000000)
#define GPTM_GPTMSYNC_SYNCWT4_TA           (0x00000001)
#define GPTM_GPTMSYNC_SYNCWT4_TB           (0x00000002)
#define GPTM_GPTMSYNC_SYNCWT4_BOTH         (0x00000003)
//--------

//--------
#define GPTM_GPTMSYNC_R_SYNCWT5_MASK       (0x00C00000)
#define GPTM_GPTMSYNC_R_SYNCWT5_BIT        (22)
#define GPTM_GPTMSYNC_R_SYNCWT5_NA         (0x00000000)
#define GPTM_GPTMSYNC_R_SYNCWT5_TA         (0x00400000)
#define GPTM_GPTMSYNC_R_SYNCWT5_TB         (0x00800000)
#define GPTM_GPTMSYNC_R_SYNCWT5_BOTH       (0x00C00000)

#define GPTM_GPTMSYNC_SYNCWT5_MASK         (0x00000003)
#define GPTM_GPTMSYNC_SYNCWT5_NA           (0x00000000)
#define GPTM_GPTMSYNC_SYNCWT5_TA           (0x00000001)
#define GPTM_GPTMSYNC_SYNCWT5_TB           (0x00000002)
#define GPTM_GPTMSYNC_SYNCWT5_BOTH         (0x00000003)
//--------

//--------
#define GPTM_CTL_GPTMSYNC_R_SYNCT0_MASK      (0x00000003)
#define GPTM_CTL_GPTMSYNC_R_SYNCT0_BIT       (0)
#define GPTM_CTL_GPTMSYNC_R_SYNCT0_NA        (0x00000000)
#define GPTM_CTL_GPTMSYNC_R_SYNCT0_TA        (0x00000001)
#define GPTM_CTL_GPTMSYNC_R_SYNCT0_TB        (0x00000002)
#define GPTM_CTL_GPTMSYNC_R_SYNCT0_BOTH      (0x00000003)

#define GPTM_CTL_GPTMSYNC_SYNCT0_MASK        (0x00000003)
#define GPTM_CTL_GPTMSYNC_SYNCT0_NA          (0x00000000)
#define GPTM_CTL_GPTMSYNC_SYNCT0_TA          (0x00000001)
#define GPTM_CTL_GPTMSYNC_SYNCT0_TB          (0x00000002)
#define GPTM_CTL_GPTMSYNC_SYNCT0_BOTH        (0x00000003)
//--------

//--------
#define GPTM_CTL_GPTMSYNC_R_SYNCT1_MASK      (0x0000000C)
#define GPTM_CTL_GPTMSYNC_R_SYNCT1_BIT       (2)
#define GPTM_CTL_GPTMSYNC_R_SYNCT1_NA        (0x00000000)
#define GPTM_CTL_GPTMSYNC_R_SYNCT1_TA        (0x00000004)
#define GPTM_CTL_GPTMSYNC_R_SYNCT1_TB        (0x00000008)
#define GPTM_CTL_GPTMSYNC_R_SYNCT1_BOTH      (0x0000000C)

#define GPTM_CTL_GPTMSYNC_SYNCT1_MASK        (0x00000003)
#define GPTM_CTL_GPTMSYNC_SYNCT1_NA          (0x00000000)
#define GPTM_CTL_GPTMSYNC_SYNCT1_TA          (0x00000001)
#define GPTM_CTL_GPTMSYNC_SYNCT1_TB          (0x00000002)
#define GPTM_CTL_GPTMSYNC_SYNCT1_BOTH        (0x00000003)
//--------

//--------
#define GPTM_CTL_GPTMSYNC_R_SYNCT2_MASK      (0x00000030)
#define GPTM_CTL_GPTMSYNC_R_SYNCT2_BIT       (4)
#define GPTM_CTL_GPTMSYNC_R_SYNCT2_NA        (0x00000000)
#define GPTM_CTL_GPTMSYNC_R_SYNCT2_TA        (0x00000010)
#define GPTM_CTL_GPTMSYNC_R_SYNCT2_TB        (0x00000020)
#define GPTM_CTL_GPTMSYNC_R_SYNCT2_BOTH      (0x00000030)

#define GPTM_CTL_GPTMSYNC_SYNCT2_MASK        (0x00000003)
#define GPTM_CTL_GPTMSYNC_SYNCT2_NA          (0x00000000)
#define GPTM_CTL_GPTMSYNC_SYNCT2_TA          (0x00000001)
#define GPTM_CTL_GPTMSYNC_SYNCT2_TB          (0x00000002)
#define GPTM_CTL_GPTMSYNC_SYNCT2_BOTH        (0x00000003)
//--------

//--------
#define GPTM_CTL_GPTMSYNC_R_SYNCT3_MASK      (0x000000C0)
#define GPTM_CTL_GPTMSYNC_R_SYNCT3_BIT       (6)
#define GPTM_CTL_GPTMSYNC_R_SYNCT3_NA        (0x00000000)
#define GPTM_CTL_GPTMSYNC_R_SYNCT3_TA        (0x00000040)
#define GPTM_CTL_GPTMSYNC_R_SYNCT3_TB        (0x00000080)
#define GPTM_CTL_GPTMSYNC_R_SYNCT3_BOTH      (0x000000C0)

#define GPTM_CTL_GPTMSYNC_SYNCT3_MASK        (0x00000003)
#define GPTM_CTL_GPTMSYNC_SYNCT3_NA          (0x00000000)
#define GPTM_CTL_GPTMSYNC_SYNCT3_TA          (0x00000001)
#define GPTM_CTL_GPTMSYNC_SYNCT3_TB          (0x00000002)
#define GPTM_CTL_GPTMSYNC_SYNCT3_BOTH        (0x00000003)
//--------

//--------
#define GPTM_CTL_GPTMSYNC_R_SYNCT4_MASK      (0x00000300)
#define GPTM_CTL_GPTMSYNC_R_SYNCT4_BIT       (8)
#define GPTM_CTL_GPTMSYNC_R_SYNCT4_NA        (0x00000000)
#define GPTM_CTL_GPTMSYNC_R_SYNCT4_TA        (0x00000100)
#define GPTM_CTL_GPTMSYNC_R_SYNCT4_TB        (0x00000200)
#define GPTM_CTL_GPTMSYNC_R_SYNCT4_BOTH      (0x00000300)

#define GPTM_CTL_GPTMSYNC_SYNCT4_MASK        (0x00000003)
#define GPTM_CTL_GPTMSYNC_SYNCT4_NA          (0x00000000)
#define GPTM_CTL_GPTMSYNC_SYNCT4_TA          (0x00000001)
#define GPTM_CTL_GPTMSYNC_SYNCT4_TB          (0x00000002)
#define GPTM_CTL_GPTMSYNC_SYNCT4_BOTH        (0x00000003)
//--------

//--------
#define GPTM_CTL_GPTMSYNC_R_SYNCT5_MASK      (0x00000C00)
#define GPTM_CTL_GPTMSYNC_R_SYNCT5_BIT       (10)
#define GPTM_CTL_GPTMSYNC_R_SYNCT5_NA        (0x00000000)
#define GPTM_CTL_GPTMSYNC_R_SYNCT5_TA        (0x00000400)
#define GPTM_CTL_GPTMSYNC_R_SYNCT5_TB        (0x00000800)
#define GPTM_CTL_GPTMSYNC_R_SYNCT5_BOTH      (0x00000C00)

#define GPTM_CTL_GPTMSYNC_SYNCT5_MASK        (0x00000003)
#define GPTM_CTL_GPTMSYNC_SYNCT5_NA          (0x00000000)
#define GPTM_CTL_GPTMSYNC_SYNCT5_TA          (0x00000001)
#define GPTM_CTL_GPTMSYNC_SYNCT5_TB          (0x00000002)
#define GPTM_CTL_GPTMSYNC_SYNCT5_BOTH        (0x00000003)
//--------

//--------
#define GPTM_CTL_GPTMSYNC_R_SYNCWT0_MASK      (0x00003000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT0_BIT       (12)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT0_NA        (0x00000000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT0_TA        (0x00001000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT0_TB        (0x00002000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT0_BOTH      (0x00003000)

#define GPTM_CTL_GPTMSYNC_SYNCWT0_MASK        (0x00000003)
#define GPTM_CTL_GPTMSYNC_SYNCWT0_NA          (0x00000000)
#define GPTM_CTL_GPTMSYNC_SYNCWT0_TA          (0x00000001)
#define GPTM_CTL_GPTMSYNC_SYNCWT0_TB          (0x00000002)
#define GPTM_CTL_GPTMSYNC_SYNCWT0_BOTH        (0x00000003)
//--------

//--------
#define GPTM_CTL_GPTMSYNC_R_SYNCWT1_MASK      (0x0000C000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT1_BIT       (14)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT1_NA        (0x00000000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT1_TA        (0x00004000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT1_TB        (0x00008000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT1_BOTH      (0x0000C000)

#define GPTM_CTL_GPTMSYNC_SYNCWT1_MASK        (0x00000003)
#define GPTM_CTL_GPTMSYNC_SYNCWT1_NA          (0x00000000)
#define GPTM_CTL_GPTMSYNC_SYNCWT1_TA          (0x00000001)
#define GPTM_CTL_GPTMSYNC_SYNCWT1_TB          (0x00000002)
#define GPTM_CTL_GPTMSYNC_SYNCWT1_BOTH        (0x00000003)
//--------

//--------
#define GPTM_CTL_GPTMSYNC_R_SYNCWT2_MASK      (0x00030000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT2_BIT       (16)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT2_NA        (0x00000000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT2_TA        (0x00010000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT2_TB        (0x00020000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT2_BOTH      (0x00030000)

#define GPTM_CTL_GPTMSYNC_SYNCWT2_MASK        (0x00000003)
#define GPTM_CTL_GPTMSYNC_SYNCWT2_NA          (0x00000000)
#define GPTM_CTL_GPTMSYNC_SYNCWT2_TA          (0x00000001)
#define GPTM_CTL_GPTMSYNC_SYNCWT2_TB          (0x00000002)
#define GPTM_CTL_GPTMSYNC_SYNCWT2_BOTH        (0x00000003)
//--------

//--------
#define GPTM_CTL_GPTMSYNC_R_SYNCWT3_MASK      (0x000C0000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT3_BIT       (18)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT3_NA        (0x00000000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT3_TA        (0x00040000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT3_TB        (0x00080000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT3_BOTH      (0x000C0000)

#define GPTM_CTL_GPTMSYNC_SYNCWT3_MASK        (0x00000003)
#define GPTM_CTL_GPTMSYNC_SYNCWT3_NA          (0x00000000)
#define GPTM_CTL_GPTMSYNC_SYNCWT3_TA          (0x00000001)
#define GPTM_CTL_GPTMSYNC_SYNCWT3_TB          (0x00000002)
#define GPTM_CTL_GPTMSYNC_SYNCWT3_BOTH        (0x00000003)
//--------

//--------
#define GPTM_CTL_GPTMSYNC_R_SYNCWT4_MASK      (0x0030000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT4_BIT       (20)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT4_NA        (0x00000000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT4_TA        (0x00100000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT4_TB        (0x00200000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT4_BOTH      (0x00300000)

#define GPTM_CTL_GPTMSYNC_SYNCWT4_MASK        (0x00000003)
#define GPTM_CTL_GPTMSYNC_SYNCWT4_NA          (0x00000000)
#define GPTM_CTL_GPTMSYNC_SYNCWT4_TA          (0x00000001)
#define GPTM_CTL_GPTMSYNC_SYNCWT4_TB          (0x00000002)
#define GPTM_CTL_GPTMSYNC_SYNCWT4_BOTH        (0x00000003)
//--------

//--------
#define GPTM_CTL_GPTMSYNC_R_SYNCWT5_MASK      (0x00C00000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT5_BIT       (22)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT5_NA        (0x00000000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT5_TA        (0x00400000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT5_TB        (0x00800000)
#define GPTM_CTL_GPTMSYNC_R_SYNCWT5_BOTH      (0x00C00000)

#define GPTM_CTL_GPTMSYNC_SYNCWT5_MASK        (0x00000003)
#define GPTM_CTL_GPTMSYNC_SYNCWT5_NA          (0x00000000)
#define GPTM_CTL_GPTMSYNC_SYNCWT5_TA          (0x00000001)
#define GPTM_CTL_GPTMSYNC_SYNCWT5_TB          (0x00000002)
#define GPTM_CTL_GPTMSYNC_SYNCWT5_BOTH        (0x00000003)
//--------

/******************************************************************************************
************************************ 6 GPTMIMR *********************************************
******************************************************************************************/

/* GPTM0 GPTMIMR*/
#define GPTM0_BITBANDING_GPTMIMR            (((BITBANDING_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMIMR_OFFSET)*32))))
#define GPTM0_GPTMIMR                       (((GPTMIMR_TypeDef*)(GPTM0_BASE + GPTM_GPTMIMR_OFFSET )))
#define GPTM0_GPTMIMR_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMIMR_OFFSET)))

#define GPTM0_BITBANDING_TA_GPTMTnIMR       (((BITBANDING_TA_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32))))
#define GPTM0_TA_GPTMTnIMR                  (((TA_GPTMIMR_TypeDef*)(GPTM0_BASE + GPTM_TA_GPTMTnIMR_OFFSET )))
#define GPTM0_TA_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TA_GPTMTnIMR_OFFSET)))

#define GPTM0_BITBANDING_TB_GPTMTnIMR       (((BITBANDING_TB_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32))))
#define GPTM0_TB_GPTMTnIMR                  (((TB_GPTMIMR_TypeDef*)(GPTM0_BASE + GPTM_TB_GPTMTnIMR_OFFSET )))
#define GPTM0_TB_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TB_GPTMTnIMR_OFFSET)))

#define GPTM0_BITBANDING_TW_GPTMTnIMR       (((BITBANDING_TW_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32))))
#define GPTM0_TW_GPTMTnIMR                  (((TW_GPTMIMR_TypeDef*)(GPTM0_BASE + GPTM_TW_GPTMTnIMR_OFFSET )))
#define GPTM0_TW_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TW_GPTMTnIMR_OFFSET)))

/* GPTM1 GPTMIMR*/
#define GPTM1_BITBANDING_GPTMIMR            (((BITBANDING_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMIMR_OFFSET)*32))))
#define GPTM1_GPTMIMR                       (((GPTMIMR_TypeDef*)(GPTM1_BASE + GPTM_GPTMIMR_OFFSET )))
#define GPTM1_GPTMIMR_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMIMR_OFFSET)))

#define GPTM1_BITBANDING_TA_GPTMTnIMR       (((BITBANDING_TA_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32))))
#define GPTM1_TA_GPTMTnIMR                  (((TA_GPTMIMR_TypeDef*)(GPTM1_BASE + GPTM_TA_GPTMTnIMR_OFFSET )))
#define GPTM1_TA_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TA_GPTMTnIMR_OFFSET)))

#define GPTM1_BITBANDING_TB_GPTMTnIMR       (((BITBANDING_TB_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32))))
#define GPTM1_TB_GPTMTnIMR                  (((TB_GPTMIMR_TypeDef*)(GPTM1_BASE + GPTM_TB_GPTMTnIMR_OFFSET )))
#define GPTM1_TB_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TB_GPTMTnIMR_OFFSET)))

#define GPTM1_BITBANDING_TW_GPTMTnIMR       (((BITBANDING_TW_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32))))
#define GPTM1_TW_GPTMTnIMR                  (((TW_GPTMIMR_TypeDef*)(GPTM1_BASE + GPTM_TW_GPTMTnIMR_OFFSET )))
#define GPTM1_TW_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TW_GPTMTnIMR_OFFSET)))

/* GPTM1 GPTMIMR*/
#define GPTM1_BITBANDING_GPTMIMR            (((BITBANDING_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMIMR_OFFSET)*32))))
#define GPTM1_GPTMIMR                       (((GPTMIMR_TypeDef*)(GPTM1_BASE + GPTM_GPTMIMR_OFFSET )))
#define GPTM1_GPTMIMR_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMIMR_OFFSET)))

#define GPTM1_BITBANDING_TA_GPTMTnIMR       (((BITBANDING_TA_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32))))
#define GPTM1_TA_GPTMTnIMR                  (((TA_GPTMIMR_TypeDef*)(GPTM1_BASE + GPTM_TA_GPTMTnIMR_OFFSET )))
#define GPTM1_TA_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TA_GPTMTnIMR_OFFSET)))

#define GPTM1_BITBANDING_TB_GPTMTnIMR       (((BITBANDING_TB_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32))))
#define GPTM1_TB_GPTMTnIMR                  (((TB_GPTMIMR_TypeDef*)(GPTM1_BASE + GPTM_TB_GPTMTnIMR_OFFSET )))
#define GPTM1_TB_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TB_GPTMTnIMR_OFFSET)))

#define GPTM1_BITBANDING_TW_GPTMTnIMR       (((BITBANDING_TW_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32))))
#define GPTM1_TW_GPTMTnIMR                  (((TW_GPTMIMR_TypeDef*)(GPTM1_BASE + GPTM_TW_GPTMTnIMR_OFFSET )))
#define GPTM1_TW_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TW_GPTMTnIMR_OFFSET)))

/* GPTM2 GPTMIMR*/
#define GPTM2_BITBANDING_GPTMIMR            (((BITBANDING_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMIMR_OFFSET)*32))))
#define GPTM2_GPTMIMR                       (((GPTMIMR_TypeDef*)(GPTM2_BASE + GPTM_GPTMIMR_OFFSET )))
#define GPTM2_GPTMIMR_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMIMR_OFFSET)))

#define GPTM2_BITBANDING_TA_GPTMTnIMR       (((BITBANDING_TA_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32))))
#define GPTM2_TA_GPTMTnIMR                  (((TA_GPTMIMR_TypeDef*)(GPTM2_BASE + GPTM_TA_GPTMTnIMR_OFFSET )))
#define GPTM2_TA_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TA_GPTMTnIMR_OFFSET)))

#define GPTM2_BITBANDING_TB_GPTMTnIMR       (((BITBANDING_TB_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32))))
#define GPTM2_TB_GPTMTnIMR                  (((TB_GPTMIMR_TypeDef*)(GPTM2_BASE + GPTM_TB_GPTMTnIMR_OFFSET )))
#define GPTM2_TB_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TB_GPTMTnIMR_OFFSET)))

#define GPTM2_BITBANDING_TW_GPTMTnIMR       (((BITBANDING_TW_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32))))
#define GPTM2_TW_GPTMTnIMR                  (((TW_GPTMIMR_TypeDef*)(GPTM2_BASE + GPTM_TW_GPTMTnIMR_OFFSET )))
#define GPTM2_TW_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TW_GPTMTnIMR_OFFSET)))

/* GPTM3 GPTMIMR*/
#define GPTM3_BITBANDING_GPTMIMR            (((BITBANDING_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMIMR_OFFSET)*32))))
#define GPTM3_GPTMIMR                       (((GPTMIMR_TypeDef*)(GPTM3_BASE + GPTM_GPTMIMR_OFFSET )))
#define GPTM3_GPTMIMR_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMIMR_OFFSET)))

#define GPTM3_BITBANDING_TA_GPTMTnIMR       (((BITBANDING_TA_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32))))
#define GPTM3_TA_GPTMTnIMR                  (((TA_GPTMIMR_TypeDef*)(GPTM3_BASE + GPTM_TA_GPTMTnIMR_OFFSET )))
#define GPTM3_TA_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TA_GPTMTnIMR_OFFSET)))

#define GPTM3_BITBANDING_TB_GPTMTnIMR       (((BITBANDING_TB_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32))))
#define GPTM3_TB_GPTMTnIMR                  (((TB_GPTMIMR_TypeDef*)(GPTM3_BASE + GPTM_TB_GPTMTnIMR_OFFSET )))
#define GPTM3_TB_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TB_GPTMTnIMR_OFFSET)))

#define GPTM3_BITBANDING_TW_GPTMTnIMR       (((BITBANDING_TW_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32))))
#define GPTM3_TW_GPTMTnIMR                  (((TW_GPTMIMR_TypeDef*)(GPTM3_BASE + GPTM_TW_GPTMTnIMR_OFFSET )))
#define GPTM3_TW_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TW_GPTMTnIMR_OFFSET)))

/* GPTM4 GPTMIMR*/
#define GPTM4_BITBANDING_GPTMIMR            (((BITBANDING_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMIMR_OFFSET)*32))))
#define GPTM4_GPTMIMR                       (((GPTMIMR_TypeDef*)(GPTM4_BASE + GPTM_GPTMIMR_OFFSET )))
#define GPTM4_GPTMIMR_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMIMR_OFFSET)))

#define GPTM4_BITBANDING_TA_GPTMTnIMR       (((BITBANDING_TA_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32))))
#define GPTM4_TA_GPTMTnIMR                  (((TA_GPTMIMR_TypeDef*)(GPTM4_BASE + GPTM_TA_GPTMTnIMR_OFFSET )))
#define GPTM4_TA_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TA_GPTMTnIMR_OFFSET)))

#define GPTM4_BITBANDING_TB_GPTMTnIMR       (((BITBANDING_TB_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32))))
#define GPTM4_TB_GPTMTnIMR                  (((TB_GPTMIMR_TypeDef*)(GPTM4_BASE + GPTM_TB_GPTMTnIMR_OFFSET )))
#define GPTM4_TB_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TB_GPTMTnIMR_OFFSET)))

#define GPTM4_BITBANDING_TW_GPTMTnIMR       (((BITBANDING_TW_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32))))
#define GPTM4_TW_GPTMTnIMR                  (((TW_GPTMIMR_TypeDef*)(GPTM4_BASE + GPTM_TW_GPTMTnIMR_OFFSET )))
#define GPTM4_TW_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TW_GPTMTnIMR_OFFSET)))

/* GPTM5 GPTMIMR*/
#define GPTM5_BITBANDING_GPTMIMR            (((BITBANDING_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMIMR_OFFSET)*32))))
#define GPTM5_GPTMIMR                       (((GPTMIMR_TypeDef*)(GPTM5_BASE + GPTM_GPTMIMR_OFFSET )))
#define GPTM5_GPTMIMR_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMIMR_OFFSET)))

#define GPTM5_BITBANDING_TA_GPTMTnIMR       (((BITBANDING_TA_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32))))
#define GPTM5_TA_GPTMTnIMR                  (((TA_GPTMIMR_TypeDef*)(GPTM5_BASE + GPTM_TA_GPTMTnIMR_OFFSET )))
#define GPTM5_TA_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TA_GPTMTnIMR_OFFSET)))

#define GPTM5_BITBANDING_TB_GPTMTnIMR       (((BITBANDING_TB_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32))))
#define GPTM5_TB_GPTMTnIMR                  (((TB_GPTMIMR_TypeDef*)(GPTM5_BASE + GPTM_TB_GPTMTnIMR_OFFSET )))
#define GPTM5_TB_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TB_GPTMTnIMR_OFFSET)))

#define GPTM5_BITBANDING_TW_GPTMTnIMR       (((BITBANDING_TW_GPTMIMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32))))
#define GPTM5_TW_GPTMTnIMR                  (((TW_GPTMIMR_TypeDef*)(GPTM5_BASE + GPTM_TW_GPTMTnIMR_OFFSET )))
#define GPTM5_TW_GPTMTnIMR_R                (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TW_GPTMTnIMR_OFFSET)))

/* GPWTM0 GPTMIMR*/
#define GPWTM0_BITBANDING_GPTMIMR           (((BITBANDING_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMIMR_OFFSET)*32))))
#define GPWTM0_GPTMIMR                      (((GPTMIMR_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMIMR_OFFSET )))
#define GPWTM0_GPTMIMR_R                    (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMIMR_OFFSET)))

#define GPWTM0_BITBANDING_TA_GPTMTnIMR      (((BITBANDING_TA_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32))))
#define GPWTM0_TA_GPTMTnIMR                 (((TA_GPTMIMR_TypeDef*)(GPWTM0_BASE + GPWTM_TA_GPTMTnIMR_OFFSET )))
#define GPWTM0_TA_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TA_GPTMTnIMR_OFFSET)))

#define GPWTM0_BITBANDING_TB_GPTMTnIMR      (((BITBANDING_TB_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32))))
#define GPWTM0_TB_GPTMTnIMR                 (((TB_GPTMIMR_TypeDef*)(GPWTM0_BASE + GPWTM_TB_GPTMTnIMR_OFFSET )))
#define GPWTM0_TB_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TB_GPTMTnIMR_OFFSET)))

#define GPWTM0_BITBANDING_TW_GPTMTnIMR      (((BITBANDING_TW_GPWTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32))))
#define GPWTM0_TW_GPTMTnIMR                 (((TW_GPWTMIMR_TypeDef*)(GPWTM0_BASE + GPWTM_TW_GPTMTnIMR_OFFSET )))
#define GPWTM0_TW_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TW_GPTMTnIMR_OFFSET)))

/* GPWTM1 GPTMIMR*/
#define GPWTM1_BITBANDING_GPTMIMR           (((BITBANDING_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMIMR_OFFSET)*32))))
#define GPWTM1_GPTMIMR                      (((GPTMIMR_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMIMR_OFFSET )))
#define GPWTM1_GPTMIMR_R                    (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMIMR_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnIMR      (((BITBANDING_TA_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnIMR                 (((TA_GPTMIMR_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnIMR_OFFSET )))
#define GPWTM1_TA_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnIMR_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnIMR      (((BITBANDING_TB_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnIMR                 (((TB_GPTMIMR_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnIMR_OFFSET )))
#define GPWTM1_TB_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnIMR_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnIMR      (((BITBANDING_TW_GPWTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnIMR                 (((TW_GPWTMIMR_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnIMR_OFFSET )))
#define GPWTM1_TW_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnIMR_OFFSET)))

/* GPWTM1 GPTMIMR*/
#define GPWTM1_BITBANDING_GPTMIMR           (((BITBANDING_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMIMR_OFFSET)*32))))
#define GPWTM1_GPTMIMR                      (((GPTMIMR_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMIMR_OFFSET )))
#define GPWTM1_GPTMIMR_R                    (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMIMR_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnIMR      (((BITBANDING_TA_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnIMR                 (((TA_GPTMIMR_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnIMR_OFFSET )))
#define GPWTM1_TA_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnIMR_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnIMR      (((BITBANDING_TB_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnIMR                 (((TB_GPTMIMR_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnIMR_OFFSET )))
#define GPWTM1_TB_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnIMR_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnIMR      (((BITBANDING_TW_GPWTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnIMR                 (((TW_GPWTMIMR_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnIMR_OFFSET )))
#define GPWTM1_TW_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnIMR_OFFSET)))

/* GPWTM2 GPTMIMR*/
#define GPWTM2_BITBANDING_GPTMIMR           (((BITBANDING_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMIMR_OFFSET)*32))))
#define GPWTM2_GPTMIMR                      (((GPTMIMR_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMIMR_OFFSET )))
#define GPWTM2_GPTMIMR_R                    (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMIMR_OFFSET)))

#define GPWTM2_BITBANDING_TA_GPTMTnIMR      (((BITBANDING_TA_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32))))
#define GPWTM2_TA_GPTMTnIMR                 (((TA_GPTMIMR_TypeDef*)(GPWTM2_BASE + GPWTM_TA_GPTMTnIMR_OFFSET )))
#define GPWTM2_TA_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TA_GPTMTnIMR_OFFSET)))

#define GPWTM2_BITBANDING_TB_GPTMTnIMR      (((BITBANDING_TB_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32))))
#define GPWTM2_TB_GPTMTnIMR                 (((TB_GPTMIMR_TypeDef*)(GPWTM2_BASE + GPWTM_TB_GPTMTnIMR_OFFSET )))
#define GPWTM2_TB_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TB_GPTMTnIMR_OFFSET)))

#define GPWTM2_BITBANDING_TW_GPTMTnIMR      (((BITBANDING_TW_GPWTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32))))
#define GPWTM2_TW_GPTMTnIMR                 (((TW_GPWTMIMR_TypeDef*)(GPWTM2_BASE + GPWTM_TW_GPTMTnIMR_OFFSET )))
#define GPWTM2_TW_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TW_GPTMTnIMR_OFFSET)))

/* GPWTM3 GPTMIMR*/
#define GPWTM3_BITBANDING_GPTMIMR           (((BITBANDING_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMIMR_OFFSET)*32))))
#define GPWTM3_GPTMIMR                      (((GPTMIMR_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMIMR_OFFSET )))
#define GPWTM3_GPTMIMR_R                    (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMIMR_OFFSET)))

#define GPWTM3_BITBANDING_TA_GPTMTnIMR      (((BITBANDING_TA_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32))))
#define GPWTM3_TA_GPTMTnIMR                 (((TA_GPTMIMR_TypeDef*)(GPWTM3_BASE + GPWTM_TA_GPTMTnIMR_OFFSET )))
#define GPWTM3_TA_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TA_GPTMTnIMR_OFFSET)))

#define GPWTM3_BITBANDING_TB_GPTMTnIMR      (((BITBANDING_TB_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32))))
#define GPWTM3_TB_GPTMTnIMR                 (((TB_GPTMIMR_TypeDef*)(GPWTM3_BASE + GPWTM_TB_GPTMTnIMR_OFFSET )))
#define GPWTM3_TB_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TB_GPTMTnIMR_OFFSET)))

#define GPWTM3_BITBANDING_TW_GPTMTnIMR      (((BITBANDING_TW_GPWTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32))))
#define GPWTM3_TW_GPTMTnIMR                 (((TW_GPWTMIMR_TypeDef*)(GPWTM3_BASE + GPWTM_TW_GPTMTnIMR_OFFSET )))
#define GPWTM3_TW_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TW_GPTMTnIMR_OFFSET)))

/* GPWTM4 GPTMIMR*/
#define GPWTM4_BITBANDING_GPTMIMR           (((BITBANDING_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMIMR_OFFSET)*32))))
#define GPWTM4_GPTMIMR                      (((GPTMIMR_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMIMR_OFFSET )))
#define GPWTM4_GPTMIMR_R                    (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMIMR_OFFSET)))

#define GPWTM4_BITBANDING_TA_GPTMTnIMR      (((BITBANDING_TA_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32))))
#define GPWTM4_TA_GPTMTnIMR                 (((TA_GPTMIMR_TypeDef*)(GPWTM4_BASE + GPWTM_TA_GPTMTnIMR_OFFSET )))
#define GPWTM4_TA_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TA_GPTMTnIMR_OFFSET)))

#define GPWTM4_BITBANDING_TB_GPTMTnIMR      (((BITBANDING_TB_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32))))
#define GPWTM4_TB_GPTMTnIMR                 (((TB_GPTMIMR_TypeDef*)(GPWTM4_BASE + GPWTM_TB_GPTMTnIMR_OFFSET )))
#define GPWTM4_TB_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TB_GPTMTnIMR_OFFSET)))

#define GPWTM4_BITBANDING_TW_GPTMTnIMR      (((BITBANDING_TW_GPWTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32))))
#define GPWTM4_TW_GPTMTnIMR                 (((TW_GPWTMIMR_TypeDef*)(GPWTM4_BASE + GPWTM_TW_GPTMTnIMR_OFFSET )))
#define GPWTM4_TW_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TW_GPTMTnIMR_OFFSET)))

/* GPWTM5 GPTMIMR*/
#define GPWTM5_BITBANDING_GPTMIMR           (((BITBANDING_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMIMR_OFFSET)*32))))
#define GPWTM5_GPTMIMR                      (((GPTMIMR_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMIMR_OFFSET )))
#define GPWTM5_GPTMIMR_R                    (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMIMR_OFFSET)))

#define GPWTM5_BITBANDING_TA_GPTMTnIMR      (((BITBANDING_TA_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32))))
#define GPWTM5_TA_GPTMTnIMR                 (((TA_GPTMIMR_TypeDef*)(GPWTM5_BASE + GPWTM_TA_GPTMTnIMR_OFFSET )))
#define GPWTM5_TA_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TA_GPTMTnIMR_OFFSET)))

#define GPWTM5_BITBANDING_TB_GPTMTnIMR      (((BITBANDING_TB_GPTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32))))
#define GPWTM5_TB_GPTMTnIMR                 (((TB_GPTMIMR_TypeDef*)(GPWTM5_BASE + GPWTM_TB_GPTMTnIMR_OFFSET )))
#define GPWTM5_TB_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TB_GPTMTnIMR_OFFSET)))

#define GPWTM5_BITBANDING_TW_GPTMTnIMR      (((BITBANDING_TW_GPWTMIMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32))))
#define GPWTM5_TW_GPTMTnIMR                 (((TW_GPWTMIMR_TypeDef*)(GPWTM5_BASE + GPWTM_TW_GPTMTnIMR_OFFSET )))
#define GPWTM5_TW_GPTMTnIMR_R               (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TW_GPTMTnIMR_OFFSET)))

//--------
#define GPTM_GPTMIMR_R_TATOIM_MASK              (0x00000001)
#define GPTM_GPTMIMR_R_TATOIM_BIT               (0)
#define GPTM_GPTMIMR_R_TATOIM_DIS               (0x00000000)
#define GPTM_GPTMIMR_R_TATOIM_EN                (0x00000001)

#define GPTM_GPTMIMR_TATOIM_MASK                (0x00000001)
#define GPTM_GPTMIMR_TATOIM_DIS                 (0x00000000)
#define GPTM_GPTMIMR_TATOIM_EN                  (0x00000001)
//--------

//--------
#define GPTM_GPTMIMR_R_CAMIM_MASK               (0x00000002)
#define GPTM_GPTMIMR_R_CAMIM_BIT                (1)
#define GPTM_GPTMIMR_R_CAMIM_DIS                (0x00000000)
#define GPTM_GPTMIMR_R_CAMIM_EN                 (0x00000002)

#define GPTM_GPTMIMR_CAMIM_MASK                 (0x00000001)
#define GPTM_GPTMIMR_CAMIM_DIS                  (0x00000000)
#define GPTM_GPTMIMR_CAMIM_EN                   (0x00000001)
//--------

//--------
#define GPTM_GPTMIMR_R_CAEIM_MASK               (0x00000004)
#define GPTM_GPTMIMR_R_CAEIM_BIT                (2)
#define GPTM_GPTMIMR_R_CAEIM_DIS                (0x00000000)
#define GPTM_GPTMIMR_R_CAEIM_EN                 (0x00000004)

#define GPTM_GPTMIMR_CAEIM_MASK                 (0x00000001)
#define GPTM_GPTMIMR_CAEIM_DIS                  (0x00000000)
#define GPTM_GPTMIMR_CAEIM_EN                   (0x00000001)
//--------

//--------
#define GPTM_GPTMIMR_R_RTCIM_MASK               (0x00000008)
#define GPTM_GPTMIMR_R_RTCIM_BIT                (3)
#define GPTM_GPTMIMR_R_RTCIM_DIS                (0x00000000)
#define GPTM_GPTMIMR_R_RTCIM_EN                 (0x00000008)

#define GPTM_GPTMIMR_RTCIM_MASK                 (0x00000001)
#define GPTM_GPTMIMR_RTCIM_DIS                  (0x00000000)
#define GPTM_GPTMIMR_RTCIM_EN                   (0x00000001)
//--------

//--------
#define GPTM_GPTMIMR_R_TAMIM_MASK               (0x00000010)
#define GPTM_GPTMIMR_R_TAMIM_BIT                (4)
#define GPTM_GPTMIMR_R_TAMIM_DIS                (0x00000000)
#define GPTM_GPTMIMR_R_TAMIM_EN                 (0x00000010)

#define GPTM_GPTMIMR_TAMIM_MASK                 (0x00000001)
#define GPTM_GPTMIMR_TAMIM_DIS                  (0x00000000)
#define GPTM_GPTMIMR_TAMIM_EN                   (0x00000001)
//--------

//--------
#define GPTM_GPTMIMR_R_TBTOIM_MASK              (0x00000100)
#define GPTM_GPTMIMR_R_TBTOIM_BIT               (8)
#define GPTM_GPTMIMR_R_TBTOIM_DIS               (0x00000000)
#define GPTM_GPTMIMR_R_TBTOIM_EN                (0x00000100)

#define GPTM_GPTMIMR_TBTOIM_MASK                (0x00000001)
#define GPTM_GPTMIMR_TBTOIM_DIS                 (0x00000000)
#define GPTM_GPTMIMR_TBTOIM_EN                  (0x00000001)
//--------

//--------
#define GPTM_GPTMIMR_R_CBMIM_MASK               (0x00000200)
#define GPTM_GPTMIMR_R_CBMIM_BIT                (9)
#define GPTM_GPTMIMR_R_CBMIM_DIS                (0x00000000)
#define GPTM_GPTMIMR_R_CBMIM_EN                 (0x00000200)

#define GPTM_GPTMIMR_CBMIM_MASK                 (0x00000001)
#define GPTM_GPTMIMR_CBMIM_DIS                  (0x00000000)
#define GPTM_GPTMIMR_CBMIM_EN                   (0x00000001)
//--------

//--------
#define GPTM_GPTMIMR_R_CBEIM_MASK               (0x00000400)
#define GPTM_GPTMIMR_R_CBEIM_BIT                (10)
#define GPTM_GPTMIMR_R_CBEIM_DIS                (0x00000000)
#define GPTM_GPTMIMR_R_CBEIM_EN                 (0x00000400)

#define GPTM_GPTMIMR_CBEIM_MASK                 (0x00000001)
#define GPTM_GPTMIMR_CBEIM_DIS                  (0x00000000)
#define GPTM_GPTMIMR_CBEIM_EN                   (0x00000001)
//--------

//--------
#define GPTM_GPTMIMR_R_TBMIM_MASK               (0x00000800)
#define GPTM_GPTMIMR_R_TBMIM_BIT                (11)
#define GPTM_GPTMIMR_R_TBMIM_DIS                (0x00000000)
#define GPTM_GPTMIMR_R_TBMIM_EN                 (0x00000800)

#define GPTM_GPTMIMR_TBMIM_MASK                 (0x00000001)
#define GPTM_GPTMIMR_TBMIM_DIS                  (0x00000000)
#define GPTM_GPTMIMR_TBMIM_EN                   (0x00000001)
//--------

//--------
#define GPTM_GPTMIMR_R_WUEIM_MASK               (0x00010000)
#define GPTM_GPTMIMR_R_WUEIM_BIT                (16)
#define GPTM_GPTMIMR_R_WUEIM_DIS                (0x00000000)
#define GPTM_GPTMIMR_R_WUEIM_EN                 (0x00010000)

#define GPTM_GPTMIMR_WUEIM_MASK                 (0x00000001)
#define GPTM_GPTMIMR_WUEIM_DIS                  (0x00000000)
#define GPTM_GPTMIMR_WUEIM_EN                   (0x00000001)
//--------


//--------
#define GPTM_TA_GPTMTnIMR_R_TnTOIM_MASK              (0x00000001)
#define GPTM_TA_GPTMTnIMR_R_TnTOIM_BIT               (0)
#define GPTM_TA_GPTMTnIMR_R_TnTOIM_DIS               (0x00000000)
#define GPTM_TA_GPTMTnIMR_R_TnTOIM_EN                (0x00000001)

#define GPTM_TA_GPTMTnIMR_TnTOIM_MASK                (0x00000001)
#define GPTM_TA_GPTMTnIMR_TnTOIM_DIS                 (0x00000000)
#define GPTM_TA_GPTMTnIMR_TnTOIM_EN                  (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnIMR_R_CnMIM_MASK               (0x00000002)
#define GPTM_TA_GPTMTnIMR_R_CnMIM_BIT                (1)
#define GPTM_TA_GPTMTnIMR_R_CnMIM_DIS                (0x00000000)
#define GPTM_TA_GPTMTnIMR_R_CnMIM_EN                 (0x00000002)

#define GPTM_TA_GPTMTnIMR_CnMIM_MASK                 (0x00000001)
#define GPTM_TA_GPTMTnIMR_CnMIM_DIS                  (0x00000000)
#define GPTM_TA_GPTMTnIMR_CnMIM_EN                   (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnIMR_R_CnEIM_MASK               (0x00000004)
#define GPTM_TA_GPTMTnIMR_R_CnEIM_BIT                (2)
#define GPTM_TA_GPTMTnIMR_R_CnEIM_DIS                (0x00000000)
#define GPTM_TA_GPTMTnIMR_R_CnEIM_EN                 (0x00000004)

#define GPTM_TA_GPTMTnIMR_CnEIM_MASK                 (0x00000001)
#define GPTM_TA_GPTMTnIMR_CnEIM_DIS                  (0x00000000)
#define GPTM_TA_GPTMTnIMR_CnEIM_EN                   (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnIMR_R_TnMIM_MASK               (0x00000010)
#define GPTM_TA_GPTMTnIMR_R_TnMIM_BIT                (4)
#define GPTM_TA_GPTMTnIMR_R_TnMIM_DIS                (0x00000000)
#define GPTM_TA_GPTMTnIMR_R_TnMIM_EN                 (0x00000010)

#define GPTM_TA_GPTMTnIMR_TnMIM_MASK                 (0x00000001)
#define GPTM_TA_GPTMTnIMR_TnMIM_DIS                  (0x00000000)
#define GPTM_TA_GPTMTnIMR_TnMIM_EN                   (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnIMR_R_TnTOIM_MASK              (0x00000100)
#define GPTM_TB_GPTMTnIMR_R_TnTOIM_BIT               (8)
#define GPTM_TB_GPTMTnIMR_R_TnTOIM_DIS               (0x00000000)
#define GPTM_TB_GPTMTnIMR_R_TnTOIM_EN                (0x00000100)

#define GPTM_TB_GPTMTnIMR_TnTOIM_MASK                (0x00000001)
#define GPTM_TB_GPTMTnIMR_TnTOIM_DIS                 (0x00000000)
#define GPTM_TB_GPTMTnIMR_TnTOIM_EN                  (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnIMR_R_CnMIM_MASK               (0x00000200)
#define GPTM_TB_GPTMTnIMR_R_CnMIM_BIT                (9)
#define GPTM_TB_GPTMTnIMR_R_CnMIM_DIS                (0x00000000)
#define GPTM_TB_GPTMTnIMR_R_CnMIM_EN                 (0x00000200)

#define GPTM_TB_GPTMTnIMR_CnMIM_MASK                 (0x00000001)
#define GPTM_TB_GPTMTnIMR_CnMIM_DIS                  (0x00000000)
#define GPTM_TB_GPTMTnIMR_CnMIM_EN                   (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnIMR_R_CnEIM_MASK               (0x00000400)
#define GPTM_TB_GPTMTnIMR_R_CnEIM_BIT                (10)
#define GPTM_TB_GPTMTnIMR_R_CnEIM_DIS                (0x00000000)
#define GPTM_TB_GPTMTnIMR_R_CnEIM_EN                 (0x00000400)

#define GPTM_TB_GPTMTnIMR_CnEIM_MASK                 (0x00000001)
#define GPTM_TB_GPTMTnIMR_CnEIM_DIS                  (0x00000000)
#define GPTM_TB_GPTMTnIMR_CnEIM_EN                   (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnIMR_R_TnMIM_MASK               (0x00000800)
#define GPTM_TB_GPTMTnIMR_R_TnMIM_BIT                (11)
#define GPTM_TB_GPTMTnIMR_R_TnMIM_DIS                (0x00000000)
#define GPTM_TB_GPTMTnIMR_R_TnMIM_EN                 (0x00000800)

#define GPTM_TB_GPTMTnIMR_TnMIM_MASK                 (0x00000001)
#define GPTM_TB_GPTMTnIMR_TnMIM_DIS                  (0x00000000)
#define GPTM_TB_GPTMTnIMR_TnMIM_EN                   (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnIMR_R_TnTOIM_MASK              (0x00000001)
#define GPTM_TW_GPTMTnIMR_R_TnTOIM_BIT               (0)
#define GPTM_TW_GPTMTnIMR_R_TnTOIM_DIS               (0x00000000)
#define GPTM_TW_GPTMTnIMR_R_TnTOIM_EN                (0x00000001)

#define GPTM_TW_GPTMTnIMR_TnTOIM_MASK                (0x00000001)
#define GPTM_TW_GPTMTnIMR_TnTOIM_DIS                 (0x00000000)
#define GPTM_TW_GPTMTnIMR_TnTOIM_EN                  (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnIMR_R_CnMIM_MASK               (0x00000002)
#define GPTM_TW_GPTMTnIMR_R_CnMIM_BIT                (1)
#define GPTM_TW_GPTMTnIMR_R_CnMIM_DIS                (0x00000000)
#define GPTM_TW_GPTMTnIMR_R_CnMIM_EN                 (0x00000002)

#define GPTM_TW_GPTMTnIMR_CnMIM_MASK                 (0x00000001)
#define GPTM_TW_GPTMTnIMR_CnMIM_DIS                  (0x00000000)
#define GPTM_TW_GPTMTnIMR_CnMIM_EN                   (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnIMR_R_CnEIM_MASK               (0x00000004)
#define GPTM_TW_GPTMTnIMR_R_CnEIM_BIT                (2)
#define GPTM_TW_GPTMTnIMR_R_CnEIM_DIS                (0x00000000)
#define GPTM_TW_GPTMTnIMR_R_CnEIM_EN                 (0x00000004)

#define GPTM_TW_GPTMTnIMR_CnEIM_MASK                 (0x00000001)
#define GPTM_TW_GPTMTnIMR_CnEIM_DIS                  (0x00000000)
#define GPTM_TW_GPTMTnIMR_CnEIM_EN                   (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnIMR_R_RTCIM_MASK               (0x00000008)
#define GPTM_TW_GPTMTnIMR_R_RTCIM_BIT                (3)
#define GPTM_TW_GPTMTnIMR_R_RTCIM_DIS                (0x00000000)
#define GPTM_TW_GPTMTnIMR_R_RTCIM_EN                 (0x00000008)

#define GPTM_TW_GPTMTnIMR_RTCIM_MASK                 (0x00000001)
#define GPTM_TW_GPTMTnIMR_RTCIM_DIS                  (0x00000000)
#define GPTM_TW_GPTMTnIMR_RTCIM_EN                   (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnIMR_R_TnMIM_MASK               (0x00000010)
#define GPTM_TW_GPTMTnIMR_R_TnMIM_BIT                (4)
#define GPTM_TW_GPTMTnIMR_R_TnMIM_DIS                (0x00000000)
#define GPTM_TW_GPTMTnIMR_R_TnMIM_EN                 (0x00000010)

#define GPTM_TW_GPTMTnIMR_TnMIM_MASK                 (0x00000001)
#define GPTM_TW_GPTMTnIMR_TnMIM_DIS                  (0x00000000)
#define GPTM_TW_GPTMTnIMR_TnMIM_EN                   (0x00000001)
//--------

//--------
#define GPWTM_GPTMIMR_R_TATOIM_MASK              (0x00000001)
#define GPWTM_GPTMIMR_R_TATOIM_BIT               (0)
#define GPWTM_GPTMIMR_R_TATOIM_DIS               (0x00000000)
#define GPWTM_GPTMIMR_R_TATOIM_EN                (0x00000001)

#define GPWTM_GPTMIMR_TATOIM_MASK                (0x00000001)
#define GPWTM_GPTMIMR_TATOIM_DIS                 (0x00000000)
#define GPWTM_GPTMIMR_TATOIM_EN                  (0x00000001)
//--------

//--------
#define GPWTM_GPTMIMR_R_CAMIM_MASK               (0x00000002)
#define GPWTM_GPTMIMR_R_CAMIM_BIT                (1)
#define GPWTM_GPTMIMR_R_CAMIM_DIS                (0x00000000)
#define GPWTM_GPTMIMR_R_CAMIM_EN                 (0x00000002)

#define GPWTM_GPTMIMR_CAMIM_MASK                 (0x00000001)
#define GPWTM_GPTMIMR_CAMIM_DIS                  (0x00000000)
#define GPWTM_GPTMIMR_CAMIM_EN                   (0x00000001)
//--------

//--------
#define GPWTM_GPTMIMR_R_CAEIM_MASK               (0x00000004)
#define GPWTM_GPTMIMR_R_CAEIM_BIT                (2)
#define GPWTM_GPTMIMR_R_CAEIM_DIS                (0x00000000)
#define GPWTM_GPTMIMR_R_CAEIM_EN                 (0x00000004)

#define GPWTM_GPTMIMR_CAEIM_MASK                 (0x00000001)
#define GPWTM_GPTMIMR_CAEIM_DIS                  (0x00000000)
#define GPWTM_GPTMIMR_CAEIM_EN                   (0x00000001)
//--------

//--------
#define GPWTM_GPTMIMR_R_RTCIM_MASK               (0x00000008)
#define GPWTM_GPTMIMR_R_RTCIM_BIT                (3)
#define GPWTM_GPTMIMR_R_RTCIM_DIS                (0x00000000)
#define GPWTM_GPTMIMR_R_RTCIM_EN                 (0x00000008)

#define GPWTM_GPTMIMR_RTCIM_MASK                 (0x00000001)
#define GPWTM_GPTMIMR_RTCIM_DIS                  (0x00000000)
#define GPWTM_GPTMIMR_RTCIM_EN                   (0x00000001)
//--------

//--------
#define GPWTM_GPTMIMR_R_TAMIM_MASK               (0x00000010)
#define GPWTM_GPTMIMR_R_TAMIM_BIT                (4)
#define GPWTM_GPTMIMR_R_TAMIM_DIS                (0x00000000)
#define GPWTM_GPTMIMR_R_TAMIM_EN                 (0x00000010)

#define GPWTM_GPTMIMR_TAMIM_MASK                 (0x00000001)
#define GPWTM_GPTMIMR_TAMIM_DIS                  (0x00000000)
#define GPWTM_GPTMIMR_TAMIM_EN                   (0x00000001)
//--------

//--------
#define GPWTM_GPTMIMR_R_TBTOIM_MASK              (0x00000100)
#define GPWTM_GPTMIMR_R_TBTOIM_BIT               (8)
#define GPWTM_GPTMIMR_R_TBTOIM_DIS               (0x00000000)
#define GPWTM_GPTMIMR_R_TBTOIM_EN                (0x00000100)

#define GPWTM_GPTMIMR_TBTOIM_MASK                (0x00000001)
#define GPWTM_GPTMIMR_TBTOIM_DIS                 (0x00000000)
#define GPWTM_GPTMIMR_TBTOIM_EN                  (0x00000001)
//--------

//--------
#define GPWTM_GPTMIMR_R_CBMIM_MASK               (0x00000200)
#define GPWTM_GPTMIMR_R_CBMIM_BIT                (9)
#define GPWTM_GPTMIMR_R_CBMIM_DIS                (0x00000000)
#define GPWTM_GPTMIMR_R_CBMIM_EN                 (0x00000200)

#define GPWTM_GPTMIMR_CBMIM_MASK                 (0x00000001)
#define GPWTM_GPTMIMR_CBMIM_DIS                  (0x00000000)
#define GPWTM_GPTMIMR_CBMIM_EN                   (0x00000001)
//--------

//--------
#define GPWTM_GPTMIMR_R_CBEIM_MASK               (0x00000400)
#define GPWTM_GPTMIMR_R_CBEIM_BIT                (10)
#define GPWTM_GPTMIMR_R_CBEIM_DIS                (0x00000000)
#define GPWTM_GPTMIMR_R_CBEIM_EN                 (0x00000400)

#define GPWTM_GPTMIMR_CBEIM_MASK                 (0x00000001)
#define GPWTM_GPTMIMR_CBEIM_DIS                  (0x00000000)
#define GPWTM_GPTMIMR_CBEIM_EN                   (0x00000001)
//--------

//--------
#define GPWTM_GPTMIMR_R_TBMIM_MASK               (0x00000800)
#define GPWTM_GPTMIMR_R_TBMIM_BIT                (11)
#define GPWTM_GPTMIMR_R_TBMIM_DIS                (0x00000000)
#define GPWTM_GPTMIMR_R_TBMIM_EN                 (0x00000800)

#define GPWTM_GPTMIMR_TBMIM_MASK                 (0x00000001)
#define GPWTM_GPTMIMR_TBMIM_DIS                  (0x00000000)
#define GPWTM_GPTMIMR_TBMIM_EN                   (0x00000001)
//--------

//--------
#define GPWTM_GPTMIMR_R_WUEIM_MASK               (0x00010000)
#define GPWTM_GPTMIMR_R_WUEIM_BIT                (16)
#define GPWTM_GPTMIMR_R_WUEIM_DIS                (0x00000000)
#define GPWTM_GPTMIMR_R_WUEIM_EN                 (0x00010000)

#define GPWTM_GPTMIMR_WUEIM_MASK                 (0x00000001)
#define GPWTM_GPTMIMR_WUEIM_DIS                  (0x00000000)
#define GPWTM_GPTMIMR_WUEIM_EN                   (0x00000001)
//--------


//--------
#define GPWTM_TA_GPTMTnIMR_R_TnTOIM_MASK              (0x00000001)
#define GPWTM_TA_GPTMTnIMR_R_TnTOIM_BIT               (0)
#define GPWTM_TA_GPTMTnIMR_R_TnTOIM_DIS               (0x00000000)
#define GPWTM_TA_GPTMTnIMR_R_TnTOIM_EN                (0x00000001)

#define GPWTM_TA_GPTMTnIMR_TnTOIM_MASK                (0x00000001)
#define GPWTM_TA_GPTMTnIMR_TnTOIM_DIS                 (0x00000000)
#define GPWTM_TA_GPTMTnIMR_TnTOIM_EN                  (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnIMR_R_CnMIM_MASK               (0x00000002)
#define GPWTM_TA_GPTMTnIMR_R_CnMIM_BIT                (1)
#define GPWTM_TA_GPTMTnIMR_R_CnMIM_DIS                (0x00000000)
#define GPWTM_TA_GPTMTnIMR_R_CnMIM_EN                 (0x00000002)

#define GPWTM_TA_GPTMTnIMR_CnMIM_MASK                 (0x00000001)
#define GPWTM_TA_GPTMTnIMR_CnMIM_DIS                  (0x00000000)
#define GPWTM_TA_GPTMTnIMR_CnMIM_EN                   (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnIMR_R_CnEIM_MASK               (0x00000004)
#define GPWTM_TA_GPTMTnIMR_R_CnEIM_BIT                (2)
#define GPWTM_TA_GPTMTnIMR_R_CnEIM_DIS                (0x00000000)
#define GPWTM_TA_GPTMTnIMR_R_CnEIM_EN                 (0x00000004)

#define GPWTM_TA_GPTMTnIMR_CnEIM_MASK                 (0x00000001)
#define GPWTM_TA_GPTMTnIMR_CnEIM_DIS                  (0x00000000)
#define GPWTM_TA_GPTMTnIMR_CnEIM_EN                   (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnIMR_R_TnMIM_MASK               (0x00000010)
#define GPWTM_TA_GPTMTnIMR_R_TnMIM_BIT                (4)
#define GPWTM_TA_GPTMTnIMR_R_TnMIM_DIS                (0x00000000)
#define GPWTM_TA_GPTMTnIMR_R_TnMIM_EN                 (0x00000010)

#define GPWTM_TA_GPTMTnIMR_TnMIM_MASK                 (0x00000001)
#define GPWTM_TA_GPTMTnIMR_TnMIM_DIS                  (0x00000000)
#define GPWTM_TA_GPTMTnIMR_TnMIM_EN                   (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnIMR_R_TnTOIM_MASK              (0x00000100)
#define GPWTM_TB_GPTMTnIMR_R_TnTOIM_BIT               (8)
#define GPWTM_TB_GPTMTnIMR_R_TnTOIM_DIS               (0x00000000)
#define GPWTM_TB_GPTMTnIMR_R_TnTOIM_EN                (0x00000100)

#define GPWTM_TB_GPTMTnIMR_TnTOIM_MASK                (0x00000001)
#define GPWTM_TB_GPTMTnIMR_TnTOIM_DIS                 (0x00000000)
#define GPWTM_TB_GPTMTnIMR_TnTOIM_EN                  (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnIMR_R_CnMIM_MASK               (0x00000200)
#define GPWTM_TB_GPTMTnIMR_R_CnMIM_BIT                (9)
#define GPWTM_TB_GPTMTnIMR_R_CnMIM_DIS                (0x00000000)
#define GPWTM_TB_GPTMTnIMR_R_CnMIM_EN                 (0x00000200)

#define GPWTM_TB_GPTMTnIMR_CnMIM_MASK                 (0x00000001)
#define GPWTM_TB_GPTMTnIMR_CnMIM_DIS                  (0x00000000)
#define GPWTM_TB_GPTMTnIMR_CnMIM_EN                   (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnIMR_R_CnEIM_MASK               (0x00000400)
#define GPWTM_TB_GPTMTnIMR_R_CnEIM_BIT                (10)
#define GPWTM_TB_GPTMTnIMR_R_CnEIM_DIS                (0x00000000)
#define GPWTM_TB_GPTMTnIMR_R_CnEIM_EN                 (0x00000400)

#define GPWTM_TB_GPTMTnIMR_CnEIM_MASK                 (0x00000001)
#define GPWTM_TB_GPTMTnIMR_CnEIM_DIS                  (0x00000000)
#define GPWTM_TB_GPTMTnIMR_CnEIM_EN                   (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnIMR_R_TnMIM_MASK               (0x00000800)
#define GPWTM_TB_GPTMTnIMR_R_TnMIM_BIT                (11)
#define GPWTM_TB_GPTMTnIMR_R_TnMIM_DIS                (0x00000000)
#define GPWTM_TB_GPTMTnIMR_R_TnMIM_EN                 (0x00000800)

#define GPWTM_TB_GPTMTnIMR_TnMIM_MASK                 (0x00000001)
#define GPWTM_TB_GPTMTnIMR_TnMIM_DIS                  (0x00000000)
#define GPWTM_TB_GPTMTnIMR_TnMIM_EN                   (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnIMR_R_TnTOIM_MASK              (0x00000001)
#define GPWTM_TW_GPTMTnIMR_R_TnTOIM_BIT               (0)
#define GPWTM_TW_GPTMTnIMR_R_TnTOIM_DIS               (0x00000000)
#define GPWTM_TW_GPTMTnIMR_R_TnTOIM_EN                (0x00000001)

#define GPWTM_TW_GPTMTnIMR_TnTOIM_MASK                (0x00000001)
#define GPWTM_TW_GPTMTnIMR_TnTOIM_DIS                 (0x00000000)
#define GPWTM_TW_GPTMTnIMR_TnTOIM_EN                  (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnIMR_R_CnMIM_MASK               (0x00000002)
#define GPWTM_TW_GPTMTnIMR_R_CnMIM_BIT                (1)
#define GPWTM_TW_GPTMTnIMR_R_CnMIM_DIS                (0x00000000)
#define GPWTM_TW_GPTMTnIMR_R_CnMIM_EN                 (0x00000002)

#define GPWTM_TW_GPTMTnIMR_CnMIM_MASK                 (0x00000001)
#define GPWTM_TW_GPTMTnIMR_CnMIM_DIS                  (0x00000000)
#define GPWTM_TW_GPTMTnIMR_CnMIM_EN                   (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnIMR_R_CnEIM_MASK               (0x00000004)
#define GPWTM_TW_GPTMTnIMR_R_CnEIM_BIT                (2)
#define GPWTM_TW_GPTMTnIMR_R_CnEIM_DIS                (0x00000000)
#define GPWTM_TW_GPTMTnIMR_R_CnEIM_EN                 (0x00000004)

#define GPWTM_TW_GPTMTnIMR_CnEIM_MASK                 (0x00000001)
#define GPWTM_TW_GPTMTnIMR_CnEIM_DIS                  (0x00000000)
#define GPWTM_TW_GPTMTnIMR_CnEIM_EN                   (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnIMR_R_RTCIM_MASK               (0x00000008)
#define GPWTM_TW_GPTMTnIMR_R_RTCIM_BIT                (3)
#define GPWTM_TW_GPTMTnIMR_R_RTCIM_DIS                (0x00000000)
#define GPWTM_TW_GPTMTnIMR_R_RTCIM_EN                 (0x00000008)

#define GPWTM_TW_GPTMTnIMR_RTCIM_MASK                 (0x00000001)
#define GPWTM_TW_GPTMTnIMR_RTCIM_DIS                  (0x00000000)
#define GPWTM_TW_GPTMTnIMR_RTCIM_EN                   (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnIMR_R_TnMIM_MASK               (0x00000010)
#define GPWTM_TW_GPTMTnIMR_R_TnMIM_BIT                (4)
#define GPWTM_TW_GPTMTnIMR_R_TnMIM_DIS                (0x00000000)
#define GPWTM_TW_GPTMTnIMR_R_TnMIM_EN                 (0x00000010)

#define GPWTM_TW_GPTMTnIMR_TnMIM_MASK                 (0x00000001)
#define GPWTM_TW_GPTMTnIMR_TnMIM_DIS                  (0x00000000)
#define GPWTM_TW_GPTMTnIMR_TnMIM_EN                   (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnIMR_R_WUEIM_MASK               (0x00010000)
#define GPWTM_TW_GPTMTnIMR_R_WUEIM_BIT                (16)
#define GPWTM_TW_GPTMTnIMR_R_WUEIM_DIS                (0x00000000)
#define GPWTM_TW_GPTMTnIMR_R_WUEIM_EN                 (0x00010000)

#define GPWTM_TW_GPTMTnIMR_WUEIM_MASK                 (0x00000001)
#define GPWTM_TW_GPTMTnIMR_WUEIM_DIS                  (0x00000000)
#define GPWTM_TW_GPTMTnIMR_WUEIM_EN                   (0x00000001)
//--------

/* GPTM0 BITBANDING GPTMIMR*/
#define GPTM0_BITBANDING_GPTMIMR_TATOIM             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TATOIM_BIT*4))))
#define GPTM0_BITBANDING_GPTMIMR_CAMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CAMIM_BIT*4))))
#define GPTM0_BITBANDING_GPTMIMR_CAEIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CAEIM_BIT*4))))
#define GPTM0_BITBANDING_GPTMIMR_RTCIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_RTCIM_BIT*4))))
#define GPTM0_BITBANDING_GPTMIMR_TAMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TAMIM_BIT*4))))
#define GPTM0_BITBANDING_GPTMIMR_TBTOIM             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TBTOIM_BIT*4))))
#define GPTM0_BITBANDING_GPTMIMR_CBMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CBMIM_BIT*4))))
#define GPTM0_BITBANDING_GPTMIMR_CBEIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CBEIM_BIT*4))))
#define GPTM0_BITBANDING_GPTMIMR_TBMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TBMIM_BIT*4))))
#define GPTM0_BITBANDING_GPTMIMR_WUEIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_WUEIM_BIT*4))))

#define GPTM0_BITBANDING_TA_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPTM0_BITBANDING_TB_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPTM0_BITBANDING_TW_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnIMR_RTCIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_RTCIM_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_TnMIM_BIT*4))))

/* GPTM1 BITBANDING GPTMIMR*/
#define GPTM1_BITBANDING_GPTMIMR_TATOIM             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TATOIM_BIT*4))))
#define GPTM1_BITBANDING_GPTMIMR_CAMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CAMIM_BIT*4))))
#define GPTM1_BITBANDING_GPTMIMR_CAEIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CAEIM_BIT*4))))
#define GPTM1_BITBANDING_GPTMIMR_RTCIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_RTCIM_BIT*4))))
#define GPTM1_BITBANDING_GPTMIMR_TAMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TAMIM_BIT*4))))
#define GPTM1_BITBANDING_GPTMIMR_TBTOIM             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TBTOIM_BIT*4))))
#define GPTM1_BITBANDING_GPTMIMR_CBMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CBMIM_BIT*4))))
#define GPTM1_BITBANDING_GPTMIMR_CBEIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CBEIM_BIT*4))))
#define GPTM1_BITBANDING_GPTMIMR_TBMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TBMIM_BIT*4))))
#define GPTM1_BITBANDING_GPTMIMR_WUEIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_WUEIM_BIT*4))))

#define GPTM1_BITBANDING_TA_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPTM1_BITBANDING_TB_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPTM1_BITBANDING_TW_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnIMR_RTCIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_RTCIM_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_TnMIM_BIT*4))))

/* GPTM2 BITBANDING GPTMIMR*/
#define GPTM2_BITBANDING_GPTMIMR_TATOIM             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TATOIM_BIT*4))))
#define GPTM2_BITBANDING_GPTMIMR_CAMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CAMIM_BIT*4))))
#define GPTM2_BITBANDING_GPTMIMR_CAEIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CAEIM_BIT*4))))
#define GPTM2_BITBANDING_GPTMIMR_RTCIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_RTCIM_BIT*4))))
#define GPTM2_BITBANDING_GPTMIMR_TAMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TAMIM_BIT*4))))
#define GPTM2_BITBANDING_GPTMIMR_TBTOIM             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TBTOIM_BIT*4))))
#define GPTM2_BITBANDING_GPTMIMR_CBMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CBMIM_BIT*4))))
#define GPTM2_BITBANDING_GPTMIMR_CBEIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CBEIM_BIT*4))))
#define GPTM2_BITBANDING_GPTMIMR_TBMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TBMIM_BIT*4))))
#define GPTM2_BITBANDING_GPTMIMR_WUEIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_WUEIM_BIT*4))))

#define GPTM2_BITBANDING_TA_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPTM2_BITBANDING_TB_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPTM2_BITBANDING_TW_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnIMR_RTCIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_RTCIM_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_TnMIM_BIT*4))))

/* GPTM3 BITBANDING GPTMIMR*/
#define GPTM3_BITBANDING_GPTMIMR_TATOIM             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TATOIM_BIT*4))))
#define GPTM3_BITBANDING_GPTMIMR_CAMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CAMIM_BIT*4))))
#define GPTM3_BITBANDING_GPTMIMR_CAEIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CAEIM_BIT*4))))
#define GPTM3_BITBANDING_GPTMIMR_RTCIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_RTCIM_BIT*4))))
#define GPTM3_BITBANDING_GPTMIMR_TAMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TAMIM_BIT*4))))
#define GPTM3_BITBANDING_GPTMIMR_TBTOIM             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TBTOIM_BIT*4))))
#define GPTM3_BITBANDING_GPTMIMR_CBMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CBMIM_BIT*4))))
#define GPTM3_BITBANDING_GPTMIMR_CBEIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CBEIM_BIT*4))))
#define GPTM3_BITBANDING_GPTMIMR_TBMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TBMIM_BIT*4))))
#define GPTM3_BITBANDING_GPTMIMR_WUEIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_WUEIM_BIT*4))))

#define GPTM3_BITBANDING_TA_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPTM3_BITBANDING_TB_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPTM3_BITBANDING_TW_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnIMR_RTCIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_RTCIM_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_TnMIM_BIT*4))))

/* GPTM4 BITBANDING GPTMIMR*/
#define GPTM4_BITBANDING_GPTMIMR_TATOIM             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TATOIM_BIT*4))))
#define GPTM4_BITBANDING_GPTMIMR_CAMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CAMIM_BIT*4))))
#define GPTM4_BITBANDING_GPTMIMR_CAEIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CAEIM_BIT*4))))
#define GPTM4_BITBANDING_GPTMIMR_RTCIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_RTCIM_BIT*4))))
#define GPTM4_BITBANDING_GPTMIMR_TAMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TAMIM_BIT*4))))
#define GPTM4_BITBANDING_GPTMIMR_TBTOIM             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TBTOIM_BIT*4))))
#define GPTM4_BITBANDING_GPTMIMR_CBMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CBMIM_BIT*4))))
#define GPTM4_BITBANDING_GPTMIMR_CBEIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CBEIM_BIT*4))))
#define GPTM4_BITBANDING_GPTMIMR_TBMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TBMIM_BIT*4))))
#define GPTM4_BITBANDING_GPTMIMR_WUEIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_WUEIM_BIT*4))))

#define GPTM4_BITBANDING_TA_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPTM4_BITBANDING_TB_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPTM4_BITBANDING_TW_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnIMR_RTCIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_RTCIM_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_TnMIM_BIT*4))))

/* GPTM5 BITBANDING GPTMIMR*/
#define GPTM5_BITBANDING_GPTMIMR_TATOIM             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TATOIM_BIT*4))))
#define GPTM5_BITBANDING_GPTMIMR_CAMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CAMIM_BIT*4))))
#define GPTM5_BITBANDING_GPTMIMR_CAEIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CAEIM_BIT*4))))
#define GPTM5_BITBANDING_GPTMIMR_RTCIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_RTCIM_BIT*4))))
#define GPTM5_BITBANDING_GPTMIMR_TAMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TAMIM_BIT*4))))
#define GPTM5_BITBANDING_GPTMIMR_TBTOIM             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TBTOIM_BIT*4))))
#define GPTM5_BITBANDING_GPTMIMR_CBMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CBMIM_BIT*4))))
#define GPTM5_BITBANDING_GPTMIMR_CBEIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_CBEIM_BIT*4))))
#define GPTM5_BITBANDING_GPTMIMR_TBMIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_TBMIM_BIT*4))))
#define GPTM5_BITBANDING_GPTMIMR_WUEIM              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMIMR_OFFSET)*32)+(GPTM_GPTMIMR_R_WUEIM_BIT*4))))

#define GPTM5_BITBANDING_TA_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnIMR_OFFSET)*32)+(GPTM_TA_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPTM5_BITBANDING_TB_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnIMR_OFFSET)*32)+(GPTM_TB_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPTM5_BITBANDING_TW_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnIMR_RTCIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_RTCIM_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnIMR_OFFSET)*32)+(GPTM_TW_GPTMTnIMR_R_TnMIM_BIT*4))))

/* GPTM0 BITBANDING GPTMIMR*/
#define GPWTM0_BITBANDING_GPTMIMR_TATOIM             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TATOIM_BIT*4))))
#define GPWTM0_BITBANDING_GPTMIMR_CAMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CAMIM_BIT*4))))
#define GPWTM0_BITBANDING_GPTMIMR_CAEIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CAEIM_BIT*4))))
#define GPWTM0_BITBANDING_GPTMIMR_RTCIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_RTCIM_BIT*4))))
#define GPWTM0_BITBANDING_GPTMIMR_TAMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TAMIM_BIT*4))))
#define GPWTM0_BITBANDING_GPTMIMR_TBTOIM             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TBTOIM_BIT*4))))
#define GPWTM0_BITBANDING_GPTMIMR_CBMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CBMIM_BIT*4))))
#define GPWTM0_BITBANDING_GPTMIMR_CBEIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CBEIM_BIT*4))))
#define GPWTM0_BITBANDING_GPTMIMR_TBMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TBMIM_BIT*4))))
#define GPWTM0_BITBANDING_GPTMIMR_WUEIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_WUEIM_BIT*4))))

#define GPWTM0_BITBANDING_TA_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPWTM0_BITBANDING_TB_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPWTM0_BITBANDING_TW_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnIMR_RTCIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_RTCIM_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_TnMIM_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnIMR_WUEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_WUEIM_BIT*4))))

/* GPTM0 BITBANDING GPTMIMR*/
#define GPWTM1_BITBANDING_GPTMIMR_TATOIM             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TATOIM_BIT*4))))
#define GPWTM1_BITBANDING_GPTMIMR_CAMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CAMIM_BIT*4))))
#define GPWTM1_BITBANDING_GPTMIMR_CAEIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CAEIM_BIT*4))))
#define GPWTM1_BITBANDING_GPTMIMR_RTCIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_RTCIM_BIT*4))))
#define GPWTM1_BITBANDING_GPTMIMR_TAMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TAMIM_BIT*4))))
#define GPWTM1_BITBANDING_GPTMIMR_TBTOIM             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TBTOIM_BIT*4))))
#define GPWTM1_BITBANDING_GPTMIMR_CBMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CBMIM_BIT*4))))
#define GPWTM1_BITBANDING_GPTMIMR_CBEIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CBEIM_BIT*4))))
#define GPWTM1_BITBANDING_GPTMIMR_TBMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TBMIM_BIT*4))))
#define GPWTM1_BITBANDING_GPTMIMR_WUEIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_WUEIM_BIT*4))))

#define GPWTM1_BITBANDING_TA_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPWTM1_BITBANDING_TB_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPWTM1_BITBANDING_TW_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnIMR_RTCIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_RTCIM_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_TnMIM_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnIMR_WUEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_WUEIM_BIT*4))))

/* GPTM0 BITBANDING GPTMIMR*/
#define GPWTM2_BITBANDING_GPTMIMR_TATOIM             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TATOIM_BIT*4))))
#define GPWTM2_BITBANDING_GPTMIMR_CAMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CAMIM_BIT*4))))
#define GPWTM2_BITBANDING_GPTMIMR_CAEIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CAEIM_BIT*4))))
#define GPWTM2_BITBANDING_GPTMIMR_RTCIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_RTCIM_BIT*4))))
#define GPWTM2_BITBANDING_GPTMIMR_TAMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TAMIM_BIT*4))))
#define GPWTM2_BITBANDING_GPTMIMR_TBTOIM             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TBTOIM_BIT*4))))
#define GPWTM2_BITBANDING_GPTMIMR_CBMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CBMIM_BIT*4))))
#define GPWTM2_BITBANDING_GPTMIMR_CBEIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CBEIM_BIT*4))))
#define GPWTM2_BITBANDING_GPTMIMR_TBMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TBMIM_BIT*4))))
#define GPWTM2_BITBANDING_GPTMIMR_WUEIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_WUEIM_BIT*4))))

#define GPWTM2_BITBANDING_TA_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPWTM2_BITBANDING_TB_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPWTM2_BITBANDING_TW_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnIMR_RTCIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_RTCIM_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_TnMIM_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnIMR_WUEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_WUEIM_BIT*4))))

/* GPTM0 BITBANDING GPTMIMR*/
#define GPWTM3_BITBANDING_GPTMIMR_TATOIM             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TATOIM_BIT*4))))
#define GPWTM3_BITBANDING_GPTMIMR_CAMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CAMIM_BIT*4))))
#define GPWTM3_BITBANDING_GPTMIMR_CAEIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CAEIM_BIT*4))))
#define GPWTM3_BITBANDING_GPTMIMR_RTCIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_RTCIM_BIT*4))))
#define GPWTM3_BITBANDING_GPTMIMR_TAMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TAMIM_BIT*4))))
#define GPWTM3_BITBANDING_GPTMIMR_TBTOIM             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TBTOIM_BIT*4))))
#define GPWTM3_BITBANDING_GPTMIMR_CBMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CBMIM_BIT*4))))
#define GPWTM3_BITBANDING_GPTMIMR_CBEIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CBEIM_BIT*4))))
#define GPWTM3_BITBANDING_GPTMIMR_TBMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TBMIM_BIT*4))))
#define GPWTM3_BITBANDING_GPTMIMR_WUEIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_WUEIM_BIT*4))))

#define GPWTM3_BITBANDING_TA_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPWTM3_BITBANDING_TB_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPWTM3_BITBANDING_TW_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnIMR_RTCIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_RTCIM_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_TnMIM_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnIMR_WUEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_WUEIM_BIT*4))))

/* GPTM0 BITBANDING GPTMIMR*/
#define GPWTM4_BITBANDING_GPTMIMR_TATOIM             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TATOIM_BIT*4))))
#define GPWTM4_BITBANDING_GPTMIMR_CAMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CAMIM_BIT*4))))
#define GPWTM4_BITBANDING_GPTMIMR_CAEIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CAEIM_BIT*4))))
#define GPWTM4_BITBANDING_GPTMIMR_RTCIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_RTCIM_BIT*4))))
#define GPWTM4_BITBANDING_GPTMIMR_TAMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TAMIM_BIT*4))))
#define GPWTM4_BITBANDING_GPTMIMR_TBTOIM             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TBTOIM_BIT*4))))
#define GPWTM4_BITBANDING_GPTMIMR_CBMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CBMIM_BIT*4))))
#define GPWTM4_BITBANDING_GPTMIMR_CBEIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CBEIM_BIT*4))))
#define GPWTM4_BITBANDING_GPTMIMR_TBMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TBMIM_BIT*4))))
#define GPWTM4_BITBANDING_GPTMIMR_WUEIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_WUEIM_BIT*4))))

#define GPWTM4_BITBANDING_TA_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPWTM4_BITBANDING_TB_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPWTM4_BITBANDING_TW_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnIMR_RTCIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_RTCIM_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_TnMIM_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnIMR_WUEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_WUEIM_BIT*4))))

/* GPTM0 BITBANDING GPTMIMR*/
#define GPWTM5_BITBANDING_GPTMIMR_TATOIM             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TATOIM_BIT*4))))
#define GPWTM5_BITBANDING_GPTMIMR_CAMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CAMIM_BIT*4))))
#define GPWTM5_BITBANDING_GPTMIMR_CAEIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CAEIM_BIT*4))))
#define GPWTM5_BITBANDING_GPTMIMR_RTCIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_RTCIM_BIT*4))))
#define GPWTM5_BITBANDING_GPTMIMR_TAMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TAMIM_BIT*4))))
#define GPWTM5_BITBANDING_GPTMIMR_TBTOIM             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TBTOIM_BIT*4))))
#define GPWTM5_BITBANDING_GPTMIMR_CBMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CBMIM_BIT*4))))
#define GPWTM5_BITBANDING_GPTMIMR_CBEIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_CBEIM_BIT*4))))
#define GPWTM5_BITBANDING_GPTMIMR_TBMIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_TBMIM_BIT*4))))
#define GPWTM5_BITBANDING_GPTMIMR_WUEIM              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMIMR_OFFSET)*32)+(GPWTM_GPTMIMR_R_WUEIM_BIT*4))))

#define GPWTM5_BITBANDING_TA_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnIMR_OFFSET)*32)+(GPWTM_TA_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPWTM5_BITBANDING_TB_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnIMR_OFFSET)*32)+(GPWTM_TB_GPTMTnIMR_R_TnMIM_BIT*4))))

#define GPWTM5_BITBANDING_TW_GPTMTnIMR_TnTOIM        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_TnTOIM_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnIMR_CnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_CnMIM_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnIMR_RTCIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_RTCIM_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnIMR_CnEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_CnEIM_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnIMR_TnMIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_TnMIM_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnIMR_WUEIM         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnIMR_OFFSET)*32)+(GPWTM_TW_GPTMTnIMR_R_WUEIM_BIT*4))))


/******************************************************************************************
************************************ 7 GPTMRIS *********************************************
******************************************************************************************/

/* GPTM0 GPTMRIS*/
#define GPTM0_BITBANDING_GPTMRIS            (((BITBANDING_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMRIS_OFFSET)*32))))
#define GPTM0_GPTMRIS                       (((GPTMRIS_TypeDef*)(GPTM0_BASE + GPTM_GPTMRIS_OFFSET )))
#define GPTM0_GPTMRIS_R                     (*((volatile const uint32_t *)(GPTM0_BASE +GPTM_GPTMRIS_OFFSET)))

#define GPTM0_BITBANDING_TA_GPTMTnRIS       (((BITBANDING_TA_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32))))
#define GPTM0_TA_GPTMTnRIS                  (((TA_GPTMRIS_TypeDef*)(GPTM0_BASE + GPTM_TA_GPTMTnRIS_OFFSET )))
#define GPTM0_TA_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM0_BASE +GPTM_TA_GPTMTnRIS_OFFSET)))

#define GPTM0_BITBANDING_TB_GPTMTnRIS       (((BITBANDING_TB_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32))))
#define GPTM0_TB_GPTMTnRIS                  (((TB_GPTMRIS_TypeDef*)(GPTM0_BASE + GPTM_TB_GPTMTnRIS_OFFSET )))
#define GPTM0_TB_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM0_BASE +GPTM_TB_GPTMTnRIS_OFFSET)))

#define GPTM0_BITBANDING_TW_GPTMTnRIS       (((BITBANDING_TW_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32))))
#define GPTM0_TW_GPTMTnRIS                  (((TW_GPTMRIS_TypeDef*)(GPTM0_BASE + GPTM_TW_GPTMTnRIS_OFFSET )))
#define GPTM0_TW_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM0_BASE +GPTM_TW_GPTMTnRIS_OFFSET)))

/* GPTM1 GPTMRIS*/
#define GPTM1_BITBANDING_GPTMRIS            (((BITBANDING_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMRIS_OFFSET)*32))))
#define GPTM1_GPTMRIS                       (((GPTMRIS_TypeDef*)(GPTM1_BASE + GPTM_GPTMRIS_OFFSET )))
#define GPTM1_GPTMRIS_R                     (*((volatile const uint32_t *)(GPTM1_BASE +GPTM_GPTMRIS_OFFSET)))

#define GPTM1_BITBANDING_TA_GPTMTnRIS       (((BITBANDING_TA_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32))))
#define GPTM1_TA_GPTMTnRIS                  (((TA_GPTMRIS_TypeDef*)(GPTM1_BASE + GPTM_TA_GPTMTnRIS_OFFSET )))
#define GPTM1_TA_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM1_BASE +GPTM_TA_GPTMTnRIS_OFFSET)))

#define GPTM1_BITBANDING_TB_GPTMTnRIS       (((BITBANDING_TB_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32))))
#define GPTM1_TB_GPTMTnRIS                  (((TB_GPTMRIS_TypeDef*)(GPTM1_BASE + GPTM_TB_GPTMTnRIS_OFFSET )))
#define GPTM1_TB_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM1_BASE +GPTM_TB_GPTMTnRIS_OFFSET)))

#define GPTM1_BITBANDING_TW_GPTMTnRIS       (((BITBANDING_TW_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32))))
#define GPTM1_TW_GPTMTnRIS                  (((TW_GPTMRIS_TypeDef*)(GPTM1_BASE + GPTM_TW_GPTMTnRIS_OFFSET )))
#define GPTM1_TW_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM1_BASE +GPTM_TW_GPTMTnRIS_OFFSET)))

/* GPTM1 GPTMRIS*/
#define GPTM1_BITBANDING_GPTMRIS            (((BITBANDING_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMRIS_OFFSET)*32))))
#define GPTM1_GPTMRIS                       (((GPTMRIS_TypeDef*)(GPTM1_BASE + GPTM_GPTMRIS_OFFSET )))
#define GPTM1_GPTMRIS_R                     (*((volatile const uint32_t *)(GPTM1_BASE +GPTM_GPTMRIS_OFFSET)))

#define GPTM1_BITBANDING_TA_GPTMTnRIS       (((BITBANDING_TA_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32))))
#define GPTM1_TA_GPTMTnRIS                  (((TA_GPTMRIS_TypeDef*)(GPTM1_BASE + GPTM_TA_GPTMTnRIS_OFFSET )))
#define GPTM1_TA_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM1_BASE +GPTM_TA_GPTMTnRIS_OFFSET)))

#define GPTM1_BITBANDING_TB_GPTMTnRIS       (((BITBANDING_TB_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32))))
#define GPTM1_TB_GPTMTnRIS                  (((TB_GPTMRIS_TypeDef*)(GPTM1_BASE + GPTM_TB_GPTMTnRIS_OFFSET )))
#define GPTM1_TB_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM1_BASE +GPTM_TB_GPTMTnRIS_OFFSET)))

#define GPTM1_BITBANDING_TW_GPTMTnRIS       (((BITBANDING_TW_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32))))
#define GPTM1_TW_GPTMTnRIS                  (((TW_GPTMRIS_TypeDef*)(GPTM1_BASE + GPTM_TW_GPTMTnRIS_OFFSET )))
#define GPTM1_TW_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM1_BASE +GPTM_TW_GPTMTnRIS_OFFSET)))

/* GPTM2 GPTMRIS*/
#define GPTM2_BITBANDING_GPTMRIS            (((BITBANDING_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMRIS_OFFSET)*32))))
#define GPTM2_GPTMRIS                       (((GPTMRIS_TypeDef*)(GPTM2_BASE + GPTM_GPTMRIS_OFFSET )))
#define GPTM2_GPTMRIS_R                     (*((volatile const uint32_t *)(GPTM2_BASE +GPTM_GPTMRIS_OFFSET)))

#define GPTM2_BITBANDING_TA_GPTMTnRIS       (((BITBANDING_TA_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32))))
#define GPTM2_TA_GPTMTnRIS                  (((TA_GPTMRIS_TypeDef*)(GPTM2_BASE + GPTM_TA_GPTMTnRIS_OFFSET )))
#define GPTM2_TA_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM2_BASE +GPTM_TA_GPTMTnRIS_OFFSET)))

#define GPTM2_BITBANDING_TB_GPTMTnRIS       (((BITBANDING_TB_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32))))
#define GPTM2_TB_GPTMTnRIS                  (((TB_GPTMRIS_TypeDef*)(GPTM2_BASE + GPTM_TB_GPTMTnRIS_OFFSET )))
#define GPTM2_TB_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM2_BASE +GPTM_TB_GPTMTnRIS_OFFSET)))

#define GPTM2_BITBANDING_TW_GPTMTnRIS       (((BITBANDING_TW_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32))))
#define GPTM2_TW_GPTMTnRIS                  (((TW_GPTMRIS_TypeDef*)(GPTM2_BASE + GPTM_TW_GPTMTnRIS_OFFSET )))
#define GPTM2_TW_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM2_BASE +GPTM_TW_GPTMTnRIS_OFFSET)))

/* GPTM3 GPTMRIS*/
#define GPTM3_BITBANDING_GPTMRIS            (((BITBANDING_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMRIS_OFFSET)*32))))
#define GPTM3_GPTMRIS                       (((GPTMRIS_TypeDef*)(GPTM3_BASE + GPTM_GPTMRIS_OFFSET )))
#define GPTM3_GPTMRIS_R                     (*((volatile const uint32_t *)(GPTM3_BASE +GPTM_GPTMRIS_OFFSET)))

#define GPTM3_BITBANDING_TA_GPTMTnRIS       (((BITBANDING_TA_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32))))
#define GPTM3_TA_GPTMTnRIS                  (((TA_GPTMRIS_TypeDef*)(GPTM3_BASE + GPTM_TA_GPTMTnRIS_OFFSET )))
#define GPTM3_TA_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM3_BASE +GPTM_TA_GPTMTnRIS_OFFSET)))

#define GPTM3_BITBANDING_TB_GPTMTnRIS       (((BITBANDING_TB_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32))))
#define GPTM3_TB_GPTMTnRIS                  (((TB_GPTMRIS_TypeDef*)(GPTM3_BASE + GPTM_TB_GPTMTnRIS_OFFSET )))
#define GPTM3_TB_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM3_BASE +GPTM_TB_GPTMTnRIS_OFFSET)))

#define GPTM3_BITBANDING_TW_GPTMTnRIS       (((BITBANDING_TW_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32))))
#define GPTM3_TW_GPTMTnRIS                  (((TW_GPTMRIS_TypeDef*)(GPTM3_BASE + GPTM_TW_GPTMTnRIS_OFFSET )))
#define GPTM3_TW_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM3_BASE +GPTM_TW_GPTMTnRIS_OFFSET)))

/* GPTM4 GPTMRIS*/
#define GPTM4_BITBANDING_GPTMRIS            (((BITBANDING_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMRIS_OFFSET)*32))))
#define GPTM4_GPTMRIS                       (((GPTMRIS_TypeDef*)(GPTM4_BASE + GPTM_GPTMRIS_OFFSET )))
#define GPTM4_GPTMRIS_R                     (*((volatile const uint32_t *)(GPTM4_BASE +GPTM_GPTMRIS_OFFSET)))

#define GPTM4_BITBANDING_TA_GPTMTnRIS       (((BITBANDING_TA_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32))))
#define GPTM4_TA_GPTMTnRIS                  (((TA_GPTMRIS_TypeDef*)(GPTM4_BASE + GPTM_TA_GPTMTnRIS_OFFSET )))
#define GPTM4_TA_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM4_BASE +GPTM_TA_GPTMTnRIS_OFFSET)))

#define GPTM4_BITBANDING_TB_GPTMTnRIS       (((BITBANDING_TB_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32))))
#define GPTM4_TB_GPTMTnRIS                  (((TB_GPTMRIS_TypeDef*)(GPTM4_BASE + GPTM_TB_GPTMTnRIS_OFFSET )))
#define GPTM4_TB_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM4_BASE +GPTM_TB_GPTMTnRIS_OFFSET)))

#define GPTM4_BITBANDING_TW_GPTMTnRIS       (((BITBANDING_TW_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32))))
#define GPTM4_TW_GPTMTnRIS                  (((TW_GPTMRIS_TypeDef*)(GPTM4_BASE + GPTM_TW_GPTMTnRIS_OFFSET )))
#define GPTM4_TW_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM4_BASE +GPTM_TW_GPTMTnRIS_OFFSET)))

/* GPTM5 GPTMRIS*/
#define GPTM5_BITBANDING_GPTMRIS            (((BITBANDING_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMRIS_OFFSET)*32))))
#define GPTM5_GPTMRIS                       (((GPTMRIS_TypeDef*)(GPTM5_BASE + GPTM_GPTMRIS_OFFSET )))
#define GPTM5_GPTMRIS_R                     (*((volatile const uint32_t *)(GPTM5_BASE +GPTM_GPTMRIS_OFFSET)))

#define GPTM5_BITBANDING_TA_GPTMTnRIS       (((BITBANDING_TA_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32))))
#define GPTM5_TA_GPTMTnRIS                  (((TA_GPTMRIS_TypeDef*)(GPTM5_BASE + GPTM_TA_GPTMTnRIS_OFFSET )))
#define GPTM5_TA_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM5_BASE +GPTM_TA_GPTMTnRIS_OFFSET)))

#define GPTM5_BITBANDING_TB_GPTMTnRIS       (((BITBANDING_TB_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32))))
#define GPTM5_TB_GPTMTnRIS                  (((TB_GPTMRIS_TypeDef*)(GPTM5_BASE + GPTM_TB_GPTMTnRIS_OFFSET )))
#define GPTM5_TB_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM5_BASE +GPTM_TB_GPTMTnRIS_OFFSET)))

#define GPTM5_BITBANDING_TW_GPTMTnRIS       (((BITBANDING_TW_GPTMRIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32))))
#define GPTM5_TW_GPTMTnRIS                  (((TW_GPTMRIS_TypeDef*)(GPTM5_BASE + GPTM_TW_GPTMTnRIS_OFFSET )))
#define GPTM5_TW_GPTMTnRIS_R                (*((volatile const uint32_t *)(GPTM5_BASE +GPTM_TW_GPTMTnRIS_OFFSET)))

/* GPWTM0 GPTMRIS*/
#define GPWTM0_BITBANDING_GPTMRIS           (((BITBANDING_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMRIS_OFFSET)*32))))
#define GPWTM0_GPTMRIS                      (((GPTMRIS_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMRIS_OFFSET )))
#define GPWTM0_GPTMRIS_R                    (*((volatile const uint32_t *)(GPWTM0_BASE +GPWTM_GPTMRIS_OFFSET)))

#define GPWTM0_BITBANDING_TA_GPTMTnRIS      (((BITBANDING_TA_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32))))
#define GPWTM0_TA_GPTMTnRIS                 (((TA_GPTMRIS_TypeDef*)(GPWTM0_BASE + GPWTM_TA_GPTMTnRIS_OFFSET )))
#define GPWTM0_TA_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM0_BASE +GPWTM_TA_GPTMTnRIS_OFFSET)))

#define GPWTM0_BITBANDING_TB_GPTMTnRIS      (((BITBANDING_TB_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32))))
#define GPWTM0_TB_GPTMTnRIS                 (((TB_GPTMRIS_TypeDef*)(GPWTM0_BASE + GPWTM_TB_GPTMTnRIS_OFFSET )))
#define GPWTM0_TB_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM0_BASE +GPWTM_TB_GPTMTnRIS_OFFSET)))

#define GPWTM0_BITBANDING_TW_GPTMTnRIS      (((BITBANDING_TW_GPWTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32))))
#define GPWTM0_TW_GPTMTnRIS                 (((TW_GPWTMRIS_TypeDef*)(GPWTM0_BASE + GPWTM_TW_GPTMTnRIS_OFFSET )))
#define GPWTM0_TW_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM0_BASE +GPWTM_TW_GPTMTnRIS_OFFSET)))

/* GPWTM1 GPTMRIS*/
#define GPWTM1_BITBANDING_GPTMRIS           (((BITBANDING_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMRIS_OFFSET)*32))))
#define GPWTM1_GPTMRIS                      (((GPTMRIS_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMRIS_OFFSET )))
#define GPWTM1_GPTMRIS_R                    (*((volatile const uint32_t *)(GPWTM1_BASE +GPWTM_GPTMRIS_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnRIS      (((BITBANDING_TA_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnRIS                 (((TA_GPTMRIS_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnRIS_OFFSET )))
#define GPWTM1_TA_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnRIS_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnRIS      (((BITBANDING_TB_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnRIS                 (((TB_GPTMRIS_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnRIS_OFFSET )))
#define GPWTM1_TB_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnRIS_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnRIS      (((BITBANDING_TW_GPWTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnRIS                 (((TW_GPWTMRIS_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnRIS_OFFSET )))
#define GPWTM1_TW_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnRIS_OFFSET)))

/* GPWTM1 GPTMRIS*/
#define GPWTM1_BITBANDING_GPTMRIS           (((BITBANDING_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMRIS_OFFSET)*32))))
#define GPWTM1_GPTMRIS                      (((GPTMRIS_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMRIS_OFFSET )))
#define GPWTM1_GPTMRIS_R                    (*((volatile const uint32_t *)(GPWTM1_BASE +GPWTM_GPTMRIS_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnRIS      (((BITBANDING_TA_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnRIS                 (((TA_GPTMRIS_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnRIS_OFFSET )))
#define GPWTM1_TA_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnRIS_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnRIS      (((BITBANDING_TB_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnRIS                 (((TB_GPTMRIS_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnRIS_OFFSET )))
#define GPWTM1_TB_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnRIS_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnRIS      (((BITBANDING_TW_GPWTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnRIS                 (((TW_GPWTMRIS_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnRIS_OFFSET )))
#define GPWTM1_TW_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnRIS_OFFSET)))

/* GPWTM2 GPTMRIS*/
#define GPWTM2_BITBANDING_GPTMRIS           (((BITBANDING_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMRIS_OFFSET)*32))))
#define GPWTM2_GPTMRIS                      (((GPTMRIS_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMRIS_OFFSET )))
#define GPWTM2_GPTMRIS_R                    (*((volatile const uint32_t *)(GPWTM2_BASE +GPWTM_GPTMRIS_OFFSET)))

#define GPWTM2_BITBANDING_TA_GPTMTnRIS      (((BITBANDING_TA_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32))))
#define GPWTM2_TA_GPTMTnRIS                 (((TA_GPTMRIS_TypeDef*)(GPWTM2_BASE + GPWTM_TA_GPTMTnRIS_OFFSET )))
#define GPWTM2_TA_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM2_BASE +GPWTM_TA_GPTMTnRIS_OFFSET)))

#define GPWTM2_BITBANDING_TB_GPTMTnRIS      (((BITBANDING_TB_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32))))
#define GPWTM2_TB_GPTMTnRIS                 (((TB_GPTMRIS_TypeDef*)(GPWTM2_BASE + GPWTM_TB_GPTMTnRIS_OFFSET )))
#define GPWTM2_TB_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM2_BASE +GPWTM_TB_GPTMTnRIS_OFFSET)))

#define GPWTM2_BITBANDING_TW_GPTMTnRIS      (((BITBANDING_TW_GPWTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32))))
#define GPWTM2_TW_GPTMTnRIS                 (((TW_GPWTMRIS_TypeDef*)(GPWTM2_BASE + GPWTM_TW_GPTMTnRIS_OFFSET )))
#define GPWTM2_TW_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM2_BASE +GPWTM_TW_GPTMTnRIS_OFFSET)))

/* GPWTM3 GPTMRIS*/
#define GPWTM3_BITBANDING_GPTMRIS           (((BITBANDING_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMRIS_OFFSET)*32))))
#define GPWTM3_GPTMRIS                      (((GPTMRIS_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMRIS_OFFSET )))
#define GPWTM3_GPTMRIS_R                    (*((volatile const uint32_t *)(GPWTM3_BASE +GPWTM_GPTMRIS_OFFSET)))

#define GPWTM3_BITBANDING_TA_GPTMTnRIS      (((BITBANDING_TA_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32))))
#define GPWTM3_TA_GPTMTnRIS                 (((TA_GPTMRIS_TypeDef*)(GPWTM3_BASE + GPWTM_TA_GPTMTnRIS_OFFSET )))
#define GPWTM3_TA_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM3_BASE +GPWTM_TA_GPTMTnRIS_OFFSET)))

#define GPWTM3_BITBANDING_TB_GPTMTnRIS      (((BITBANDING_TB_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32))))
#define GPWTM3_TB_GPTMTnRIS                 (((TB_GPTMRIS_TypeDef*)(GPWTM3_BASE + GPWTM_TB_GPTMTnRIS_OFFSET )))
#define GPWTM3_TB_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM3_BASE +GPWTM_TB_GPTMTnRIS_OFFSET)))

#define GPWTM3_BITBANDING_TW_GPTMTnRIS      (((BITBANDING_TW_GPWTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32))))
#define GPWTM3_TW_GPTMTnRIS                 (((TW_GPWTMRIS_TypeDef*)(GPWTM3_BASE + GPWTM_TW_GPTMTnRIS_OFFSET )))
#define GPWTM3_TW_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM3_BASE +GPWTM_TW_GPTMTnRIS_OFFSET)))

/* GPWTM4 GPTMRIS*/
#define GPWTM4_BITBANDING_GPTMRIS           (((BITBANDING_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMRIS_OFFSET)*32))))
#define GPWTM4_GPTMRIS                      (((GPTMRIS_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMRIS_OFFSET )))
#define GPWTM4_GPTMRIS_R                    (*((volatile const uint32_t *)(GPWTM4_BASE +GPWTM_GPTMRIS_OFFSET)))

#define GPWTM4_BITBANDING_TA_GPTMTnRIS      (((BITBANDING_TA_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32))))
#define GPWTM4_TA_GPTMTnRIS                 (((TA_GPTMRIS_TypeDef*)(GPWTM4_BASE + GPWTM_TA_GPTMTnRIS_OFFSET )))
#define GPWTM4_TA_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM4_BASE +GPWTM_TA_GPTMTnRIS_OFFSET)))

#define GPWTM4_BITBANDING_TB_GPTMTnRIS      (((BITBANDING_TB_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32))))
#define GPWTM4_TB_GPTMTnRIS                 (((TB_GPTMRIS_TypeDef*)(GPWTM4_BASE + GPWTM_TB_GPTMTnRIS_OFFSET )))
#define GPWTM4_TB_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM4_BASE +GPWTM_TB_GPTMTnRIS_OFFSET)))

#define GPWTM4_BITBANDING_TW_GPTMTnRIS      (((BITBANDING_TW_GPWTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32))))
#define GPWTM4_TW_GPTMTnRIS                 (((TW_GPWTMRIS_TypeDef*)(GPWTM4_BASE + GPWTM_TW_GPTMTnRIS_OFFSET )))
#define GPWTM4_TW_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM4_BASE +GPWTM_TW_GPTMTnRIS_OFFSET)))

/* GPWTM5 GPTMRIS*/
#define GPWTM5_BITBANDING_GPTMRIS           (((BITBANDING_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMRIS_OFFSET)*32))))
#define GPWTM5_GPTMRIS                      (((GPTMRIS_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMRIS_OFFSET )))
#define GPWTM5_GPTMRIS_R                    (*((volatile const uint32_t *)(GPWTM5_BASE +GPWTM_GPTMRIS_OFFSET)))

#define GPWTM5_BITBANDING_TA_GPTMTnRIS      (((BITBANDING_TA_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32))))
#define GPWTM5_TA_GPTMTnRIS                 (((TA_GPTMRIS_TypeDef*)(GPWTM5_BASE + GPWTM_TA_GPTMTnRIS_OFFSET )))
#define GPWTM5_TA_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM5_BASE +GPWTM_TA_GPTMTnRIS_OFFSET)))

#define GPWTM5_BITBANDING_TB_GPTMTnRIS      (((BITBANDING_TB_GPTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32))))
#define GPWTM5_TB_GPTMTnRIS                 (((TB_GPTMRIS_TypeDef*)(GPWTM5_BASE + GPWTM_TB_GPTMTnRIS_OFFSET )))
#define GPWTM5_TB_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM5_BASE +GPWTM_TB_GPTMTnRIS_OFFSET)))

#define GPWTM5_BITBANDING_TW_GPTMTnRIS      (((BITBANDING_TW_GPWTMRIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32))))
#define GPWTM5_TW_GPTMTnRIS                 (((TW_GPWTMRIS_TypeDef*)(GPWTM5_BASE + GPWTM_TW_GPTMTnRIS_OFFSET )))
#define GPWTM5_TW_GPTMTnRIS_R               (*((volatile const uint32_t *)(GPWTM5_BASE +GPWTM_TW_GPTMTnRIS_OFFSET)))

//--------
#define GPTM_GPTMRIS_R_TATORIS_MASK                 (0x00000001)
#define GPTM_GPTMRIS_R_TATORIS_BIT                  (0)
#define GPTM_GPTMRIS_R_TATORIS_NOACTIVE             (0x00000000)
#define GPTM_GPTMRIS_R_TATORIS_ACTIVE               (0x00000001)

#define GPTM_GPTMRIS_TATORIS_MASK                   (0x00000001)
#define GPTM_GPTMRIS_TATORIS_NOACTIVE               (0x00000000)
#define GPTM_GPTMRIS_TATORIS_ACTIVE                 (0x00000001)
//--------

//--------
#define GPTM_GPTMRIS_R_CAMRIS_MASK                  (0x00000002)
#define GPTM_GPTMRIS_R_CAMRIS_BIT                   (1)
#define GPTM_GPTMRIS_R_CAMRIS_NOACTIVE              (0x00000000)
#define GPTM_GPTMRIS_R_CAMRIS_ACTIVE                (0x00000002)

#define GPTM_GPTMRIS_CAMRIS_MASK                    (0x00000001)
#define GPTM_GPTMRIS_CAMRIS_NOACTIVE                (0x00000000)
#define GPTM_GPTMRIS_CAMRIS_ACTIVE                  (0x00000001)
//--------

//--------
#define GPTM_GPTMRIS_R_CAERIS_MASK                  (0x00000004)
#define GPTM_GPTMRIS_R_CAERIS_BIT                   (2)
#define GPTM_GPTMRIS_R_CAERIS_NOACTIVE              (0x00000000)
#define GPTM_GPTMRIS_R_CAERIS_ACTIVE                (0x00000004)

#define GPTM_GPTMRIS_CAERIS_MASK                    (0x00000001)
#define GPTM_GPTMRIS_CAERIS_NOACTIVE                (0x00000000)
#define GPTM_GPTMRIS_CAERIS_ACTIVE                  (0x00000001)
//--------

//--------
#define GPTM_GPTMRIS_R_RTCRIS_MASK                  (0x00000008)
#define GPTM_GPTMRIS_R_RTCRIS_BIT                   (3)
#define GPTM_GPTMRIS_R_RTCRIS_NOACTIVE              (0x00000000)
#define GPTM_GPTMRIS_R_RTCRIS_ACTIVE                (0x00000008)

#define GPTM_GPTMRIS_RTCRIS_MASK                    (0x00000001)
#define GPTM_GPTMRIS_RTCRIS_NOACTIVE                (0x00000000)
#define GPTM_GPTMRIS_RTCRIS_ACTIVE                  (0x00000001)
//--------

//--------
#define GPTM_GPTMRIS_R_TAMRIS_MASK                  (0x00000010)
#define GPTM_GPTMRIS_R_TAMRIS_BIT                   (4)
#define GPTM_GPTMRIS_R_TAMRIS_NOACTIVE              (0x00000000)
#define GPTM_GPTMRIS_R_TAMRIS_ACTIVE                (0x00000010)

#define GPTM_GPTMRIS_TAMRIS_MASK                    (0x00000001)
#define GPTM_GPTMRIS_TAMRIS_NOACTIVE                (0x00000000)
#define GPTM_GPTMRIS_TAMRIS_ACTIVE                  (0x00000001)
//--------

//--------
#define GPTM_GPTMRIS_R_TBTORIS_MASK                 (0x00000100)
#define GPTM_GPTMRIS_R_TBTORIS_BIT                  (8)
#define GPTM_GPTMRIS_R_TBTORIS_NOACTIVE             (0x00000000)
#define GPTM_GPTMRIS_R_TBTORIS_ACTIVE               (0x00000100)

#define GPTM_GPTMRIS_TBTORIS_MASK                   (0x00000001)
#define GPTM_GPTMRIS_TBTORIS_NOACTIVE               (0x00000000)
#define GPTM_GPTMRIS_TBTORIS_ACTIVE                 (0x00000001)
//--------

//--------
#define GPTM_GPTMRIS_R_CBMRIS_MASK                  (0x00000200)
#define GPTM_GPTMRIS_R_CBMRIS_BIT                   (9)
#define GPTM_GPTMRIS_R_CBMRIS_NOACTIVE              (0x00000000)
#define GPTM_GPTMRIS_R_CBMRIS_ACTIVE                (0x00000200)

#define GPTM_GPTMRIS_CBMRIS_MASK                    (0x00000001)
#define GPTM_GPTMRIS_CBMRIS_NOACTIVE                (0x00000000)
#define GPTM_GPTMRIS_CBMRIS_ACTIVE                  (0x00000001)
//--------

//--------
#define GPTM_GPTMRIS_R_CBERIS_MASK                  (0x00000400)
#define GPTM_GPTMRIS_R_CBERIS_BIT                   (10)
#define GPTM_GPTMRIS_R_CBERIS_NOACTIVE              (0x00000000)
#define GPTM_GPTMRIS_R_CBERIS_ACTIVE                (0x00000400)

#define GPTM_GPTMRIS_CBERIS_MASK                    (0x00000001)
#define GPTM_GPTMRIS_CBERIS_NOACTIVE                (0x00000000)
#define GPTM_GPTMRIS_CBERIS_ACTIVE                  (0x00000001)
//--------

//--------
#define GPTM_GPTMRIS_R_TBMRIS_MASK                  (0x00000800)
#define GPTM_GPTMRIS_R_TBMRIS_BIT                   (11)
#define GPTM_GPTMRIS_R_TBMRIS_NOACTIVE              (0x00000000)
#define GPTM_GPTMRIS_R_TBMRIS_ACTIVE                (0x00000800)

#define GPTM_GPTMRIS_TBMRIS_MASK                    (0x00000001)
#define GPTM_GPTMRIS_TBMRIS_NOACTIVE                (0x00000000)
#define GPTM_GPTMRIS_TBMRIS_ACTIVE                  (0x00000001)
//--------

//--------
#define GPTM_GPTMRIS_R_WUERIS_MASK                  (0x00010000)
#define GPTM_GPTMRIS_R_WUERIS_BIT                   (16)
#define GPTM_GPTMRIS_R_WUERIS_NOACTIVE              (0x00000000)
#define GPTM_GPTMRIS_R_WUERIS_ACTIVE                (0x00010000)

#define GPTM_GPTMRIS_WUERIS_MASK                    (0x00000001)
#define GPTM_GPTMRIS_WUERIS_NOACTIVE                (0x00000000)
#define GPTM_GPTMRIS_WUERIS_ACTIVE                  (0x00000001)
//--------


//--------
#define GPTM_TA_GPTMTnRIS_R_TnTORIS_MASK            (0x00000001)
#define GPTM_TA_GPTMTnRIS_R_TnTORIS_BIT             (0)
#define GPTM_TA_GPTMTnRIS_R_TnTORIS_NOACTIVE        (0x00000000)
#define GPTM_TA_GPTMTnRIS_R_TnTORIS_ACTIVE          (0x00000001)

#define GPTM_TA_GPTMTnRIS_TnTORIS_MASK              (0x00000001)
#define GPTM_TA_GPTMTnRIS_TnTORIS_NOACTIVE          (0x00000000)
#define GPTM_TA_GPTMTnRIS_TnTORIS_ACTIVE            (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnRIS_R_CnMRIS_MASK             (0x00000002)
#define GPTM_TA_GPTMTnRIS_R_CnMRIS_BIT              (1)
#define GPTM_TA_GPTMTnRIS_R_CnMRIS_NOACTIVE         (0x00000000)
#define GPTM_TA_GPTMTnRIS_R_CnMRIS_ACTIVE           (0x00000002)

#define GPTM_TA_GPTMTnRIS_CnMRIS_MASK               (0x00000001)
#define GPTM_TA_GPTMTnRIS_CnMRIS_NOACTIVE           (0x00000000)
#define GPTM_TA_GPTMTnRIS_CnMRIS_ACTIVE             (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnRIS_R_CnERIS_MASK             (0x00000004)
#define GPTM_TA_GPTMTnRIS_R_CnERIS_BIT              (2)
#define GPTM_TA_GPTMTnRIS_R_CnERIS_NOACTIVE         (0x00000000)
#define GPTM_TA_GPTMTnRIS_R_CnERIS_ACTIVE           (0x00000004)

#define GPTM_TA_GPTMTnRIS_CnERIS_MASK               (0x00000001)
#define GPTM_TA_GPTMTnRIS_CnERIS_NOACTIVE           (0x00000000)
#define GPTM_TA_GPTMTnRIS_CnERIS_ACTIVE             (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnRIS_R_TnMRIS_MASK             (0x00000010)
#define GPTM_TA_GPTMTnRIS_R_TnMRIS_BIT              (4)
#define GPTM_TA_GPTMTnRIS_R_TnMRIS_NOACTIVE         (0x00000000)
#define GPTM_TA_GPTMTnRIS_R_TnMRIS_ACTIVE           (0x00000010)

#define GPTM_TA_GPTMTnRIS_TnMRIS_MASK               (0x00000001)
#define GPTM_TA_GPTMTnRIS_TnMRIS_NOACTIVE           (0x00000000)
#define GPTM_TA_GPTMTnRIS_TnMRIS_ACTIVE             (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnRIS_R_TnTORIS_MASK              (0x00000100)
#define GPTM_TB_GPTMTnRIS_R_TnTORIS_BIT               (8)
#define GPTM_TB_GPTMTnRIS_R_TnTORIS_DIS               (0x00000000)
#define GPTM_TB_GPTMTnRIS_R_TnTORIS_EN                (0x00000100)

#define GPTM_TB_GPTMTnRIS_TnTORIS_MASK                (0x00000001)
#define GPTM_TB_GPTMTnRIS_TnTORIS_DIS                 (0x00000000)
#define GPTM_TB_GPTMTnRIS_TnTORIS_EN                  (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnRIS_R_CnMRIS_MASK               (0x00000200)
#define GPTM_TB_GPTMTnRIS_R_CnMRIS_BIT                (9)
#define GPTM_TB_GPTMTnRIS_R_CnMRIS_DIS                (0x00000000)
#define GPTM_TB_GPTMTnRIS_R_CnMRIS_EN                 (0x00000200)

#define GPTM_TB_GPTMTnRIS_CnMRIS_MASK                 (0x00000001)
#define GPTM_TB_GPTMTnRIS_CnMRIS_DIS                  (0x00000000)
#define GPTM_TB_GPTMTnRIS_CnMRIS_EN                   (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnRIS_R_CnERIS_MASK               (0x00000400)
#define GPTM_TB_GPTMTnRIS_R_CnERIS_BIT                (10)
#define GPTM_TB_GPTMTnRIS_R_CnERIS_DIS                (0x00000000)
#define GPTM_TB_GPTMTnRIS_R_CnERIS_EN                 (0x00000400)

#define GPTM_TB_GPTMTnRIS_CnERIS_MASK                 (0x00000001)
#define GPTM_TB_GPTMTnRIS_CnERIS_DIS                  (0x00000000)
#define GPTM_TB_GPTMTnRIS_CnERIS_EN                   (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnRIS_R_TnMRIS_MASK               (0x00000800)
#define GPTM_TB_GPTMTnRIS_R_TnMRIS_BIT                (11)
#define GPTM_TB_GPTMTnRIS_R_TnMRIS_DIS                (0x00000000)
#define GPTM_TB_GPTMTnRIS_R_TnMRIS_EN                 (0x00000800)

#define GPTM_TB_GPTMTnRIS_TnMRIS_MASK                 (0x00000001)
#define GPTM_TB_GPTMTnRIS_TnMRIS_DIS                  (0x00000000)
#define GPTM_TB_GPTMTnRIS_TnMRIS_EN                   (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnRIS_R_TnTORIS_MASK            (0x00000001)
#define GPTM_TW_GPTMTnRIS_R_TnTORIS_BIT             (0)
#define GPTM_TW_GPTMTnRIS_R_TnTORIS_NOACTIVE        (0x00000000)
#define GPTM_TW_GPTMTnRIS_R_TnTORIS_ACTIVE          (0x00000001)

#define GPTM_TW_GPTMTnRIS_TnTORIS_MASK              (0x00000001)
#define GPTM_TW_GPTMTnRIS_TnTORIS_NOACTIVE          (0x00000000)
#define GPTM_TW_GPTMTnRIS_TnTORIS_ACTIVE            (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnRIS_R_CnMRIS_MASK             (0x00000002)
#define GPTM_TW_GPTMTnRIS_R_CnMRIS_BIT              (1)
#define GPTM_TW_GPTMTnRIS_R_CnMRIS_NOACTIVE         (0x00000000)
#define GPTM_TW_GPTMTnRIS_R_CnMRIS_ACTIVE           (0x00000002)

#define GPTM_TW_GPTMTnRIS_CnMRIS_MASK               (0x00000001)
#define GPTM_TW_GPTMTnRIS_CnMRIS_NOACTIVE           (0x00000000)
#define GPTM_TW_GPTMTnRIS_CnMRIS_ACTIVE             (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnRIS_R_CnERIS_MASK             (0x00000004)
#define GPTM_TW_GPTMTnRIS_R_CnERIS_BIT              (2)
#define GPTM_TW_GPTMTnRIS_R_CnERIS_NOACTIVE         (0x00000000)
#define GPTM_TW_GPTMTnRIS_R_CnERIS_ACTIVE           (0x00000004)

#define GPTM_TW_GPTMTnRIS_CnERIS_MASK               (0x00000001)
#define GPTM_TW_GPTMTnRIS_CnERIS_NOACTIVE           (0x00000000)
#define GPTM_TW_GPTMTnRIS_CnERIS_ACTIVE             (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnRIS_R_RTCRIS_MASK             (0x00000008)
#define GPTM_TW_GPTMTnRIS_R_RTCRIS_BIT              (3)
#define GPTM_TW_GPTMTnRIS_R_RTCRIS_NOACTIVE         (0x00000000)
#define GPTM_TW_GPTMTnRIS_R_RTCRIS_ACTIVE           (0x00000008)

#define GPTM_TW_GPTMTnRIS_RTCRIS_MASK               (0x00000001)
#define GPTM_TW_GPTMTnRIS_RTCRIS_NOACTIVE           (0x00000000)
#define GPTM_TW_GPTMTnRIS_RTCRIS_ACTIVE             (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnRIS_R_TnMRIS_MASK             (0x00000010)
#define GPTM_TW_GPTMTnRIS_R_TnMRIS_BIT              (4)
#define GPTM_TW_GPTMTnRIS_R_TnMRIS_NOACTIVE         (0x00000000)
#define GPTM_TW_GPTMTnRIS_R_TnMRIS_ACTIVE           (0x00000010)

#define GPTM_TW_GPTMTnRIS_TnMRIS_MASK               (0x00000001)
#define GPTM_TW_GPTMTnRIS_TnMRIS_NOACTIVE           (0x00000000)
#define GPTM_TW_GPTMTnRIS_TnMRIS_ACTIVE             (0x00000001)
//--------

//--------
#define GPWTM_GPTMRIS_R_TATORIS_MASK                (0x00000001)
#define GPWTM_GPTMRIS_R_TATORIS_BIT                 (0)
#define GPWTM_GPTMRIS_R_TATORIS_NOACTIVE            (0x00000000)
#define GPWTM_GPTMRIS_R_TATORIS_ACTIVE              (0x00000001)

#define GPWTM_GPTMRIS_TATORIS_MASK                  (0x00000001)
#define GPWTM_GPTMRIS_TATORIS_NOACTIVE              (0x00000000)
#define GPWTM_GPTMRIS_TATORIS_ACTIVE                (0x00000001)
//--------

//--------
#define GPWTM_GPTMRIS_R_CAMRIS_MASK                 (0x00000002)
#define GPWTM_GPTMRIS_R_CAMRIS_BIT                  (1)
#define GPWTM_GPTMRIS_R_CAMRIS_NOACTIVE             (0x00000000)
#define GPWTM_GPTMRIS_R_CAMRIS_ACTIVE               (0x00000002)

#define GPWTM_GPTMRIS_CAMRIS_MASK                   (0x00000001)
#define GPWTM_GPTMRIS_CAMRIS_NOACTIVE               (0x00000000)
#define GPWTM_GPTMRIS_CAMRIS_ACTIVE                 (0x00000001)
//--------

//--------
#define GPWTM_GPTMRIS_R_CAERIS_MASK                 (0x00000004)
#define GPWTM_GPTMRIS_R_CAERIS_BIT                  (2)
#define GPWTM_GPTMRIS_R_CAERIS_NOACTIVE             (0x00000000)
#define GPWTM_GPTMRIS_R_CAERIS_ACTIVE               (0x00000004)

#define GPWTM_GPTMRIS_CAERIS_MASK                   (0x00000001)
#define GPWTM_GPTMRIS_CAERIS_NOACTIVE               (0x00000000)
#define GPWTM_GPTMRIS_CAERIS_ACTIVE                 (0x00000001)
//--------

//--------
#define GPWTM_GPTMRIS_R_RTCRIS_MASK                 (0x00000008)
#define GPWTM_GPTMRIS_R_RTCRIS_BIT                  (3)
#define GPWTM_GPTMRIS_R_RTCRIS_NOACTIVE             (0x00000000)
#define GPWTM_GPTMRIS_R_RTCRIS_ACTIVE               (0x00000008)

#define GPWTM_GPTMRIS_RTCRIS_MASK                   (0x00000001)
#define GPWTM_GPTMRIS_RTCRIS_NOACTIVE               (0x00000000)
#define GPWTM_GPTMRIS_RTCRIS_ACTIVE                 (0x00000001)
//--------

//--------
#define GPWTM_GPTMRIS_R_TAMRIS_MASK                 (0x00000010)
#define GPWTM_GPTMRIS_R_TAMRIS_BIT                  (4)
#define GPWTM_GPTMRIS_R_TAMRIS_NOACTIVE             (0x00000000)
#define GPWTM_GPTMRIS_R_TAMRIS_ACTIVE               (0x00000010)

#define GPWTM_GPTMRIS_TAMRIS_MASK                   (0x00000001)
#define GPWTM_GPTMRIS_TAMRIS_NOACTIVE               (0x00000000)
#define GPWTM_GPTMRIS_TAMRIS_ACTIVE                 (0x00000001)
//--------

//--------
#define GPWTM_GPTMRIS_R_TBTORIS_MASK                (0x00000100)
#define GPWTM_GPTMRIS_R_TBTORIS_BIT                 (8)
#define GPWTM_GPTMRIS_R_TBTORIS_NOACTIVE            (0x00000000)
#define GPWTM_GPTMRIS_R_TBTORIS_ACTIVE              (0x00000100)

#define GPWTM_GPTMRIS_TBTORIS_MASK                  (0x00000001)
#define GPWTM_GPTMRIS_TBTORIS_NOACTIVE              (0x00000000)
#define GPWTM_GPTMRIS_TBTORIS_ACTIVE                (0x00000001)
//--------

//--------
#define GPWTM_GPTMRIS_R_CBMRIS_MASK                 (0x00000200)
#define GPWTM_GPTMRIS_R_CBMRIS_BIT                  (9)
#define GPWTM_GPTMRIS_R_CBMRIS_NOACTIVE             (0x00000000)
#define GPWTM_GPTMRIS_R_CBMRIS_ACTIVE               (0x00000200)

#define GPWTM_GPTMRIS_CBMRIS_MASK                   (0x00000001)
#define GPWTM_GPTMRIS_CBMRIS_NOACTIVE               (0x00000000)
#define GPWTM_GPTMRIS_CBMRIS_ACTIVE                 (0x00000001)
//--------

//--------
#define GPWTM_GPTMRIS_R_CBERIS_MASK                 (0x00000400)
#define GPWTM_GPTMRIS_R_CBERIS_BIT                  (10)
#define GPWTM_GPTMRIS_R_CBERIS_NOACTIVE             (0x00000000)
#define GPWTM_GPTMRIS_R_CBERIS_ACTIVE               (0x00000400)

#define GPWTM_GPTMRIS_CBERIS_MASK                   (0x00000001)
#define GPWTM_GPTMRIS_CBERIS_NOACTIVE               (0x00000000)
#define GPWTM_GPTMRIS_CBERIS_ACTIVE                 (0x00000001)
//--------

//--------
#define GPWTM_GPTMRIS_R_TBMRIS_MASK                 (0x00000800)
#define GPWTM_GPTMRIS_R_TBMRIS_BIT                  (11)
#define GPWTM_GPTMRIS_R_TBMRIS_NOACTIVE             (0x00000000)
#define GPWTM_GPTMRIS_R_TBMRIS_ACTIVE               (0x00000800)

#define GPWTM_GPTMRIS_TBMRIS_MASK                   (0x00000001)
#define GPWTM_GPTMRIS_TBMRIS_NOACTIVE               (0x00000000)
#define GPWTM_GPTMRIS_TBMRIS_ACTIVE                 (0x00000001)
//--------

//--------
#define GPWTM_GPTMRIS_R_WUERIS_MASK                 (0x00010000)
#define GPWTM_GPTMRIS_R_WUERIS_BIT                  (16)
#define GPWTM_GPTMRIS_R_WUERIS_NOACTIVE             (0x00000000)
#define GPWTM_GPTMRIS_R_WUERIS_ACTIVE               (0x00010000)

#define GPWTM_GPTMRIS_WUERIS_MASK                   (0x00000001)
#define GPWTM_GPTMRIS_WUERIS_NOACTIVE               (0x00000000)
#define GPWTM_GPTMRIS_WUERIS_ACTIVE                 (0x00000001)
//--------


//--------
#define GPWTM_TA_GPTMTnRIS_R_TnTORIS_MASK           (0x00000001)
#define GPWTM_TA_GPTMTnRIS_R_TnTORIS_BIT            (0)
#define GPWTM_TA_GPTMTnRIS_R_TnTORIS_NOACTIVE       (0x00000000)
#define GPWTM_TA_GPTMTnRIS_R_TnTORIS_ACTIVE         (0x00000001)

#define GPWTM_TA_GPTMTnRIS_TnTORIS_MASK             (0x00000001)
#define GPWTM_TA_GPTMTnRIS_TnTORIS_NOACTIVE         (0x00000000)
#define GPWTM_TA_GPTMTnRIS_TnTORIS_ACTIVE           (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnRIS_R_CnMRIS_MASK            (0x00000002)
#define GPWTM_TA_GPTMTnRIS_R_CnMRIS_BIT             (1)
#define GPWTM_TA_GPTMTnRIS_R_CnMRIS_NOACTIVE        (0x00000000)
#define GPWTM_TA_GPTMTnRIS_R_CnMRIS_ACTIVE          (0x00000002)

#define GPWTM_TA_GPTMTnRIS_CnMRIS_MASK              (0x00000001)
#define GPWTM_TA_GPTMTnRIS_CnMRIS_NOACTIVE          (0x00000000)
#define GPWTM_TA_GPTMTnRIS_CnMRIS_ACTIVE            (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnRIS_R_CnERIS_MASK            (0x00000004)
#define GPWTM_TA_GPTMTnRIS_R_CnERIS_BIT             (2)
#define GPWTM_TA_GPTMTnRIS_R_CnERIS_NOACTIVE        (0x00000000)
#define GPWTM_TA_GPTMTnRIS_R_CnERIS_ACTIVE          (0x00000004)

#define GPWTM_TA_GPTMTnRIS_CnERIS_MASK              (0x00000001)
#define GPWTM_TA_GPTMTnRIS_CnERIS_NOACTIVE          (0x00000000)
#define GPWTM_TA_GPTMTnRIS_CnERIS_ACTIVE            (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnRIS_R_TnMRIS_MASK            (0x00000010)
#define GPWTM_TA_GPTMTnRIS_R_TnMRIS_BIT             (4)
#define GPWTM_TA_GPTMTnRIS_R_TnMRIS_NOACTIVE        (0x00000000)
#define GPWTM_TA_GPTMTnRIS_R_TnMRIS_ACTIVE          (0x00000010)

#define GPWTM_TA_GPTMTnRIS_TnMRIS_MASK              (0x00000001)
#define GPWTM_TA_GPTMTnRIS_TnMRIS_NOACTIVE          (0x00000000)
#define GPWTM_TA_GPTMTnRIS_TnMRIS_ACTIVE            (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnRIS_R_TnTORIS_MASK              (0x00000100)
#define GPWTM_TB_GPTMTnRIS_R_TnTORIS_BIT               (8)
#define GPWTM_TB_GPTMTnRIS_R_TnTORIS_DIS               (0x00000000)
#define GPWTM_TB_GPTMTnRIS_R_TnTORIS_EN                (0x00000100)

#define GPWTM_TB_GPTMTnRIS_TnTORIS_MASK                (0x00000001)
#define GPWTM_TB_GPTMTnRIS_TnTORIS_DIS                 (0x00000000)
#define GPWTM_TB_GPTMTnRIS_TnTORIS_EN                  (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnRIS_R_CnMRIS_MASK               (0x00000200)
#define GPWTM_TB_GPTMTnRIS_R_CnMRIS_BIT                (9)
#define GPWTM_TB_GPTMTnRIS_R_CnMRIS_DIS                (0x00000000)
#define GPWTM_TB_GPTMTnRIS_R_CnMRIS_EN                 (0x00000200)

#define GPWTM_TB_GPTMTnRIS_CnMRIS_MASK                 (0x00000001)
#define GPWTM_TB_GPTMTnRIS_CnMRIS_DIS                  (0x00000000)
#define GPWTM_TB_GPTMTnRIS_CnMRIS_EN                   (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnRIS_R_CnERIS_MASK               (0x00000400)
#define GPWTM_TB_GPTMTnRIS_R_CnERIS_BIT                (10)
#define GPWTM_TB_GPTMTnRIS_R_CnERIS_DIS                (0x00000000)
#define GPWTM_TB_GPTMTnRIS_R_CnERIS_EN                 (0x00000400)

#define GPWTM_TB_GPTMTnRIS_CnERIS_MASK                 (0x00000001)
#define GPWTM_TB_GPTMTnRIS_CnERIS_DIS                  (0x00000000)
#define GPWTM_TB_GPTMTnRIS_CnERIS_EN                   (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnRIS_R_TnMRIS_MASK               (0x00000800)
#define GPWTM_TB_GPTMTnRIS_R_TnMRIS_BIT                (11)
#define GPWTM_TB_GPTMTnRIS_R_TnMRIS_DIS                (0x00000000)
#define GPWTM_TB_GPTMTnRIS_R_TnMRIS_EN                 (0x00000800)

#define GPWTM_TB_GPTMTnRIS_TnMRIS_MASK                 (0x00000001)
#define GPWTM_TB_GPTMTnRIS_TnMRIS_DIS                  (0x00000000)
#define GPWTM_TB_GPTMTnRIS_TnMRIS_EN                   (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnRIS_R_TnTORIS_MASK           (0x00000001)
#define GPWTM_TW_GPTMTnRIS_R_TnTORIS_BIT            (0)
#define GPWTM_TW_GPTMTnRIS_R_TnTORIS_NOACTIVE       (0x00000000)
#define GPWTM_TW_GPTMTnRIS_R_TnTORIS_ACTIVE         (0x00000001)

#define GPWTM_TW_GPTMTnRIS_TnTORIS_MASK             (0x00000001)
#define GPWTM_TW_GPTMTnRIS_TnTORIS_NOACTIVE         (0x00000000)
#define GPWTM_TW_GPTMTnRIS_TnTORIS_ACTIVE           (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnRIS_R_CnMRIS_MASK            (0x00000002)
#define GPWTM_TW_GPTMTnRIS_R_CnMRIS_BIT             (1)
#define GPWTM_TW_GPTMTnRIS_R_CnMRIS_NOACTIVE        (0x00000000)
#define GPWTM_TW_GPTMTnRIS_R_CnMRIS_ACTIVE          (0x00000002)

#define GPWTM_TW_GPTMTnRIS_CnMRIS_MASK              (0x00000001)
#define GPWTM_TW_GPTMTnRIS_CnMRIS_NOACTIVE          (0x00000000)
#define GPWTM_TW_GPTMTnRIS_CnMRIS_ACTIVE            (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnRIS_R_CnERIS_MASK            (0x00000004)
#define GPWTM_TW_GPTMTnRIS_R_CnERIS_BIT             (2)
#define GPWTM_TW_GPTMTnRIS_R_CnERIS_NOACTIVE        (0x00000000)
#define GPWTM_TW_GPTMTnRIS_R_CnERIS_ACTIVE          (0x00000004)

#define GPWTM_TW_GPTMTnRIS_CnERIS_MASK              (0x00000001)
#define GPWTM_TW_GPTMTnRIS_CnERIS_NOACTIVE          (0x00000000)
#define GPWTM_TW_GPTMTnRIS_CnERIS_ACTIVE            (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnRIS_R_RTCRIS_MASK            (0x00000008)
#define GPWTM_TW_GPTMTnRIS_R_RTCRIS_BIT             (3)
#define GPWTM_TW_GPTMTnRIS_R_RTCRIS_NOACTIVE        (0x00000000)
#define GPWTM_TW_GPTMTnRIS_R_RTCRIS_ACTIVE          (0x00000008)

#define GPWTM_TW_GPTMTnRIS_RTCRIS_MASK              (0x00000001)
#define GPWTM_TW_GPTMTnRIS_RTCRIS_NOACTIVE          (0x00000000)
#define GPWTM_TW_GPTMTnRIS_RTCRIS_ACTIVE            (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnRIS_R_TnMRIS_MASK            (0x00000010)
#define GPWTM_TW_GPTMTnRIS_R_TnMRIS_BIT             (4)
#define GPWTM_TW_GPTMTnRIS_R_TnMRIS_NOACTIVE        (0x00000000)
#define GPWTM_TW_GPTMTnRIS_R_TnMRIS_ACTIVE          (0x00000010)

#define GPWTM_TW_GPTMTnRIS_TnMRIS_MASK              (0x00000001)
#define GPWTM_TW_GPTMTnRIS_TnMRIS_NOACTIVE          (0x00000000)
#define GPWTM_TW_GPTMTnRIS_TnMRIS_ACTIVE            (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnRIS_R_WUERIS_MASK            (0x00010000)
#define GPWTM_TW_GPTMTnRIS_R_WUERIS_BIT             (16)
#define GPWTM_TW_GPTMTnRIS_R_WUERIS_NOACTIVE        (0x00000000)
#define GPWTM_TW_GPTMTnRIS_R_WUERIS_ACTIVE          (0x00010000)

#define GPWTM_TW_GPTMTnRIS_WUERIS_MASK              (0x00000001)
#define GPWTM_TW_GPTMTnRIS_WUERIS_NOACTIVE          (0x00000000)
#define GPWTM_TW_GPTMTnRIS_WUERIS_ACTIVE            (0x00000001)
//--------

/* GPTM0 BITBANDING GPTMRIS*/
#define GPTM0_BITBANDING_GPTMRIS_TATORIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TATORIS_BIT*4))))
#define GPTM0_BITBANDING_GPTMRIS_CAMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CAMRIS_BIT*4))))
#define GPTM0_BITBANDING_GPTMRIS_CAERIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CAERIS_BIT*4))))
#define GPTM0_BITBANDING_GPTMRIS_RTCRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_RTCRIS_BIT*4))))
#define GPTM0_BITBANDING_GPTMRIS_TAMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TAMRIS_BIT*4))))
#define GPTM0_BITBANDING_GPTMRIS_TBTORIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TBTORIS_BIT*4))))
#define GPTM0_BITBANDING_GPTMRIS_CBMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CBMRIS_BIT*4))))
#define GPTM0_BITBANDING_GPTMRIS_CBERIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CBERIS_BIT*4))))
#define GPTM0_BITBANDING_GPTMRIS_TBMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TBMRIS_BIT*4))))
#define GPTM0_BITBANDING_GPTMRIS_WUERIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_WUERIS_BIT*4))))

#define GPTM0_BITBANDING_TA_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPTM0_BITBANDING_TB_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPTM0_BITBANDING_TW_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnRIS_RTCRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_RTCRIS_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_TnMRIS_BIT*4))))

/* GPTM1 BITBANDING GPTMRIS*/
#define GPTM1_BITBANDING_GPTMRIS_TATORIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TATORIS_BIT*4))))
#define GPTM1_BITBANDING_GPTMRIS_CAMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CAMRIS_BIT*4))))
#define GPTM1_BITBANDING_GPTMRIS_CAERIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CAERIS_BIT*4))))
#define GPTM1_BITBANDING_GPTMRIS_RTCRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_RTCRIS_BIT*4))))
#define GPTM1_BITBANDING_GPTMRIS_TAMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TAMRIS_BIT*4))))
#define GPTM1_BITBANDING_GPTMRIS_TBTORIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TBTORIS_BIT*4))))
#define GPTM1_BITBANDING_GPTMRIS_CBMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CBMRIS_BIT*4))))
#define GPTM1_BITBANDING_GPTMRIS_CBERIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CBERIS_BIT*4))))
#define GPTM1_BITBANDING_GPTMRIS_TBMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TBMRIS_BIT*4))))
#define GPTM1_BITBANDING_GPTMRIS_WUERIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_WUERIS_BIT*4))))

#define GPTM1_BITBANDING_TA_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPTM1_BITBANDING_TB_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPTM1_BITBANDING_TW_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnRIS_RTCRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_RTCRIS_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_TnMRIS_BIT*4))))

/* GPTM2 BITBANDING GPTMRIS*/
#define GPTM2_BITBANDING_GPTMRIS_TATORIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TATORIS_BIT*4))))
#define GPTM2_BITBANDING_GPTMRIS_CAMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CAMRIS_BIT*4))))
#define GPTM2_BITBANDING_GPTMRIS_CAERIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CAERIS_BIT*4))))
#define GPTM2_BITBANDING_GPTMRIS_RTCRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_RTCRIS_BIT*4))))
#define GPTM2_BITBANDING_GPTMRIS_TAMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TAMRIS_BIT*4))))
#define GPTM2_BITBANDING_GPTMRIS_TBTORIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TBTORIS_BIT*4))))
#define GPTM2_BITBANDING_GPTMRIS_CBMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CBMRIS_BIT*4))))
#define GPTM2_BITBANDING_GPTMRIS_CBERIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CBERIS_BIT*4))))
#define GPTM2_BITBANDING_GPTMRIS_TBMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TBMRIS_BIT*4))))
#define GPTM2_BITBANDING_GPTMRIS_WUERIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_WUERIS_BIT*4))))

#define GPTM2_BITBANDING_TA_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPTM2_BITBANDING_TB_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPTM2_BITBANDING_TW_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnRIS_RTCRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_RTCRIS_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_TnMRIS_BIT*4))))

/* GPTM3 BITBANDING GPTMRIS*/
#define GPTM3_BITBANDING_GPTMRIS_TATORIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TATORIS_BIT*4))))
#define GPTM3_BITBANDING_GPTMRIS_CAMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CAMRIS_BIT*4))))
#define GPTM3_BITBANDING_GPTMRIS_CAERIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CAERIS_BIT*4))))
#define GPTM3_BITBANDING_GPTMRIS_RTCRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_RTCRIS_BIT*4))))
#define GPTM3_BITBANDING_GPTMRIS_TAMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TAMRIS_BIT*4))))
#define GPTM3_BITBANDING_GPTMRIS_TBTORIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TBTORIS_BIT*4))))
#define GPTM3_BITBANDING_GPTMRIS_CBMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CBMRIS_BIT*4))))
#define GPTM3_BITBANDING_GPTMRIS_CBERIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CBERIS_BIT*4))))
#define GPTM3_BITBANDING_GPTMRIS_TBMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TBMRIS_BIT*4))))
#define GPTM3_BITBANDING_GPTMRIS_WUERIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_WUERIS_BIT*4))))

#define GPTM3_BITBANDING_TA_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPTM3_BITBANDING_TB_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPTM3_BITBANDING_TW_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnRIS_RTCRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_RTCRIS_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_TnMRIS_BIT*4))))

/* GPTM4 BITBANDING GPTMRIS*/
#define GPTM4_BITBANDING_GPTMRIS_TATORIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TATORIS_BIT*4))))
#define GPTM4_BITBANDING_GPTMRIS_CAMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CAMRIS_BIT*4))))
#define GPTM4_BITBANDING_GPTMRIS_CAERIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CAERIS_BIT*4))))
#define GPTM4_BITBANDING_GPTMRIS_RTCRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_RTCRIS_BIT*4))))
#define GPTM4_BITBANDING_GPTMRIS_TAMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TAMRIS_BIT*4))))
#define GPTM4_BITBANDING_GPTMRIS_TBTORIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TBTORIS_BIT*4))))
#define GPTM4_BITBANDING_GPTMRIS_CBMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CBMRIS_BIT*4))))
#define GPTM4_BITBANDING_GPTMRIS_CBERIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CBERIS_BIT*4))))
#define GPTM4_BITBANDING_GPTMRIS_TBMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TBMRIS_BIT*4))))
#define GPTM4_BITBANDING_GPTMRIS_WUERIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_WUERIS_BIT*4))))

#define GPTM4_BITBANDING_TA_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPTM4_BITBANDING_TB_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPTM4_BITBANDING_TW_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnRIS_RTCRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_RTCRIS_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_TnMRIS_BIT*4))))

/* GPTM5 BITBANDING GPTMRIS*/
#define GPTM5_BITBANDING_GPTMRIS_TATORIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TATORIS_BIT*4))))
#define GPTM5_BITBANDING_GPTMRIS_CAMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CAMRIS_BIT*4))))
#define GPTM5_BITBANDING_GPTMRIS_CAERIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CAERIS_BIT*4))))
#define GPTM5_BITBANDING_GPTMRIS_RTCRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_RTCRIS_BIT*4))))
#define GPTM5_BITBANDING_GPTMRIS_TAMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TAMRIS_BIT*4))))
#define GPTM5_BITBANDING_GPTMRIS_TBTORIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TBTORIS_BIT*4))))
#define GPTM5_BITBANDING_GPTMRIS_CBMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CBMRIS_BIT*4))))
#define GPTM5_BITBANDING_GPTMRIS_CBERIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_CBERIS_BIT*4))))
#define GPTM5_BITBANDING_GPTMRIS_TBMRIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_TBMRIS_BIT*4))))
#define GPTM5_BITBANDING_GPTMRIS_WUERIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMRIS_OFFSET)*32)+(GPTM_GPTMRIS_R_WUERIS_BIT*4))))

#define GPTM5_BITBANDING_TA_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnRIS_OFFSET)*32)+(GPTM_TA_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPTM5_BITBANDING_TB_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnRIS_OFFSET)*32)+(GPTM_TB_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPTM5_BITBANDING_TW_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnRIS_RTCRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_RTCRIS_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnRIS_OFFSET)*32)+(GPTM_TW_GPTMTnRIS_R_TnMRIS_BIT*4))))

/* GPTM0 BITBANDING GPTMRIS*/
#define GPWTM0_BITBANDING_GPTMRIS_TATORIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TATORIS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMRIS_CAMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CAMRIS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMRIS_CAERIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CAERIS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMRIS_RTCRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_RTCRIS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMRIS_TAMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TAMRIS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMRIS_TBTORIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TBTORIS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMRIS_CBMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CBMRIS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMRIS_CBERIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CBERIS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMRIS_TBMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TBMRIS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMRIS_WUERIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_WUERIS_BIT*4))))

#define GPWTM0_BITBANDING_TA_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPWTM0_BITBANDING_TB_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPWTM0_BITBANDING_TW_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnRIS_RTCRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_RTCRIS_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_TnMRIS_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnRIS_WUERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_WUERIS_BIT*4))))

/* GPTM0 BITBANDING GPTMRIS*/
#define GPWTM1_BITBANDING_GPTMRIS_TATORIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TATORIS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMRIS_CAMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CAMRIS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMRIS_CAERIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CAERIS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMRIS_RTCRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_RTCRIS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMRIS_TAMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TAMRIS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMRIS_TBTORIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TBTORIS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMRIS_CBMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CBMRIS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMRIS_CBERIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CBERIS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMRIS_TBMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TBMRIS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMRIS_WUERIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_WUERIS_BIT*4))))

#define GPWTM1_BITBANDING_TA_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPWTM1_BITBANDING_TB_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPWTM1_BITBANDING_TW_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnRIS_RTCRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_RTCRIS_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_TnMRIS_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnRIS_WUERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_WUERIS_BIT*4))))

/* GPTM0 BITBANDING GPTMRIS*/
#define GPWTM2_BITBANDING_GPTMRIS_TATORIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TATORIS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMRIS_CAMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CAMRIS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMRIS_CAERIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CAERIS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMRIS_RTCRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_RTCRIS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMRIS_TAMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TAMRIS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMRIS_TBTORIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TBTORIS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMRIS_CBMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CBMRIS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMRIS_CBERIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CBERIS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMRIS_TBMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TBMRIS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMRIS_WUERIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_WUERIS_BIT*4))))

#define GPWTM2_BITBANDING_TA_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPWTM2_BITBANDING_TB_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPWTM2_BITBANDING_TW_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnRIS_RTCRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_RTCRIS_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_TnMRIS_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnRIS_WUERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_WUERIS_BIT*4))))

/* GPTM0 BITBANDING GPTMRIS*/
#define GPWTM3_BITBANDING_GPTMRIS_TATORIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TATORIS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMRIS_CAMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CAMRIS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMRIS_CAERIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CAERIS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMRIS_RTCRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_RTCRIS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMRIS_TAMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TAMRIS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMRIS_TBTORIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TBTORIS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMRIS_CBMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CBMRIS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMRIS_CBERIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CBERIS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMRIS_TBMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TBMRIS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMRIS_WUERIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_WUERIS_BIT*4))))

#define GPWTM3_BITBANDING_TA_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPWTM3_BITBANDING_TB_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPWTM3_BITBANDING_TW_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnRIS_RTCRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_RTCRIS_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_TnMRIS_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnRIS_WUERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_WUERIS_BIT*4))))

/* GPTM0 BITBANDING GPTMRIS*/
#define GPWTM4_BITBANDING_GPTMRIS_TATORIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TATORIS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMRIS_CAMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CAMRIS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMRIS_CAERIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CAERIS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMRIS_RTCRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_RTCRIS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMRIS_TAMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TAMRIS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMRIS_TBTORIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TBTORIS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMRIS_CBMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CBMRIS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMRIS_CBERIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CBERIS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMRIS_TBMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TBMRIS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMRIS_WUERIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_WUERIS_BIT*4))))

#define GPWTM4_BITBANDING_TA_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPWTM4_BITBANDING_TB_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPWTM4_BITBANDING_TW_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnRIS_RTCRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_RTCRIS_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_TnMRIS_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnRIS_WUERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_WUERIS_BIT*4))))

/* GPTM0 BITBANDING GPTMRIS*/
#define GPWTM5_BITBANDING_GPTMRIS_TATORIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TATORIS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMRIS_CAMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CAMRIS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMRIS_CAERIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CAERIS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMRIS_RTCRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_RTCRIS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMRIS_TAMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TAMRIS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMRIS_TBTORIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TBTORIS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMRIS_CBMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CBMRIS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMRIS_CBERIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_CBERIS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMRIS_TBMRIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_TBMRIS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMRIS_WUERIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMRIS_OFFSET)*32)+(GPWTM_GPTMRIS_R_WUERIS_BIT*4))))

#define GPWTM5_BITBANDING_TA_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnRIS_OFFSET)*32)+(GPWTM_TA_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPWTM5_BITBANDING_TB_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnRIS_OFFSET)*32)+(GPWTM_TB_GPTMTnRIS_R_TnMRIS_BIT*4))))

#define GPWTM5_BITBANDING_TW_GPTMTnRIS_TnTORIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_TnTORIS_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnRIS_CnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_CnMRIS_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnRIS_RTCRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_RTCRIS_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnRIS_CnERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_CnERIS_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnRIS_TnMRIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_TnMRIS_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnRIS_WUERIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnRIS_OFFSET)*32)+(GPWTM_TW_GPTMTnRIS_R_WUERIS_BIT*4))))

/******************************************************************************************
************************************ 8 GPTMMIS *********************************************
******************************************************************************************/

/* GPTM0 GPTMMIS*/
#define GPTM0_BITBANDING_GPTMMIS            (((BITBANDING_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMMIS_OFFSET)*32))))
#define GPTM0_GPTMMIS                       (((GPTMMIS_TypeDef*)(GPTM0_BASE + GPTM_GPTMMIS_OFFSET )))
#define GPTM0_GPTMMIS_R                     (*((volatile const uint32_t *)(GPTM0_BASE +GPTM_GPTMMIS_OFFSET)))

#define GPTM0_BITBANDING_TA_GPTMTnMIS       (((BITBANDING_TA_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32))))
#define GPTM0_TA_GPTMTnMIS                  (((TA_GPTMMIS_TypeDef*)(GPTM0_BASE + GPTM_TA_GPTMTnMIS_OFFSET )))
#define GPTM0_TA_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM0_BASE +GPTM_TA_GPTMTnMIS_OFFSET)))

#define GPTM0_BITBANDING_TB_GPTMTnMIS       (((BITBANDING_TB_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32))))
#define GPTM0_TB_GPTMTnMIS                  (((TB_GPTMMIS_TypeDef*)(GPTM0_BASE + GPTM_TB_GPTMTnMIS_OFFSET )))
#define GPTM0_TB_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM0_BASE +GPTM_TB_GPTMTnMIS_OFFSET)))

#define GPTM0_BITBANDING_TW_GPTMTnMIS       (((BITBANDING_TW_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32))))
#define GPTM0_TW_GPTMTnMIS                  (((TW_GPTMMIS_TypeDef*)(GPTM0_BASE + GPTM_TW_GPTMTnMIS_OFFSET )))
#define GPTM0_TW_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM0_BASE +GPTM_TW_GPTMTnMIS_OFFSET)))

/* GPTM1 GPTMMIS*/
#define GPTM1_BITBANDING_GPTMMIS            (((BITBANDING_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMMIS_OFFSET)*32))))
#define GPTM1_GPTMMIS                       (((GPTMMIS_TypeDef*)(GPTM1_BASE + GPTM_GPTMMIS_OFFSET )))
#define GPTM1_GPTMMIS_R                     (*((volatile const uint32_t *)(GPTM1_BASE +GPTM_GPTMMIS_OFFSET)))

#define GPTM1_BITBANDING_TA_GPTMTnMIS       (((BITBANDING_TA_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32))))
#define GPTM1_TA_GPTMTnMIS                  (((TA_GPTMMIS_TypeDef*)(GPTM1_BASE + GPTM_TA_GPTMTnMIS_OFFSET )))
#define GPTM1_TA_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM1_BASE +GPTM_TA_GPTMTnMIS_OFFSET)))

#define GPTM1_BITBANDING_TB_GPTMTnMIS       (((BITBANDING_TB_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32))))
#define GPTM1_TB_GPTMTnMIS                  (((TB_GPTMMIS_TypeDef*)(GPTM1_BASE + GPTM_TB_GPTMTnMIS_OFFSET )))
#define GPTM1_TB_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM1_BASE +GPTM_TB_GPTMTnMIS_OFFSET)))

#define GPTM1_BITBANDING_TW_GPTMTnMIS       (((BITBANDING_TW_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32))))
#define GPTM1_TW_GPTMTnMIS                  (((TW_GPTMMIS_TypeDef*)(GPTM1_BASE + GPTM_TW_GPTMTnMIS_OFFSET )))
#define GPTM1_TW_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM1_BASE +GPTM_TW_GPTMTnMIS_OFFSET)))

/* GPTM1 GPTMMIS*/
#define GPTM1_BITBANDING_GPTMMIS            (((BITBANDING_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMMIS_OFFSET)*32))))
#define GPTM1_GPTMMIS                       (((GPTMMIS_TypeDef*)(GPTM1_BASE + GPTM_GPTMMIS_OFFSET )))
#define GPTM1_GPTMMIS_R                     (*((volatile const uint32_t *)(GPTM1_BASE +GPTM_GPTMMIS_OFFSET)))

#define GPTM1_BITBANDING_TA_GPTMTnMIS       (((BITBANDING_TA_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32))))
#define GPTM1_TA_GPTMTnMIS                  (((TA_GPTMMIS_TypeDef*)(GPTM1_BASE + GPTM_TA_GPTMTnMIS_OFFSET )))
#define GPTM1_TA_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM1_BASE +GPTM_TA_GPTMTnMIS_OFFSET)))

#define GPTM1_BITBANDING_TB_GPTMTnMIS       (((BITBANDING_TB_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32))))
#define GPTM1_TB_GPTMTnMIS                  (((TB_GPTMMIS_TypeDef*)(GPTM1_BASE + GPTM_TB_GPTMTnMIS_OFFSET )))
#define GPTM1_TB_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM1_BASE +GPTM_TB_GPTMTnMIS_OFFSET)))

#define GPTM1_BITBANDING_TW_GPTMTnMIS       (((BITBANDING_TW_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32))))
#define GPTM1_TW_GPTMTnMIS                  (((TW_GPTMMIS_TypeDef*)(GPTM1_BASE + GPTM_TW_GPTMTnMIS_OFFSET )))
#define GPTM1_TW_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM1_BASE +GPTM_TW_GPTMTnMIS_OFFSET)))

/* GPTM2 GPTMMIS*/
#define GPTM2_BITBANDING_GPTMMIS            (((BITBANDING_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMMIS_OFFSET)*32))))
#define GPTM2_GPTMMIS                       (((GPTMMIS_TypeDef*)(GPTM2_BASE + GPTM_GPTMMIS_OFFSET )))
#define GPTM2_GPTMMIS_R                     (*((volatile const uint32_t *)(GPTM2_BASE +GPTM_GPTMMIS_OFFSET)))

#define GPTM2_BITBANDING_TA_GPTMTnMIS       (((BITBANDING_TA_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32))))
#define GPTM2_TA_GPTMTnMIS                  (((TA_GPTMMIS_TypeDef*)(GPTM2_BASE + GPTM_TA_GPTMTnMIS_OFFSET )))
#define GPTM2_TA_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM2_BASE +GPTM_TA_GPTMTnMIS_OFFSET)))

#define GPTM2_BITBANDING_TB_GPTMTnMIS       (((BITBANDING_TB_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32))))
#define GPTM2_TB_GPTMTnMIS                  (((TB_GPTMMIS_TypeDef*)(GPTM2_BASE + GPTM_TB_GPTMTnMIS_OFFSET )))
#define GPTM2_TB_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM2_BASE +GPTM_TB_GPTMTnMIS_OFFSET)))

#define GPTM2_BITBANDING_TW_GPTMTnMIS       (((BITBANDING_TW_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32))))
#define GPTM2_TW_GPTMTnMIS                  (((TW_GPTMMIS_TypeDef*)(GPTM2_BASE + GPTM_TW_GPTMTnMIS_OFFSET )))
#define GPTM2_TW_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM2_BASE +GPTM_TW_GPTMTnMIS_OFFSET)))

/* GPTM3 GPTMMIS*/
#define GPTM3_BITBANDING_GPTMMIS            (((BITBANDING_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMMIS_OFFSET)*32))))
#define GPTM3_GPTMMIS                       (((GPTMMIS_TypeDef*)(GPTM3_BASE + GPTM_GPTMMIS_OFFSET )))
#define GPTM3_GPTMMIS_R                     (*((volatile const uint32_t *)(GPTM3_BASE +GPTM_GPTMMIS_OFFSET)))

#define GPTM3_BITBANDING_TA_GPTMTnMIS       (((BITBANDING_TA_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32))))
#define GPTM3_TA_GPTMTnMIS                  (((TA_GPTMMIS_TypeDef*)(GPTM3_BASE + GPTM_TA_GPTMTnMIS_OFFSET )))
#define GPTM3_TA_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM3_BASE +GPTM_TA_GPTMTnMIS_OFFSET)))

#define GPTM3_BITBANDING_TB_GPTMTnMIS       (((BITBANDING_TB_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32))))
#define GPTM3_TB_GPTMTnMIS                  (((TB_GPTMMIS_TypeDef*)(GPTM3_BASE + GPTM_TB_GPTMTnMIS_OFFSET )))
#define GPTM3_TB_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM3_BASE +GPTM_TB_GPTMTnMIS_OFFSET)))

#define GPTM3_BITBANDING_TW_GPTMTnMIS       (((BITBANDING_TW_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32))))
#define GPTM3_TW_GPTMTnMIS                  (((TW_GPTMMIS_TypeDef*)(GPTM3_BASE + GPTM_TW_GPTMTnMIS_OFFSET )))
#define GPTM3_TW_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM3_BASE +GPTM_TW_GPTMTnMIS_OFFSET)))

/* GPTM4 GPTMMIS*/
#define GPTM4_BITBANDING_GPTMMIS            (((BITBANDING_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMMIS_OFFSET)*32))))
#define GPTM4_GPTMMIS                       (((GPTMMIS_TypeDef*)(GPTM4_BASE + GPTM_GPTMMIS_OFFSET )))
#define GPTM4_GPTMMIS_R                     (*((volatile const uint32_t *)(GPTM4_BASE +GPTM_GPTMMIS_OFFSET)))

#define GPTM4_BITBANDING_TA_GPTMTnMIS       (((BITBANDING_TA_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32))))
#define GPTM4_TA_GPTMTnMIS                  (((TA_GPTMMIS_TypeDef*)(GPTM4_BASE + GPTM_TA_GPTMTnMIS_OFFSET )))
#define GPTM4_TA_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM4_BASE +GPTM_TA_GPTMTnMIS_OFFSET)))

#define GPTM4_BITBANDING_TB_GPTMTnMIS       (((BITBANDING_TB_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32))))
#define GPTM4_TB_GPTMTnMIS                  (((TB_GPTMMIS_TypeDef*)(GPTM4_BASE + GPTM_TB_GPTMTnMIS_OFFSET )))
#define GPTM4_TB_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM4_BASE +GPTM_TB_GPTMTnMIS_OFFSET)))

#define GPTM4_BITBANDING_TW_GPTMTnMIS       (((BITBANDING_TW_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32))))
#define GPTM4_TW_GPTMTnMIS                  (((TW_GPTMMIS_TypeDef*)(GPTM4_BASE + GPTM_TW_GPTMTnMIS_OFFSET )))
#define GPTM4_TW_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM4_BASE +GPTM_TW_GPTMTnMIS_OFFSET)))

/* GPTM5 GPTMMIS*/
#define GPTM5_BITBANDING_GPTMMIS            (((BITBANDING_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMMIS_OFFSET)*32))))
#define GPTM5_GPTMMIS                       (((GPTMMIS_TypeDef*)(GPTM5_BASE + GPTM_GPTMMIS_OFFSET )))
#define GPTM5_GPTMMIS_R                     (*((volatile const uint32_t *)(GPTM5_BASE +GPTM_GPTMMIS_OFFSET)))

#define GPTM5_BITBANDING_TA_GPTMTnMIS       (((BITBANDING_TA_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32))))
#define GPTM5_TA_GPTMTnMIS                  (((TA_GPTMMIS_TypeDef*)(GPTM5_BASE + GPTM_TA_GPTMTnMIS_OFFSET )))
#define GPTM5_TA_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM5_BASE +GPTM_TA_GPTMTnMIS_OFFSET)))

#define GPTM5_BITBANDING_TB_GPTMTnMIS       (((BITBANDING_TB_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32))))
#define GPTM5_TB_GPTMTnMIS                  (((TB_GPTMMIS_TypeDef*)(GPTM5_BASE + GPTM_TB_GPTMTnMIS_OFFSET )))
#define GPTM5_TB_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM5_BASE +GPTM_TB_GPTMTnMIS_OFFSET)))

#define GPTM5_BITBANDING_TW_GPTMTnMIS       (((BITBANDING_TW_GPTMMIS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32))))
#define GPTM5_TW_GPTMTnMIS                  (((TW_GPTMMIS_TypeDef*)(GPTM5_BASE + GPTM_TW_GPTMTnMIS_OFFSET )))
#define GPTM5_TW_GPTMTnMIS_R                (*((volatile const uint32_t *)(GPTM5_BASE +GPTM_TW_GPTMTnMIS_OFFSET)))

/* GPWTM0 GPTMMIS*/
#define GPWTM0_BITBANDING_GPTMMIS           (((BITBANDING_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMMIS_OFFSET)*32))))
#define GPWTM0_GPTMMIS                      (((GPTMMIS_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMMIS_OFFSET )))
#define GPWTM0_GPTMMIS_R                    (*((volatile const uint32_t *)(GPWTM0_BASE +GPWTM_GPTMMIS_OFFSET)))

#define GPWTM0_BITBANDING_TA_GPTMTnMIS      (((BITBANDING_TA_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32))))
#define GPWTM0_TA_GPTMTnMIS                 (((TA_GPTMMIS_TypeDef*)(GPWTM0_BASE + GPWTM_TA_GPTMTnMIS_OFFSET )))
#define GPWTM0_TA_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM0_BASE +GPWTM_TA_GPTMTnMIS_OFFSET)))

#define GPWTM0_BITBANDING_TB_GPTMTnMIS      (((BITBANDING_TB_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32))))
#define GPWTM0_TB_GPTMTnMIS                 (((TB_GPTMMIS_TypeDef*)(GPWTM0_BASE + GPWTM_TB_GPTMTnMIS_OFFSET )))
#define GPWTM0_TB_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM0_BASE +GPWTM_TB_GPTMTnMIS_OFFSET)))

#define GPWTM0_BITBANDING_TW_GPTMTnMIS      (((BITBANDING_TW_GPWTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32))))
#define GPWTM0_TW_GPTMTnMIS                 (((TW_GPWTMMIS_TypeDef*)(GPWTM0_BASE + GPWTM_TW_GPTMTnMIS_OFFSET )))
#define GPWTM0_TW_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM0_BASE +GPWTM_TW_GPTMTnMIS_OFFSET)))

/* GPWTM1 GPTMMIS*/
#define GPWTM1_BITBANDING_GPTMMIS           (((BITBANDING_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMMIS_OFFSET)*32))))
#define GPWTM1_GPTMMIS                      (((GPTMMIS_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMMIS_OFFSET )))
#define GPWTM1_GPTMMIS_R                    (*((volatile const uint32_t *)(GPWTM1_BASE +GPWTM_GPTMMIS_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnMIS      (((BITBANDING_TA_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnMIS                 (((TA_GPTMMIS_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnMIS_OFFSET )))
#define GPWTM1_TA_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnMIS_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnMIS      (((BITBANDING_TB_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnMIS                 (((TB_GPTMMIS_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnMIS_OFFSET )))
#define GPWTM1_TB_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnMIS_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnMIS      (((BITBANDING_TW_GPWTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnMIS                 (((TW_GPWTMMIS_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnMIS_OFFSET )))
#define GPWTM1_TW_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnMIS_OFFSET)))

/* GPWTM1 GPTMMIS*/
#define GPWTM1_BITBANDING_GPTMMIS           (((BITBANDING_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMMIS_OFFSET)*32))))
#define GPWTM1_GPTMMIS                      (((GPTMMIS_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMMIS_OFFSET )))
#define GPWTM1_GPTMMIS_R                    (*((volatile const uint32_t *)(GPWTM1_BASE +GPWTM_GPTMMIS_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnMIS      (((BITBANDING_TA_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnMIS                 (((TA_GPTMMIS_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnMIS_OFFSET )))
#define GPWTM1_TA_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnMIS_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnMIS      (((BITBANDING_TB_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnMIS                 (((TB_GPTMMIS_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnMIS_OFFSET )))
#define GPWTM1_TB_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnMIS_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnMIS      (((BITBANDING_TW_GPWTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnMIS                 (((TW_GPWTMMIS_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnMIS_OFFSET )))
#define GPWTM1_TW_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnMIS_OFFSET)))

/* GPWTM2 GPTMMIS*/
#define GPWTM2_BITBANDING_GPTMMIS           (((BITBANDING_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMMIS_OFFSET)*32))))
#define GPWTM2_GPTMMIS                      (((GPTMMIS_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMMIS_OFFSET )))
#define GPWTM2_GPTMMIS_R                    (*((volatile const uint32_t *)(GPWTM2_BASE +GPWTM_GPTMMIS_OFFSET)))

#define GPWTM2_BITBANDING_TA_GPTMTnMIS      (((BITBANDING_TA_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32))))
#define GPWTM2_TA_GPTMTnMIS                 (((TA_GPTMMIS_TypeDef*)(GPWTM2_BASE + GPWTM_TA_GPTMTnMIS_OFFSET )))
#define GPWTM2_TA_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM2_BASE +GPWTM_TA_GPTMTnMIS_OFFSET)))

#define GPWTM2_BITBANDING_TB_GPTMTnMIS      (((BITBANDING_TB_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32))))
#define GPWTM2_TB_GPTMTnMIS                 (((TB_GPTMMIS_TypeDef*)(GPWTM2_BASE + GPWTM_TB_GPTMTnMIS_OFFSET )))
#define GPWTM2_TB_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM2_BASE +GPWTM_TB_GPTMTnMIS_OFFSET)))

#define GPWTM2_BITBANDING_TW_GPTMTnMIS      (((BITBANDING_TW_GPWTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32))))
#define GPWTM2_TW_GPTMTnMIS                 (((TW_GPWTMMIS_TypeDef*)(GPWTM2_BASE + GPWTM_TW_GPTMTnMIS_OFFSET )))
#define GPWTM2_TW_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM2_BASE +GPWTM_TW_GPTMTnMIS_OFFSET)))

/* GPWTM3 GPTMMIS*/
#define GPWTM3_BITBANDING_GPTMMIS           (((BITBANDING_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMMIS_OFFSET)*32))))
#define GPWTM3_GPTMMIS                      (((GPTMMIS_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMMIS_OFFSET )))
#define GPWTM3_GPTMMIS_R                    (*((volatile const uint32_t *)(GPWTM3_BASE +GPWTM_GPTMMIS_OFFSET)))

#define GPWTM3_BITBANDING_TA_GPTMTnMIS      (((BITBANDING_TA_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32))))
#define GPWTM3_TA_GPTMTnMIS                 (((TA_GPTMMIS_TypeDef*)(GPWTM3_BASE + GPWTM_TA_GPTMTnMIS_OFFSET )))
#define GPWTM3_TA_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM3_BASE +GPWTM_TA_GPTMTnMIS_OFFSET)))

#define GPWTM3_BITBANDING_TB_GPTMTnMIS      (((BITBANDING_TB_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32))))
#define GPWTM3_TB_GPTMTnMIS                 (((TB_GPTMMIS_TypeDef*)(GPWTM3_BASE + GPWTM_TB_GPTMTnMIS_OFFSET )))
#define GPWTM3_TB_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM3_BASE +GPWTM_TB_GPTMTnMIS_OFFSET)))

#define GPWTM3_BITBANDING_TW_GPTMTnMIS      (((BITBANDING_TW_GPWTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32))))
#define GPWTM3_TW_GPTMTnMIS                 (((TW_GPWTMMIS_TypeDef*)(GPWTM3_BASE + GPWTM_TW_GPTMTnMIS_OFFSET )))
#define GPWTM3_TW_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM3_BASE +GPWTM_TW_GPTMTnMIS_OFFSET)))

/* GPWTM4 GPTMMIS*/
#define GPWTM4_BITBANDING_GPTMMIS           (((BITBANDING_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMMIS_OFFSET)*32))))
#define GPWTM4_GPTMMIS                      (((GPTMMIS_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMMIS_OFFSET )))
#define GPWTM4_GPTMMIS_R                    (*((volatile const uint32_t *)(GPWTM4_BASE +GPWTM_GPTMMIS_OFFSET)))

#define GPWTM4_BITBANDING_TA_GPTMTnMIS      (((BITBANDING_TA_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32))))
#define GPWTM4_TA_GPTMTnMIS                 (((TA_GPTMMIS_TypeDef*)(GPWTM4_BASE + GPWTM_TA_GPTMTnMIS_OFFSET )))
#define GPWTM4_TA_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM4_BASE +GPWTM_TA_GPTMTnMIS_OFFSET)))

#define GPWTM4_BITBANDING_TB_GPTMTnMIS      (((BITBANDING_TB_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32))))
#define GPWTM4_TB_GPTMTnMIS                 (((TB_GPTMMIS_TypeDef*)(GPWTM4_BASE + GPWTM_TB_GPTMTnMIS_OFFSET )))
#define GPWTM4_TB_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM4_BASE +GPWTM_TB_GPTMTnMIS_OFFSET)))

#define GPWTM4_BITBANDING_TW_GPTMTnMIS      (((BITBANDING_TW_GPWTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32))))
#define GPWTM4_TW_GPTMTnMIS                 (((TW_GPWTMMIS_TypeDef*)(GPWTM4_BASE + GPWTM_TW_GPTMTnMIS_OFFSET )))
#define GPWTM4_TW_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM4_BASE +GPWTM_TW_GPTMTnMIS_OFFSET)))

/* GPWTM5 GPTMMIS*/
#define GPWTM5_BITBANDING_GPTMMIS           (((BITBANDING_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMMIS_OFFSET)*32))))
#define GPWTM5_GPTMMIS                      (((GPTMMIS_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMMIS_OFFSET )))
#define GPWTM5_GPTMMIS_R                    (*((volatile const uint32_t *)(GPWTM5_BASE +GPWTM_GPTMMIS_OFFSET)))

#define GPWTM5_BITBANDING_TA_GPTMTnMIS      (((BITBANDING_TA_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32))))
#define GPWTM5_TA_GPTMTnMIS                 (((TA_GPTMMIS_TypeDef*)(GPWTM5_BASE + GPWTM_TA_GPTMTnMIS_OFFSET )))
#define GPWTM5_TA_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM5_BASE +GPWTM_TA_GPTMTnMIS_OFFSET)))

#define GPWTM5_BITBANDING_TB_GPTMTnMIS      (((BITBANDING_TB_GPTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32))))
#define GPWTM5_TB_GPTMTnMIS                 (((TB_GPTMMIS_TypeDef*)(GPWTM5_BASE + GPWTM_TB_GPTMTnMIS_OFFSET )))
#define GPWTM5_TB_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM5_BASE +GPWTM_TB_GPTMTnMIS_OFFSET)))

#define GPWTM5_BITBANDING_TW_GPTMTnMIS      (((BITBANDING_TW_GPWTMMIS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32))))
#define GPWTM5_TW_GPTMTnMIS                 (((TW_GPWTMMIS_TypeDef*)(GPWTM5_BASE + GPWTM_TW_GPTMTnMIS_OFFSET )))
#define GPWTM5_TW_GPTMTnMIS_R               (*((volatile const uint32_t *)(GPWTM5_BASE +GPWTM_TW_GPTMTnMIS_OFFSET)))

//--------
#define GPTM_GPTMMIS_R_TATOMIS_MASK                 (0x00000001)
#define GPTM_GPTMMIS_R_TATOMIS_BIT                  (0)
#define GPTM_GPTMMIS_R_TATOMIS_NOOCCUR              (0x00000000)
#define GPTM_GPTMMIS_R_TATOMIS_OCCUR                (0x00000001)

#define GPTM_GPTMMIS_TATOMIS_MASK                   (0x00000001)
#define GPTM_GPTMMIS_TATOMIS_NOOCCUR                (0x00000000)
#define GPTM_GPTMMIS_TATOMIS_OCCUR                  (0x00000001)
//--------

//--------
#define GPTM_GPTMMIS_R_CAMMIS_MASK                  (0x00000002)
#define GPTM_GPTMMIS_R_CAMMIS_BIT                   (1)
#define GPTM_GPTMMIS_R_CAMMIS_NOOCCUR               (0x00000000)
#define GPTM_GPTMMIS_R_CAMMIS_OCCUR                 (0x00000002)

#define GPTM_GPTMMIS_CAMMIS_MASK                    (0x00000001)
#define GPTM_GPTMMIS_CAMMIS_NOOCCUR                 (0x00000000)
#define GPTM_GPTMMIS_CAMMIS_OCCUR                   (0x00000001)
//--------

//--------
#define GPTM_GPTMMIS_R_CAEMIS_MASK                  (0x00000004)
#define GPTM_GPTMMIS_R_CAEMIS_BIT                   (2)
#define GPTM_GPTMMIS_R_CAEMIS_NOOCCUR               (0x00000000)
#define GPTM_GPTMMIS_R_CAEMIS_OCCUR                 (0x00000004)

#define GPTM_GPTMMIS_CAEMIS_MASK                    (0x00000001)
#define GPTM_GPTMMIS_CAEMIS_NOOCCUR                 (0x00000000)
#define GPTM_GPTMMIS_CAEMIS_OCCUR                   (0x00000001)
//--------

//--------
#define GPTM_GPTMMIS_R_RTCMIS_MASK                  (0x00000008)
#define GPTM_GPTMMIS_R_RTCMIS_BIT                   (3)
#define GPTM_GPTMMIS_R_RTCMIS_NOOCCUR               (0x00000000)
#define GPTM_GPTMMIS_R_RTCMIS_OCCUR                 (0x00000008)

#define GPTM_GPTMMIS_RTCMIS_MASK                    (0x00000001)
#define GPTM_GPTMMIS_RTCMIS_NOOCCUR                 (0x00000000)
#define GPTM_GPTMMIS_RTCMIS_OCCUR                   (0x00000001)
//--------

//--------
#define GPTM_GPTMMIS_R_TAMMIS_MASK                  (0x00000010)
#define GPTM_GPTMMIS_R_TAMMIS_BIT                   (4)
#define GPTM_GPTMMIS_R_TAMMIS_NOOCCUR               (0x00000000)
#define GPTM_GPTMMIS_R_TAMMIS_OCCUR                 (0x00000010)

#define GPTM_GPTMMIS_TAMMIS_MASK                    (0x00000001)
#define GPTM_GPTMMIS_TAMMIS_NOOCCUR                 (0x00000000)
#define GPTM_GPTMMIS_TAMMIS_OCCUR                   (0x00000001)
//--------

//--------
#define GPTM_GPTMMIS_R_TBTOMIS_MASK                 (0x00000100)
#define GPTM_GPTMMIS_R_TBTOMIS_BIT                  (8)
#define GPTM_GPTMMIS_R_TBTOMIS_NOOCCUR              (0x00000000)
#define GPTM_GPTMMIS_R_TBTOMIS_OCCUR                (0x00000100)

#define GPTM_GPTMMIS_TBTOMIS_MASK                   (0x00000001)
#define GPTM_GPTMMIS_TBTOMIS_NOOCCUR                (0x00000000)
#define GPTM_GPTMMIS_TBTOMIS_OCCUR                  (0x00000001)
//--------

//--------
#define GPTM_GPTMMIS_R_CBMMIS_MASK                  (0x00000200)
#define GPTM_GPTMMIS_R_CBMMIS_BIT                   (9)
#define GPTM_GPTMMIS_R_CBMMIS_NOOCCUR               (0x00000000)
#define GPTM_GPTMMIS_R_CBMMIS_OCCUR                 (0x00000200)

#define GPTM_GPTMMIS_CBMMIS_MASK                    (0x00000001)
#define GPTM_GPTMMIS_CBMMIS_NOOCCUR                 (0x00000000)
#define GPTM_GPTMMIS_CBMMIS_OCCUR                   (0x00000001)
//--------

//--------
#define GPTM_GPTMMIS_R_CBEMIS_MASK                  (0x00000400)
#define GPTM_GPTMMIS_R_CBEMIS_BIT                   (10)
#define GPTM_GPTMMIS_R_CBEMIS_NOOCCUR               (0x00000000)
#define GPTM_GPTMMIS_R_CBEMIS_OCCUR                 (0x00000400)

#define GPTM_GPTMMIS_CBEMIS_MASK                    (0x00000001)
#define GPTM_GPTMMIS_CBEMIS_NOOCCUR                 (0x00000000)
#define GPTM_GPTMMIS_CBEMIS_OCCUR                   (0x00000001)
//--------

//--------
#define GPTM_GPTMMIS_R_TBMMIS_MASK                  (0x00000800)
#define GPTM_GPTMMIS_R_TBMMIS_BIT                   (11)
#define GPTM_GPTMMIS_R_TBMMIS_NOOCCUR               (0x00000000)
#define GPTM_GPTMMIS_R_TBMMIS_OCCUR                 (0x00000800)

#define GPTM_GPTMMIS_TBMMIS_MASK                    (0x00000001)
#define GPTM_GPTMMIS_TBMMIS_NOOCCUR                 (0x00000000)
#define GPTM_GPTMMIS_TBMMIS_OCCUR                   (0x00000001)
//--------

//--------
#define GPTM_GPTMMIS_R_WUEMIS_MASK                  (0x00010000)
#define GPTM_GPTMMIS_R_WUEMIS_BIT                   (16)
#define GPTM_GPTMMIS_R_WUEMIS_NOOCCUR               (0x00000000)
#define GPTM_GPTMMIS_R_WUEMIS_OCCUR                 (0x00010000)

#define GPTM_GPTMMIS_WUEMIS_MASK                    (0x00000001)
#define GPTM_GPTMMIS_WUEMIS_NOOCCUR                 (0x00000000)
#define GPTM_GPTMMIS_WUEMIS_OCCUR                   (0x00000001)
//--------


//--------
#define GPTM_TA_GPTMTnMIS_R_TnTOMIS_MASK            (0x00000001)
#define GPTM_TA_GPTMTnMIS_R_TnTOMIS_BIT             (0)
#define GPTM_TA_GPTMTnMIS_R_TnTOMIS_NOOCCUR         (0x00000000)
#define GPTM_TA_GPTMTnMIS_R_TnTOMIS_OCCUR           (0x00000001)

#define GPTM_TA_GPTMTnMIS_TnTOMIS_MASK              (0x00000001)
#define GPTM_TA_GPTMTnMIS_TnTOMIS_NOOCCUR           (0x00000000)
#define GPTM_TA_GPTMTnMIS_TnTOMIS_OCCUR             (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnMIS_R_CnMMIS_MASK             (0x00000002)
#define GPTM_TA_GPTMTnMIS_R_CnMMIS_BIT              (1)
#define GPTM_TA_GPTMTnMIS_R_CnMMIS_NOOCCUR          (0x00000000)
#define GPTM_TA_GPTMTnMIS_R_CnMMIS_OCCUR            (0x00000002)

#define GPTM_TA_GPTMTnMIS_CnMMIS_MASK               (0x00000001)
#define GPTM_TA_GPTMTnMIS_CnMMIS_NOOCCUR            (0x00000000)
#define GPTM_TA_GPTMTnMIS_CnMMIS_OCCUR              (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnMIS_R_CnEMIS_MASK             (0x00000004)
#define GPTM_TA_GPTMTnMIS_R_CnEMIS_BIT              (2)
#define GPTM_TA_GPTMTnMIS_R_CnEMIS_NOOCCUR          (0x00000000)
#define GPTM_TA_GPTMTnMIS_R_CnEMIS_OCCUR            (0x00000004)

#define GPTM_TA_GPTMTnMIS_CnEMIS_MASK               (0x00000001)
#define GPTM_TA_GPTMTnMIS_CnEMIS_NOOCCUR            (0x00000000)
#define GPTM_TA_GPTMTnMIS_CnEMIS_OCCUR              (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnMIS_R_TnMMIS_MASK             (0x00000010)
#define GPTM_TA_GPTMTnMIS_R_TnMMIS_BIT              (4)
#define GPTM_TA_GPTMTnMIS_R_TnMMIS_NOOCCUR          (0x00000000)
#define GPTM_TA_GPTMTnMIS_R_TnMMIS_OCCUR            (0x00000010)

#define GPTM_TA_GPTMTnMIS_TnMMIS_MASK               (0x00000001)
#define GPTM_TA_GPTMTnMIS_TnMMIS_NOOCCUR            (0x00000000)
#define GPTM_TA_GPTMTnMIS_TnMMIS_OCCUR              (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnMIS_R_TnTOMIS_MASK              (0x00000100)
#define GPTM_TB_GPTMTnMIS_R_TnTOMIS_BIT               (8)
#define GPTM_TB_GPTMTnMIS_R_TnTOMIS_DIS               (0x00000000)
#define GPTM_TB_GPTMTnMIS_R_TnTOMIS_EN                (0x00000100)

#define GPTM_TB_GPTMTnMIS_TnTOMIS_MASK                (0x00000001)
#define GPTM_TB_GPTMTnMIS_TnTOMIS_DIS                 (0x00000000)
#define GPTM_TB_GPTMTnMIS_TnTOMIS_EN                  (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnMIS_R_CnMMIS_MASK               (0x00000200)
#define GPTM_TB_GPTMTnMIS_R_CnMMIS_BIT                (9)
#define GPTM_TB_GPTMTnMIS_R_CnMMIS_DIS                (0x00000000)
#define GPTM_TB_GPTMTnMIS_R_CnMMIS_EN                 (0x00000200)

#define GPTM_TB_GPTMTnMIS_CnMMIS_MASK                 (0x00000001)
#define GPTM_TB_GPTMTnMIS_CnMMIS_DIS                  (0x00000000)
#define GPTM_TB_GPTMTnMIS_CnMMIS_EN                   (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnMIS_R_CnEMIS_MASK               (0x00000400)
#define GPTM_TB_GPTMTnMIS_R_CnEMIS_BIT                (10)
#define GPTM_TB_GPTMTnMIS_R_CnEMIS_DIS                (0x00000000)
#define GPTM_TB_GPTMTnMIS_R_CnEMIS_EN                 (0x00000400)

#define GPTM_TB_GPTMTnMIS_CnEMIS_MASK                 (0x00000001)
#define GPTM_TB_GPTMTnMIS_CnEMIS_DIS                  (0x00000000)
#define GPTM_TB_GPTMTnMIS_CnEMIS_EN                   (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnMIS_R_TnMMIS_MASK               (0x00000800)
#define GPTM_TB_GPTMTnMIS_R_TnMMIS_BIT                (11)
#define GPTM_TB_GPTMTnMIS_R_TnMMIS_DIS                (0x00000000)
#define GPTM_TB_GPTMTnMIS_R_TnMMIS_EN                 (0x00000800)

#define GPTM_TB_GPTMTnMIS_TnMMIS_MASK                 (0x00000001)
#define GPTM_TB_GPTMTnMIS_TnMMIS_DIS                  (0x00000000)
#define GPTM_TB_GPTMTnMIS_TnMMIS_EN                   (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnMIS_R_TnTOMIS_MASK            (0x00000001)
#define GPTM_TW_GPTMTnMIS_R_TnTOMIS_BIT             (0)
#define GPTM_TW_GPTMTnMIS_R_TnTOMIS_NOOCCUR         (0x00000000)
#define GPTM_TW_GPTMTnMIS_R_TnTOMIS_OCCUR           (0x00000001)

#define GPTM_TW_GPTMTnMIS_TnTOMIS_MASK              (0x00000001)
#define GPTM_TW_GPTMTnMIS_TnTOMIS_NOOCCUR           (0x00000000)
#define GPTM_TW_GPTMTnMIS_TnTOMIS_OCCUR             (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnMIS_R_CnMMIS_MASK             (0x00000002)
#define GPTM_TW_GPTMTnMIS_R_CnMMIS_BIT              (1)
#define GPTM_TW_GPTMTnMIS_R_CnMMIS_NOOCCUR          (0x00000000)
#define GPTM_TW_GPTMTnMIS_R_CnMMIS_OCCUR            (0x00000002)

#define GPTM_TW_GPTMTnMIS_CnMMIS_MASK               (0x00000001)
#define GPTM_TW_GPTMTnMIS_CnMMIS_NOOCCUR            (0x00000000)
#define GPTM_TW_GPTMTnMIS_CnMMIS_OCCUR              (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnMIS_R_CnEMIS_MASK             (0x00000004)
#define GPTM_TW_GPTMTnMIS_R_CnEMIS_BIT              (2)
#define GPTM_TW_GPTMTnMIS_R_CnEMIS_NOOCCUR          (0x00000000)
#define GPTM_TW_GPTMTnMIS_R_CnEMIS_OCCUR            (0x00000004)

#define GPTM_TW_GPTMTnMIS_CnEMIS_MASK               (0x00000001)
#define GPTM_TW_GPTMTnMIS_CnEMIS_NOOCCUR            (0x00000000)
#define GPTM_TW_GPTMTnMIS_CnEMIS_OCCUR              (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnMIS_R_RTCMIS_MASK             (0x00000008)
#define GPTM_TW_GPTMTnMIS_R_RTCMIS_BIT              (3)
#define GPTM_TW_GPTMTnMIS_R_RTCMIS_NOOCCUR          (0x00000000)
#define GPTM_TW_GPTMTnMIS_R_RTCMIS_OCCUR            (0x00000008)

#define GPTM_TW_GPTMTnMIS_RTCMIS_MASK               (0x00000001)
#define GPTM_TW_GPTMTnMIS_RTCMIS_NOOCCUR            (0x00000000)
#define GPTM_TW_GPTMTnMIS_RTCMIS_OCCUR              (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnMIS_R_TnMMIS_MASK             (0x00000010)
#define GPTM_TW_GPTMTnMIS_R_TnMMIS_BIT              (4)
#define GPTM_TW_GPTMTnMIS_R_TnMMIS_NOOCCUR          (0x00000000)
#define GPTM_TW_GPTMTnMIS_R_TnMMIS_OCCUR            (0x00000010)

#define GPTM_TW_GPTMTnMIS_TnMMIS_MASK               (0x00000001)
#define GPTM_TW_GPTMTnMIS_TnMMIS_NOOCCUR            (0x00000000)
#define GPTM_TW_GPTMTnMIS_TnMMIS_OCCUR              (0x00000001)
//--------

//--------
#define GPWTM_GPTMMIS_R_TATOMIS_MASK                (0x00000001)
#define GPWTM_GPTMMIS_R_TATOMIS_BIT                 (0)
#define GPWTM_GPTMMIS_R_TATOMIS_NOOCCUR             (0x00000000)
#define GPWTM_GPTMMIS_R_TATOMIS_OCCUR               (0x00000001)

#define GPWTM_GPTMMIS_TATOMIS_MASK                  (0x00000001)
#define GPWTM_GPTMMIS_TATOMIS_NOOCCUR               (0x00000000)
#define GPWTM_GPTMMIS_TATOMIS_OCCUR                 (0x00000001)
//--------

//--------
#define GPWTM_GPTMMIS_R_CAMMIS_MASK                 (0x00000002)
#define GPWTM_GPTMMIS_R_CAMMIS_BIT                  (1)
#define GPWTM_GPTMMIS_R_CAMMIS_NOOCCUR              (0x00000000)
#define GPWTM_GPTMMIS_R_CAMMIS_OCCUR                (0x00000002)

#define GPWTM_GPTMMIS_CAMMIS_MASK                   (0x00000001)
#define GPWTM_GPTMMIS_CAMMIS_NOOCCUR                (0x00000000)
#define GPWTM_GPTMMIS_CAMMIS_OCCUR                  (0x00000001)
//--------

//--------
#define GPWTM_GPTMMIS_R_CAEMIS_MASK                 (0x00000004)
#define GPWTM_GPTMMIS_R_CAEMIS_BIT                  (2)
#define GPWTM_GPTMMIS_R_CAEMIS_NOOCCUR              (0x00000000)
#define GPWTM_GPTMMIS_R_CAEMIS_OCCUR                (0x00000004)

#define GPWTM_GPTMMIS_CAEMIS_MASK                   (0x00000001)
#define GPWTM_GPTMMIS_CAEMIS_NOOCCUR                (0x00000000)
#define GPWTM_GPTMMIS_CAEMIS_OCCUR                  (0x00000001)
//--------

//--------
#define GPWTM_GPTMMIS_R_RTCMIS_MASK                 (0x00000008)
#define GPWTM_GPTMMIS_R_RTCMIS_BIT                  (3)
#define GPWTM_GPTMMIS_R_RTCMIS_NOOCCUR              (0x00000000)
#define GPWTM_GPTMMIS_R_RTCMIS_OCCUR                (0x00000008)

#define GPWTM_GPTMMIS_RTCMIS_MASK                   (0x00000001)
#define GPWTM_GPTMMIS_RTCMIS_NOOCCUR                (0x00000000)
#define GPWTM_GPTMMIS_RTCMIS_OCCUR                  (0x00000001)
//--------

//--------
#define GPWTM_GPTMMIS_R_TAMMIS_MASK                 (0x00000010)
#define GPWTM_GPTMMIS_R_TAMMIS_BIT                  (4)
#define GPWTM_GPTMMIS_R_TAMMIS_NOOCCUR              (0x00000000)
#define GPWTM_GPTMMIS_R_TAMMIS_OCCUR                (0x00000010)

#define GPWTM_GPTMMIS_TAMMIS_MASK                   (0x00000001)
#define GPWTM_GPTMMIS_TAMMIS_NOOCCUR                (0x00000000)
#define GPWTM_GPTMMIS_TAMMIS_OCCUR                  (0x00000001)
//--------

//--------
#define GPWTM_GPTMMIS_R_TBTOMIS_MASK                (0x00000100)
#define GPWTM_GPTMMIS_R_TBTOMIS_BIT                 (8)
#define GPWTM_GPTMMIS_R_TBTOMIS_NOOCCUR             (0x00000000)
#define GPWTM_GPTMMIS_R_TBTOMIS_OCCUR               (0x00000100)

#define GPWTM_GPTMMIS_TBTOMIS_MASK                  (0x00000001)
#define GPWTM_GPTMMIS_TBTOMIS_NOOCCUR               (0x00000000)
#define GPWTM_GPTMMIS_TBTOMIS_OCCUR                 (0x00000001)
//--------

//--------
#define GPWTM_GPTMMIS_R_CBMMIS_MASK                 (0x00000200)
#define GPWTM_GPTMMIS_R_CBMMIS_BIT                  (9)
#define GPWTM_GPTMMIS_R_CBMMIS_NOOCCUR              (0x00000000)
#define GPWTM_GPTMMIS_R_CBMMIS_OCCUR                (0x00000200)

#define GPWTM_GPTMMIS_CBMMIS_MASK                   (0x00000001)
#define GPWTM_GPTMMIS_CBMMIS_NOOCCUR                (0x00000000)
#define GPWTM_GPTMMIS_CBMMIS_OCCUR                  (0x00000001)
//--------

//--------
#define GPWTM_GPTMMIS_R_CBEMIS_MASK                 (0x00000400)
#define GPWTM_GPTMMIS_R_CBEMIS_BIT                  (10)
#define GPWTM_GPTMMIS_R_CBEMIS_NOOCCUR              (0x00000000)
#define GPWTM_GPTMMIS_R_CBEMIS_OCCUR                (0x00000400)

#define GPWTM_GPTMMIS_CBEMIS_MASK                   (0x00000001)
#define GPWTM_GPTMMIS_CBEMIS_NOOCCUR                (0x00000000)
#define GPWTM_GPTMMIS_CBEMIS_OCCUR                  (0x00000001)
//--------

//--------
#define GPWTM_GPTMMIS_R_TBMMIS_MASK                 (0x00000800)
#define GPWTM_GPTMMIS_R_TBMMIS_BIT                  (11)
#define GPWTM_GPTMMIS_R_TBMMIS_NOOCCUR              (0x00000000)
#define GPWTM_GPTMMIS_R_TBMMIS_OCCUR                (0x00000800)

#define GPWTM_GPTMMIS_TBMMIS_MASK                   (0x00000001)
#define GPWTM_GPTMMIS_TBMMIS_NOOCCUR                (0x00000000)
#define GPWTM_GPTMMIS_TBMMIS_OCCUR                  (0x00000001)
//--------

//--------
#define GPWTM_GPTMMIS_R_WUEMIS_MASK                 (0x00010000)
#define GPWTM_GPTMMIS_R_WUEMIS_BIT                  (16)
#define GPWTM_GPTMMIS_R_WUEMIS_NOOCCUR              (0x00000000)
#define GPWTM_GPTMMIS_R_WUEMIS_OCCUR                (0x00010000)

#define GPWTM_GPTMMIS_WUEMIS_MASK                   (0x00000001)
#define GPWTM_GPTMMIS_WUEMIS_NOOCCUR                (0x00000000)
#define GPWTM_GPTMMIS_WUEMIS_OCCUR                  (0x00000001)
//--------


//--------
#define GPWTM_TA_GPTMTnMIS_R_TnTOMIS_MASK           (0x00000001)
#define GPWTM_TA_GPTMTnMIS_R_TnTOMIS_BIT            (0)
#define GPWTM_TA_GPTMTnMIS_R_TnTOMIS_NOOCCUR        (0x00000000)
#define GPWTM_TA_GPTMTnMIS_R_TnTOMIS_OCCUR          (0x00000001)

#define GPWTM_TA_GPTMTnMIS_TnTOMIS_MASK             (0x00000001)
#define GPWTM_TA_GPTMTnMIS_TnTOMIS_NOOCCUR          (0x00000000)
#define GPWTM_TA_GPTMTnMIS_TnTOMIS_OCCUR            (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnMIS_R_CnMMIS_MASK            (0x00000002)
#define GPWTM_TA_GPTMTnMIS_R_CnMMIS_BIT             (1)
#define GPWTM_TA_GPTMTnMIS_R_CnMMIS_NOOCCUR         (0x00000000)
#define GPWTM_TA_GPTMTnMIS_R_CnMMIS_OCCUR           (0x00000002)

#define GPWTM_TA_GPTMTnMIS_CnMMIS_MASK              (0x00000001)
#define GPWTM_TA_GPTMTnMIS_CnMMIS_NOOCCUR           (0x00000000)
#define GPWTM_TA_GPTMTnMIS_CnMMIS_OCCUR             (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnMIS_R_CnEMIS_MASK            (0x00000004)
#define GPWTM_TA_GPTMTnMIS_R_CnEMIS_BIT             (2)
#define GPWTM_TA_GPTMTnMIS_R_CnEMIS_NOOCCUR         (0x00000000)
#define GPWTM_TA_GPTMTnMIS_R_CnEMIS_OCCUR           (0x00000004)

#define GPWTM_TA_GPTMTnMIS_CnEMIS_MASK              (0x00000001)
#define GPWTM_TA_GPTMTnMIS_CnEMIS_NOOCCUR           (0x00000000)
#define GPWTM_TA_GPTMTnMIS_CnEMIS_OCCUR             (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnMIS_R_TnMMIS_MASK            (0x00000010)
#define GPWTM_TA_GPTMTnMIS_R_TnMMIS_BIT             (4)
#define GPWTM_TA_GPTMTnMIS_R_TnMMIS_NOOCCUR         (0x00000000)
#define GPWTM_TA_GPTMTnMIS_R_TnMMIS_OCCUR           (0x00000010)

#define GPWTM_TA_GPTMTnMIS_TnMMIS_MASK              (0x00000001)
#define GPWTM_TA_GPTMTnMIS_TnMMIS_NOOCCUR           (0x00000000)
#define GPWTM_TA_GPTMTnMIS_TnMMIS_OCCUR             (0x00000001)
//--------


//--------
#define GPWTM_TB_GPTMTnMIS_R_TnTOMIS_MASK              (0x00000100)
#define GPWTM_TB_GPTMTnMIS_R_TnTOMIS_BIT               (8)
#define GPWTM_TB_GPTMTnMIS_R_TnTOMIS_DIS               (0x00000000)
#define GPWTM_TB_GPTMTnMIS_R_TnTOMIS_EN                (0x00000100)

#define GPWTM_TB_GPTMTnMIS_TnTOMIS_MASK                (0x00000001)
#define GPWTM_TB_GPTMTnMIS_TnTOMIS_DIS                 (0x00000000)
#define GPWTM_TB_GPTMTnMIS_TnTOMIS_EN                  (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnMIS_R_CnMMIS_MASK               (0x00000200)
#define GPWTM_TB_GPTMTnMIS_R_CnMMIS_BIT                (9)
#define GPWTM_TB_GPTMTnMIS_R_CnMMIS_DIS                (0x00000000)
#define GPWTM_TB_GPTMTnMIS_R_CnMMIS_EN                 (0x00000200)

#define GPWTM_TB_GPTMTnMIS_CnMMIS_MASK                 (0x00000001)
#define GPWTM_TB_GPTMTnMIS_CnMMIS_DIS                  (0x00000000)
#define GPWTM_TB_GPTMTnMIS_CnMMIS_EN                   (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnMIS_R_CnEMIS_MASK               (0x00000400)
#define GPWTM_TB_GPTMTnMIS_R_CnEMIS_BIT                (10)
#define GPWTM_TB_GPTMTnMIS_R_CnEMIS_DIS                (0x00000000)
#define GPWTM_TB_GPTMTnMIS_R_CnEMIS_EN                 (0x00000400)

#define GPWTM_TB_GPTMTnMIS_CnEMIS_MASK                 (0x00000001)
#define GPWTM_TB_GPTMTnMIS_CnEMIS_DIS                  (0x00000000)
#define GPWTM_TB_GPTMTnMIS_CnEMIS_EN                   (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnMIS_R_TnMMIS_MASK               (0x00000800)
#define GPWTM_TB_GPTMTnMIS_R_TnMMIS_BIT                (11)
#define GPWTM_TB_GPTMTnMIS_R_TnMMIS_DIS                (0x00000000)
#define GPWTM_TB_GPTMTnMIS_R_TnMMIS_EN                 (0x00000800)

#define GPWTM_TB_GPTMTnMIS_TnMMIS_MASK                 (0x00000001)
#define GPWTM_TB_GPTMTnMIS_TnMMIS_DIS                  (0x00000000)
#define GPWTM_TB_GPTMTnMIS_TnMMIS_EN                   (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnMIS_R_TnTOMIS_MASK           (0x00000001)
#define GPWTM_TW_GPTMTnMIS_R_TnTOMIS_BIT            (0)
#define GPWTM_TW_GPTMTnMIS_R_TnTOMIS_NOOCCUR        (0x00000000)
#define GPWTM_TW_GPTMTnMIS_R_TnTOMIS_OCCUR          (0x00000001)

#define GPWTM_TW_GPTMTnMIS_TnTOMIS_MASK             (0x00000001)
#define GPWTM_TW_GPTMTnMIS_TnTOMIS_NOOCCUR          (0x00000000)
#define GPWTM_TW_GPTMTnMIS_TnTOMIS_OCCUR            (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnMIS_R_CnMMIS_MASK            (0x00000002)
#define GPWTM_TW_GPTMTnMIS_R_CnMMIS_BIT             (1)
#define GPWTM_TW_GPTMTnMIS_R_CnMMIS_NOOCCUR         (0x00000000)
#define GPWTM_TW_GPTMTnMIS_R_CnMMIS_OCCUR           (0x00000002)

#define GPWTM_TW_GPTMTnMIS_CnMMIS_MASK              (0x00000001)
#define GPWTM_TW_GPTMTnMIS_CnMMIS_NOOCCUR           (0x00000000)
#define GPWTM_TW_GPTMTnMIS_CnMMIS_OCCUR             (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnMIS_R_CnEMIS_MASK            (0x00000004)
#define GPWTM_TW_GPTMTnMIS_R_CnEMIS_BIT             (2)
#define GPWTM_TW_GPTMTnMIS_R_CnEMIS_NOOCCUR         (0x00000000)
#define GPWTM_TW_GPTMTnMIS_R_CnEMIS_OCCUR           (0x00000004)

#define GPWTM_TW_GPTMTnMIS_CnEMIS_MASK              (0x00000001)
#define GPWTM_TW_GPTMTnMIS_CnEMIS_NOOCCUR           (0x00000000)
#define GPWTM_TW_GPTMTnMIS_CnEMIS_OCCUR             (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnMIS_R_RTCMIS_MASK            (0x00000008)
#define GPWTM_TW_GPTMTnMIS_R_RTCMIS_BIT             (3)
#define GPWTM_TW_GPTMTnMIS_R_RTCMIS_NOOCCUR         (0x00000000)
#define GPWTM_TW_GPTMTnMIS_R_RTCMIS_OCCUR           (0x00000008)

#define GPWTM_TW_GPTMTnMIS_RTCMIS_MASK              (0x00000001)
#define GPWTM_TW_GPTMTnMIS_RTCMIS_NOOCCUR           (0x00000000)
#define GPWTM_TW_GPTMTnMIS_RTCMIS_OCCUR             (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnMIS_R_TnMMIS_MASK            (0x00000010)
#define GPWTM_TW_GPTMTnMIS_R_TnMMIS_BIT             (4)
#define GPWTM_TW_GPTMTnMIS_R_TnMMIS_NOOCCUR         (0x00000000)
#define GPWTM_TW_GPTMTnMIS_R_TnMMIS_OCCUR           (0x00000010)

#define GPWTM_TW_GPTMTnMIS_TnMMIS_MASK              (0x00000001)
#define GPWTM_TW_GPTMTnMIS_TnMMIS_NOOCCUR           (0x00000000)
#define GPWTM_TW_GPTMTnMIS_TnMMIS_OCCUR             (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnMIS_R_WUEMIS_MASK            (0x00010000)
#define GPWTM_TW_GPTMTnMIS_R_WUEMIS_BIT             (16)
#define GPWTM_TW_GPTMTnMIS_R_WUEMIS_NOOCCUR         (0x00000000)
#define GPWTM_TW_GPTMTnMIS_R_WUEMIS_OCCUR           (0x00010000)

#define GPWTM_TW_GPTMTnMIS_WUEMIS_MASK              (0x00000001)
#define GPWTM_TW_GPTMTnMIS_WUEMIS_NOOCCUR           (0x00000000)
#define GPWTM_TW_GPTMTnMIS_WUEMIS_OCCUR             (0x00000001)
//--------

/* GPTM0 BITBANDING GPTMMIS*/
#define GPTM0_BITBANDING_GPTMMIS_TATOMIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TATOMIS_BIT*4))))
#define GPTM0_BITBANDING_GPTMMIS_CAMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CAMMIS_BIT*4))))
#define GPTM0_BITBANDING_GPTMMIS_CAEMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CAEMIS_BIT*4))))
#define GPTM0_BITBANDING_GPTMMIS_RTCMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_RTCMIS_BIT*4))))
#define GPTM0_BITBANDING_GPTMMIS_TAMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TAMMIS_BIT*4))))
#define GPTM0_BITBANDING_GPTMMIS_TBTOMIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TBTOMIS_BIT*4))))
#define GPTM0_BITBANDING_GPTMMIS_CBMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CBMMIS_BIT*4))))
#define GPTM0_BITBANDING_GPTMMIS_CBEMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CBEMIS_BIT*4))))
#define GPTM0_BITBANDING_GPTMMIS_TBMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TBMMIS_BIT*4))))
#define GPTM0_BITBANDING_GPTMMIS_WUEMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_WUEMIS_BIT*4))))

#define GPTM0_BITBANDING_TA_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPTM0_BITBANDING_TB_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPTM0_BITBANDING_TW_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnMIS_RTCMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_RTCMIS_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_TnMMIS_BIT*4))))

/* GPTM1 BITBANDING GPTMMIS*/
#define GPTM1_BITBANDING_GPTMMIS_TATOMIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TATOMIS_BIT*4))))
#define GPTM1_BITBANDING_GPTMMIS_CAMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CAMMIS_BIT*4))))
#define GPTM1_BITBANDING_GPTMMIS_CAEMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CAEMIS_BIT*4))))
#define GPTM1_BITBANDING_GPTMMIS_RTCMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_RTCMIS_BIT*4))))
#define GPTM1_BITBANDING_GPTMMIS_TAMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TAMMIS_BIT*4))))
#define GPTM1_BITBANDING_GPTMMIS_TBTOMIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TBTOMIS_BIT*4))))
#define GPTM1_BITBANDING_GPTMMIS_CBMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CBMMIS_BIT*4))))
#define GPTM1_BITBANDING_GPTMMIS_CBEMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CBEMIS_BIT*4))))
#define GPTM1_BITBANDING_GPTMMIS_TBMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TBMMIS_BIT*4))))
#define GPTM1_BITBANDING_GPTMMIS_WUEMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_WUEMIS_BIT*4))))

#define GPTM1_BITBANDING_TA_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPTM1_BITBANDING_TB_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPTM1_BITBANDING_TW_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnMIS_RTCMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_RTCMIS_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_TnMMIS_BIT*4))))

/* GPTM2 BITBANDING GPTMMIS*/
#define GPTM2_BITBANDING_GPTMMIS_TATOMIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TATOMIS_BIT*4))))
#define GPTM2_BITBANDING_GPTMMIS_CAMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CAMMIS_BIT*4))))
#define GPTM2_BITBANDING_GPTMMIS_CAEMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CAEMIS_BIT*4))))
#define GPTM2_BITBANDING_GPTMMIS_RTCMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_RTCMIS_BIT*4))))
#define GPTM2_BITBANDING_GPTMMIS_TAMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TAMMIS_BIT*4))))
#define GPTM2_BITBANDING_GPTMMIS_TBTOMIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TBTOMIS_BIT*4))))
#define GPTM2_BITBANDING_GPTMMIS_CBMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CBMMIS_BIT*4))))
#define GPTM2_BITBANDING_GPTMMIS_CBEMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CBEMIS_BIT*4))))
#define GPTM2_BITBANDING_GPTMMIS_TBMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TBMMIS_BIT*4))))
#define GPTM2_BITBANDING_GPTMMIS_WUEMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_WUEMIS_BIT*4))))

#define GPTM2_BITBANDING_TA_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPTM2_BITBANDING_TB_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPTM2_BITBANDING_TW_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnMIS_RTCMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_RTCMIS_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_TnMMIS_BIT*4))))

/* GPTM3 BITBANDING GPTMMIS*/
#define GPTM3_BITBANDING_GPTMMIS_TATOMIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TATOMIS_BIT*4))))
#define GPTM3_BITBANDING_GPTMMIS_CAMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CAMMIS_BIT*4))))
#define GPTM3_BITBANDING_GPTMMIS_CAEMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CAEMIS_BIT*4))))
#define GPTM3_BITBANDING_GPTMMIS_RTCMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_RTCMIS_BIT*4))))
#define GPTM3_BITBANDING_GPTMMIS_TAMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TAMMIS_BIT*4))))
#define GPTM3_BITBANDING_GPTMMIS_TBTOMIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TBTOMIS_BIT*4))))
#define GPTM3_BITBANDING_GPTMMIS_CBMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CBMMIS_BIT*4))))
#define GPTM3_BITBANDING_GPTMMIS_CBEMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CBEMIS_BIT*4))))
#define GPTM3_BITBANDING_GPTMMIS_TBMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TBMMIS_BIT*4))))
#define GPTM3_BITBANDING_GPTMMIS_WUEMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_WUEMIS_BIT*4))))

#define GPTM3_BITBANDING_TA_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPTM3_BITBANDING_TB_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPTM3_BITBANDING_TW_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnMIS_RTCMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_RTCMIS_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_TnMMIS_BIT*4))))

/* GPTM4 BITBANDING GPTMMIS*/
#define GPTM4_BITBANDING_GPTMMIS_TATOMIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TATOMIS_BIT*4))))
#define GPTM4_BITBANDING_GPTMMIS_CAMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CAMMIS_BIT*4))))
#define GPTM4_BITBANDING_GPTMMIS_CAEMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CAEMIS_BIT*4))))
#define GPTM4_BITBANDING_GPTMMIS_RTCMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_RTCMIS_BIT*4))))
#define GPTM4_BITBANDING_GPTMMIS_TAMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TAMMIS_BIT*4))))
#define GPTM4_BITBANDING_GPTMMIS_TBTOMIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TBTOMIS_BIT*4))))
#define GPTM4_BITBANDING_GPTMMIS_CBMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CBMMIS_BIT*4))))
#define GPTM4_BITBANDING_GPTMMIS_CBEMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CBEMIS_BIT*4))))
#define GPTM4_BITBANDING_GPTMMIS_TBMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TBMMIS_BIT*4))))
#define GPTM4_BITBANDING_GPTMMIS_WUEMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_WUEMIS_BIT*4))))

#define GPTM4_BITBANDING_TA_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPTM4_BITBANDING_TB_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPTM4_BITBANDING_TW_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnMIS_RTCMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_RTCMIS_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_TnMMIS_BIT*4))))

/* GPTM5 BITBANDING GPTMMIS*/
#define GPTM5_BITBANDING_GPTMMIS_TATOMIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TATOMIS_BIT*4))))
#define GPTM5_BITBANDING_GPTMMIS_CAMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CAMMIS_BIT*4))))
#define GPTM5_BITBANDING_GPTMMIS_CAEMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CAEMIS_BIT*4))))
#define GPTM5_BITBANDING_GPTMMIS_RTCMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_RTCMIS_BIT*4))))
#define GPTM5_BITBANDING_GPTMMIS_TAMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TAMMIS_BIT*4))))
#define GPTM5_BITBANDING_GPTMMIS_TBTOMIS             (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TBTOMIS_BIT*4))))
#define GPTM5_BITBANDING_GPTMMIS_CBMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CBMMIS_BIT*4))))
#define GPTM5_BITBANDING_GPTMMIS_CBEMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_CBEMIS_BIT*4))))
#define GPTM5_BITBANDING_GPTMMIS_TBMMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_TBMMIS_BIT*4))))
#define GPTM5_BITBANDING_GPTMMIS_WUEMIS              (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMMIS_OFFSET)*32)+(GPTM_GPTMMIS_R_WUEMIS_BIT*4))))

#define GPTM5_BITBANDING_TA_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnMIS_OFFSET)*32)+(GPTM_TA_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPTM5_BITBANDING_TB_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnMIS_OFFSET)*32)+(GPTM_TB_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPTM5_BITBANDING_TW_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnMIS_RTCMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_RTCMIS_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnMIS_OFFSET)*32)+(GPTM_TW_GPTMTnMIS_R_TnMMIS_BIT*4))))

/* GPTM0 BITBANDING GPTMMIS*/
#define GPWTM0_BITBANDING_GPTMMIS_TATOMIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TATOMIS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMMIS_CAMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CAMMIS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMMIS_CAEMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CAEMIS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMMIS_RTCMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_RTCMIS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMMIS_TAMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TAMMIS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMMIS_TBTOMIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TBTOMIS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMMIS_CBMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CBMMIS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMMIS_CBEMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CBEMIS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMMIS_TBMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TBMMIS_BIT*4))))
#define GPWTM0_BITBANDING_GPTMMIS_WUEMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_WUEMIS_BIT*4))))

#define GPWTM0_BITBANDING_TA_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPWTM0_BITBANDING_TB_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPWTM0_BITBANDING_TW_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnMIS_RTCMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_RTCMIS_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_TnMMIS_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnMIS_WUEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_WUEMIS_BIT*4))))

/* GPTM0 BITBANDING GPTMMIS*/
#define GPWTM1_BITBANDING_GPTMMIS_TATOMIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TATOMIS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMMIS_CAMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CAMMIS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMMIS_CAEMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CAEMIS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMMIS_RTCMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_RTCMIS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMMIS_TAMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TAMMIS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMMIS_TBTOMIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TBTOMIS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMMIS_CBMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CBMMIS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMMIS_CBEMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CBEMIS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMMIS_TBMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TBMMIS_BIT*4))))
#define GPWTM1_BITBANDING_GPTMMIS_WUEMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_WUEMIS_BIT*4))))

#define GPWTM1_BITBANDING_TA_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPWTM1_BITBANDING_TB_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPWTM1_BITBANDING_TW_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnMIS_RTCMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_RTCMIS_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_TnMMIS_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnMIS_WUEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_WUEMIS_BIT*4))))

/* GPTM0 BITBANDING GPTMMIS*/
#define GPWTM2_BITBANDING_GPTMMIS_TATOMIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TATOMIS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMMIS_CAMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CAMMIS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMMIS_CAEMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CAEMIS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMMIS_RTCMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_RTCMIS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMMIS_TAMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TAMMIS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMMIS_TBTOMIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TBTOMIS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMMIS_CBMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CBMMIS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMMIS_CBEMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CBEMIS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMMIS_TBMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TBMMIS_BIT*4))))
#define GPWTM2_BITBANDING_GPTMMIS_WUEMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_WUEMIS_BIT*4))))

#define GPWTM2_BITBANDING_TA_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPWTM2_BITBANDING_TB_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPWTM2_BITBANDING_TW_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnMIS_RTCMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_RTCMIS_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_TnMMIS_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnMIS_WUEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_WUEMIS_BIT*4))))

/* GPTM0 BITBANDING GPTMMIS*/
#define GPWTM3_BITBANDING_GPTMMIS_TATOMIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TATOMIS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMMIS_CAMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CAMMIS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMMIS_CAEMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CAEMIS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMMIS_RTCMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_RTCMIS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMMIS_TAMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TAMMIS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMMIS_TBTOMIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TBTOMIS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMMIS_CBMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CBMMIS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMMIS_CBEMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CBEMIS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMMIS_TBMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TBMMIS_BIT*4))))
#define GPWTM3_BITBANDING_GPTMMIS_WUEMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_WUEMIS_BIT*4))))

#define GPWTM3_BITBANDING_TA_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPWTM3_BITBANDING_TB_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPWTM3_BITBANDING_TW_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnMIS_RTCMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_RTCMIS_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_TnMMIS_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnMIS_WUEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_WUEMIS_BIT*4))))

/* GPTM0 BITBANDING GPTMMIS*/
#define GPWTM4_BITBANDING_GPTMMIS_TATOMIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TATOMIS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMMIS_CAMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CAMMIS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMMIS_CAEMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CAEMIS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMMIS_RTCMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_RTCMIS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMMIS_TAMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TAMMIS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMMIS_TBTOMIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TBTOMIS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMMIS_CBMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CBMMIS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMMIS_CBEMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CBEMIS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMMIS_TBMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TBMMIS_BIT*4))))
#define GPWTM4_BITBANDING_GPTMMIS_WUEMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_WUEMIS_BIT*4))))

#define GPWTM4_BITBANDING_TA_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPWTM4_BITBANDING_TB_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPWTM4_BITBANDING_TW_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnMIS_RTCMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_RTCMIS_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_TnMMIS_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnMIS_WUEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_WUEMIS_BIT*4))))

/* GPTM0 BITBANDING GPTMMIS*/
#define GPWTM5_BITBANDING_GPTMMIS_TATOMIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TATOMIS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMMIS_CAMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CAMMIS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMMIS_CAEMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CAEMIS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMMIS_RTCMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_RTCMIS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMMIS_TAMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TAMMIS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMMIS_TBTOMIS             (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TBTOMIS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMMIS_CBMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CBMMIS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMMIS_CBEMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_CBEMIS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMMIS_TBMMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_TBMMIS_BIT*4))))
#define GPWTM5_BITBANDING_GPTMMIS_WUEMIS              (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMMIS_OFFSET)*32)+(GPWTM_GPTMMIS_R_WUEMIS_BIT*4))))

#define GPWTM5_BITBANDING_TA_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnMIS_OFFSET)*32)+(GPWTM_TA_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPWTM5_BITBANDING_TB_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnMIS_OFFSET)*32)+(GPWTM_TB_GPTMTnMIS_R_TnMMIS_BIT*4))))

#define GPWTM5_BITBANDING_TW_GPTMTnMIS_TnTOMIS        (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_TnTOMIS_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnMIS_CnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_CnMMIS_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnMIS_RTCMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_RTCMIS_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnMIS_CnEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_CnEMIS_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnMIS_TnMMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_TnMMIS_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnMIS_WUEMIS         (*((volatile const uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMIS_OFFSET)*32)+(GPWTM_TW_GPTMTnMIS_R_WUEMIS_BIT*4))))


/******************************************************************************************
************************************ 9 GPTMICR *********************************************
******************************************************************************************/

/* GPTM0 GPTMICR*/
#define GPTM0_BITBANDING_GPTMICR            (((BITBANDING_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMICR_OFFSET)*32))))
#define GPTM0_GPTMICR                       (((GPTMICR_TypeDef*)(GPTM0_BASE + GPTM_GPTMICR_OFFSET )))
#define GPTM0_GPTMICR_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMICR_OFFSET)))

#define GPTM0_BITBANDING_TA_GPTMTnICR       (((BITBANDING_TA_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32))))
#define GPTM0_TA_GPTMTnICR                  (((TA_GPTMICR_TypeDef*)(GPTM0_BASE + GPTM_TA_GPTMTnICR_OFFSET )))
#define GPTM0_TA_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TA_GPTMTnICR_OFFSET)))

#define GPTM0_BITBANDING_TB_GPTMTnICR       (((BITBANDING_TB_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32))))
#define GPTM0_TB_GPTMTnICR                  (((TB_GPTMICR_TypeDef*)(GPTM0_BASE + GPTM_TB_GPTMTnICR_OFFSET )))
#define GPTM0_TB_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TB_GPTMTnICR_OFFSET)))

#define GPTM0_BITBANDING_TW_GPTMTnICR       (((BITBANDING_TW_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32))))
#define GPTM0_TW_GPTMTnICR                  (((TW_GPTMICR_TypeDef*)(GPTM0_BASE + GPTM_TW_GPTMTnICR_OFFSET )))
#define GPTM0_TW_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TW_GPTMTnICR_OFFSET)))

/* GPTM1 GPTMICR*/
#define GPTM1_BITBANDING_GPTMICR            (((BITBANDING_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMICR_OFFSET)*32))))
#define GPTM1_GPTMICR                       (((GPTMICR_TypeDef*)(GPTM1_BASE + GPTM_GPTMICR_OFFSET )))
#define GPTM1_GPTMICR_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMICR_OFFSET)))

#define GPTM1_BITBANDING_TA_GPTMTnICR       (((BITBANDING_TA_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32))))
#define GPTM1_TA_GPTMTnICR                  (((TA_GPTMICR_TypeDef*)(GPTM1_BASE + GPTM_TA_GPTMTnICR_OFFSET )))
#define GPTM1_TA_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TA_GPTMTnICR_OFFSET)))

#define GPTM1_BITBANDING_TB_GPTMTnICR       (((BITBANDING_TB_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32))))
#define GPTM1_TB_GPTMTnICR                  (((TB_GPTMICR_TypeDef*)(GPTM1_BASE + GPTM_TB_GPTMTnICR_OFFSET )))
#define GPTM1_TB_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TB_GPTMTnICR_OFFSET)))

#define GPTM1_BITBANDING_TW_GPTMTnICR       (((BITBANDING_TW_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32))))
#define GPTM1_TW_GPTMTnICR                  (((TW_GPTMICR_TypeDef*)(GPTM1_BASE + GPTM_TW_GPTMTnICR_OFFSET )))
#define GPTM1_TW_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TW_GPTMTnICR_OFFSET)))

/* GPTM1 GPTMICR*/
#define GPTM1_BITBANDING_GPTMICR            (((BITBANDING_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMICR_OFFSET)*32))))
#define GPTM1_GPTMICR                       (((GPTMICR_TypeDef*)(GPTM1_BASE + GPTM_GPTMICR_OFFSET )))
#define GPTM1_GPTMICR_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMICR_OFFSET)))

#define GPTM1_BITBANDING_TA_GPTMTnICR       (((BITBANDING_TA_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32))))
#define GPTM1_TA_GPTMTnICR                  (((TA_GPTMICR_TypeDef*)(GPTM1_BASE + GPTM_TA_GPTMTnICR_OFFSET )))
#define GPTM1_TA_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TA_GPTMTnICR_OFFSET)))

#define GPTM1_BITBANDING_TB_GPTMTnICR       (((BITBANDING_TB_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32))))
#define GPTM1_TB_GPTMTnICR                  (((TB_GPTMICR_TypeDef*)(GPTM1_BASE + GPTM_TB_GPTMTnICR_OFFSET )))
#define GPTM1_TB_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TB_GPTMTnICR_OFFSET)))

#define GPTM1_BITBANDING_TW_GPTMTnICR       (((BITBANDING_TW_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32))))
#define GPTM1_TW_GPTMTnICR                  (((TW_GPTMICR_TypeDef*)(GPTM1_BASE + GPTM_TW_GPTMTnICR_OFFSET )))
#define GPTM1_TW_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TW_GPTMTnICR_OFFSET)))

/* GPTM2 GPTMICR*/
#define GPTM2_BITBANDING_GPTMICR            (((BITBANDING_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMICR_OFFSET)*32))))
#define GPTM2_GPTMICR                       (((GPTMICR_TypeDef*)(GPTM2_BASE + GPTM_GPTMICR_OFFSET )))
#define GPTM2_GPTMICR_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMICR_OFFSET)))

#define GPTM2_BITBANDING_TA_GPTMTnICR       (((BITBANDING_TA_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32))))
#define GPTM2_TA_GPTMTnICR                  (((TA_GPTMICR_TypeDef*)(GPTM2_BASE + GPTM_TA_GPTMTnICR_OFFSET )))
#define GPTM2_TA_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TA_GPTMTnICR_OFFSET)))

#define GPTM2_BITBANDING_TB_GPTMTnICR       (((BITBANDING_TB_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32))))
#define GPTM2_TB_GPTMTnICR                  (((TB_GPTMICR_TypeDef*)(GPTM2_BASE + GPTM_TB_GPTMTnICR_OFFSET )))
#define GPTM2_TB_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TB_GPTMTnICR_OFFSET)))

#define GPTM2_BITBANDING_TW_GPTMTnICR       (((BITBANDING_TW_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32))))
#define GPTM2_TW_GPTMTnICR                  (((TW_GPTMICR_TypeDef*)(GPTM2_BASE + GPTM_TW_GPTMTnICR_OFFSET )))
#define GPTM2_TW_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TW_GPTMTnICR_OFFSET)))

/* GPTM3 GPTMICR*/
#define GPTM3_BITBANDING_GPTMICR            (((BITBANDING_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMICR_OFFSET)*32))))
#define GPTM3_GPTMICR                       (((GPTMICR_TypeDef*)(GPTM3_BASE + GPTM_GPTMICR_OFFSET )))
#define GPTM3_GPTMICR_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMICR_OFFSET)))

#define GPTM3_BITBANDING_TA_GPTMTnICR       (((BITBANDING_TA_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32))))
#define GPTM3_TA_GPTMTnICR                  (((TA_GPTMICR_TypeDef*)(GPTM3_BASE + GPTM_TA_GPTMTnICR_OFFSET )))
#define GPTM3_TA_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TA_GPTMTnICR_OFFSET)))

#define GPTM3_BITBANDING_TB_GPTMTnICR       (((BITBANDING_TB_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32))))
#define GPTM3_TB_GPTMTnICR                  (((TB_GPTMICR_TypeDef*)(GPTM3_BASE + GPTM_TB_GPTMTnICR_OFFSET )))
#define GPTM3_TB_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TB_GPTMTnICR_OFFSET)))

#define GPTM3_BITBANDING_TW_GPTMTnICR       (((BITBANDING_TW_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32))))
#define GPTM3_TW_GPTMTnICR                  (((TW_GPTMICR_TypeDef*)(GPTM3_BASE + GPTM_TW_GPTMTnICR_OFFSET )))
#define GPTM3_TW_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TW_GPTMTnICR_OFFSET)))

/* GPTM4 GPTMICR*/
#define GPTM4_BITBANDING_GPTMICR            (((BITBANDING_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMICR_OFFSET)*32))))
#define GPTM4_GPTMICR                       (((GPTMICR_TypeDef*)(GPTM4_BASE + GPTM_GPTMICR_OFFSET )))
#define GPTM4_GPTMICR_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMICR_OFFSET)))

#define GPTM4_BITBANDING_TA_GPTMTnICR       (((BITBANDING_TA_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32))))
#define GPTM4_TA_GPTMTnICR                  (((TA_GPTMICR_TypeDef*)(GPTM4_BASE + GPTM_TA_GPTMTnICR_OFFSET )))
#define GPTM4_TA_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TA_GPTMTnICR_OFFSET)))

#define GPTM4_BITBANDING_TB_GPTMTnICR       (((BITBANDING_TB_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32))))
#define GPTM4_TB_GPTMTnICR                  (((TB_GPTMICR_TypeDef*)(GPTM4_BASE + GPTM_TB_GPTMTnICR_OFFSET )))
#define GPTM4_TB_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TB_GPTMTnICR_OFFSET)))

#define GPTM4_BITBANDING_TW_GPTMTnICR       (((BITBANDING_TW_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32))))
#define GPTM4_TW_GPTMTnICR                  (((TW_GPTMICR_TypeDef*)(GPTM4_BASE + GPTM_TW_GPTMTnICR_OFFSET )))
#define GPTM4_TW_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TW_GPTMTnICR_OFFSET)))

/* GPTM5 GPTMICR*/
#define GPTM5_BITBANDING_GPTMICR            (((BITBANDING_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMICR_OFFSET)*32))))
#define GPTM5_GPTMICR                       (((GPTMICR_TypeDef*)(GPTM5_BASE + GPTM_GPTMICR_OFFSET )))
#define GPTM5_GPTMICR_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMICR_OFFSET)))

#define GPTM5_BITBANDING_TA_GPTMTnICR       (((BITBANDING_TA_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32))))
#define GPTM5_TA_GPTMTnICR                  (((TA_GPTMICR_TypeDef*)(GPTM5_BASE + GPTM_TA_GPTMTnICR_OFFSET )))
#define GPTM5_TA_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TA_GPTMTnICR_OFFSET)))

#define GPTM5_BITBANDING_TB_GPTMTnICR       (((BITBANDING_TB_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32))))
#define GPTM5_TB_GPTMTnICR                  (((TB_GPTMICR_TypeDef*)(GPTM5_BASE + GPTM_TB_GPTMTnICR_OFFSET )))
#define GPTM5_TB_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TB_GPTMTnICR_OFFSET)))

#define GPTM5_BITBANDING_TW_GPTMTnICR       (((BITBANDING_TW_GPTMICR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32))))
#define GPTM5_TW_GPTMTnICR                  (((TW_GPTMICR_TypeDef*)(GPTM5_BASE + GPTM_TW_GPTMTnICR_OFFSET )))
#define GPTM5_TW_GPTMTnICR_R                (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TW_GPTMTnICR_OFFSET)))

/* GPWTM0 GPTMICR*/
#define GPWTM0_BITBANDING_GPTMICR           (((BITBANDING_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMICR_OFFSET)*32))))
#define GPWTM0_GPTMICR                      (((GPTMICR_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMICR_OFFSET )))
#define GPWTM0_GPTMICR_R                    (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMICR_OFFSET)))

#define GPWTM0_BITBANDING_TA_GPTMTnICR      (((BITBANDING_TA_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32))))
#define GPWTM0_TA_GPTMTnICR                 (((TA_GPTMICR_TypeDef*)(GPWTM0_BASE + GPWTM_TA_GPTMTnICR_OFFSET )))
#define GPWTM0_TA_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TA_GPTMTnICR_OFFSET)))

#define GPWTM0_BITBANDING_TB_GPTMTnICR      (((BITBANDING_TB_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32))))
#define GPWTM0_TB_GPTMTnICR                 (((TB_GPTMICR_TypeDef*)(GPWTM0_BASE + GPWTM_TB_GPTMTnICR_OFFSET )))
#define GPWTM0_TB_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TB_GPTMTnICR_OFFSET)))

#define GPWTM0_BITBANDING_TW_GPTMTnICR      (((BITBANDING_TW_GPWTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32))))
#define GPWTM0_TW_GPTMTnICR                 (((TW_GPWTMICR_TypeDef*)(GPWTM0_BASE + GPWTM_TW_GPTMTnICR_OFFSET )))
#define GPWTM0_TW_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TW_GPTMTnICR_OFFSET)))

/* GPWTM1 GPTMICR*/
#define GPWTM1_BITBANDING_GPTMICR           (((BITBANDING_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMICR_OFFSET)*32))))
#define GPWTM1_GPTMICR                      (((GPTMICR_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMICR_OFFSET )))
#define GPWTM1_GPTMICR_R                    (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMICR_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnICR      (((BITBANDING_TA_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnICR                 (((TA_GPTMICR_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnICR_OFFSET )))
#define GPWTM1_TA_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnICR_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnICR      (((BITBANDING_TB_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnICR                 (((TB_GPTMICR_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnICR_OFFSET )))
#define GPWTM1_TB_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnICR_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnICR      (((BITBANDING_TW_GPWTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnICR                 (((TW_GPWTMICR_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnICR_OFFSET )))
#define GPWTM1_TW_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnICR_OFFSET)))

/* GPWTM1 GPTMICR*/
#define GPWTM1_BITBANDING_GPTMICR           (((BITBANDING_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMICR_OFFSET)*32))))
#define GPWTM1_GPTMICR                      (((GPTMICR_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMICR_OFFSET )))
#define GPWTM1_GPTMICR_R                    (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMICR_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnICR      (((BITBANDING_TA_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnICR                 (((TA_GPTMICR_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnICR_OFFSET )))
#define GPWTM1_TA_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnICR_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnICR      (((BITBANDING_TB_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnICR                 (((TB_GPTMICR_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnICR_OFFSET )))
#define GPWTM1_TB_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnICR_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnICR      (((BITBANDING_TW_GPWTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnICR                 (((TW_GPWTMICR_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnICR_OFFSET )))
#define GPWTM1_TW_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnICR_OFFSET)))

/* GPWTM2 GPTMICR*/
#define GPWTM2_BITBANDING_GPTMICR           (((BITBANDING_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMICR_OFFSET)*32))))
#define GPWTM2_GPTMICR                      (((GPTMICR_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMICR_OFFSET )))
#define GPWTM2_GPTMICR_R                    (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMICR_OFFSET)))

#define GPWTM2_BITBANDING_TA_GPTMTnICR      (((BITBANDING_TA_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32))))
#define GPWTM2_TA_GPTMTnICR                 (((TA_GPTMICR_TypeDef*)(GPWTM2_BASE + GPWTM_TA_GPTMTnICR_OFFSET )))
#define GPWTM2_TA_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TA_GPTMTnICR_OFFSET)))

#define GPWTM2_BITBANDING_TB_GPTMTnICR      (((BITBANDING_TB_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32))))
#define GPWTM2_TB_GPTMTnICR                 (((TB_GPTMICR_TypeDef*)(GPWTM2_BASE + GPWTM_TB_GPTMTnICR_OFFSET )))
#define GPWTM2_TB_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TB_GPTMTnICR_OFFSET)))

#define GPWTM2_BITBANDING_TW_GPTMTnICR      (((BITBANDING_TW_GPWTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32))))
#define GPWTM2_TW_GPTMTnICR                 (((TW_GPWTMICR_TypeDef*)(GPWTM2_BASE + GPWTM_TW_GPTMTnICR_OFFSET )))
#define GPWTM2_TW_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TW_GPTMTnICR_OFFSET)))

/* GPWTM3 GPTMICR*/
#define GPWTM3_BITBANDING_GPTMICR           (((BITBANDING_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMICR_OFFSET)*32))))
#define GPWTM3_GPTMICR                      (((GPTMICR_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMICR_OFFSET )))
#define GPWTM3_GPTMICR_R                    (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMICR_OFFSET)))

#define GPWTM3_BITBANDING_TA_GPTMTnICR      (((BITBANDING_TA_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32))))
#define GPWTM3_TA_GPTMTnICR                 (((TA_GPTMICR_TypeDef*)(GPWTM3_BASE + GPWTM_TA_GPTMTnICR_OFFSET )))
#define GPWTM3_TA_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TA_GPTMTnICR_OFFSET)))

#define GPWTM3_BITBANDING_TB_GPTMTnICR      (((BITBANDING_TB_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32))))
#define GPWTM3_TB_GPTMTnICR                 (((TB_GPTMICR_TypeDef*)(GPWTM3_BASE + GPWTM_TB_GPTMTnICR_OFFSET )))
#define GPWTM3_TB_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TB_GPTMTnICR_OFFSET)))

#define GPWTM3_BITBANDING_TW_GPTMTnICR      (((BITBANDING_TW_GPWTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32))))
#define GPWTM3_TW_GPTMTnICR                 (((TW_GPWTMICR_TypeDef*)(GPWTM3_BASE + GPWTM_TW_GPTMTnICR_OFFSET )))
#define GPWTM3_TW_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TW_GPTMTnICR_OFFSET)))

/* GPWTM4 GPTMICR*/
#define GPWTM4_BITBANDING_GPTMICR           (((BITBANDING_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMICR_OFFSET)*32))))
#define GPWTM4_GPTMICR                      (((GPTMICR_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMICR_OFFSET )))
#define GPWTM4_GPTMICR_R                    (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMICR_OFFSET)))

#define GPWTM4_BITBANDING_TA_GPTMTnICR      (((BITBANDING_TA_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32))))
#define GPWTM4_TA_GPTMTnICR                 (((TA_GPTMICR_TypeDef*)(GPWTM4_BASE + GPWTM_TA_GPTMTnICR_OFFSET )))
#define GPWTM4_TA_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TA_GPTMTnICR_OFFSET)))

#define GPWTM4_BITBANDING_TB_GPTMTnICR      (((BITBANDING_TB_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32))))
#define GPWTM4_TB_GPTMTnICR                 (((TB_GPTMICR_TypeDef*)(GPWTM4_BASE + GPWTM_TB_GPTMTnICR_OFFSET )))
#define GPWTM4_TB_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TB_GPTMTnICR_OFFSET)))

#define GPWTM4_BITBANDING_TW_GPTMTnICR      (((BITBANDING_TW_GPWTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32))))
#define GPWTM4_TW_GPTMTnICR                 (((TW_GPWTMICR_TypeDef*)(GPWTM4_BASE + GPWTM_TW_GPTMTnICR_OFFSET )))
#define GPWTM4_TW_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TW_GPTMTnICR_OFFSET)))

/* GPWTM5 GPTMICR*/
#define GPWTM5_BITBANDING_GPTMICR           (((BITBANDING_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMICR_OFFSET)*32))))
#define GPWTM5_GPTMICR                      (((GPTMICR_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMICR_OFFSET )))
#define GPWTM5_GPTMICR_R                    (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMICR_OFFSET)))

#define GPWTM5_BITBANDING_TA_GPTMTnICR      (((BITBANDING_TA_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32))))
#define GPWTM5_TA_GPTMTnICR                 (((TA_GPTMICR_TypeDef*)(GPWTM5_BASE + GPWTM_TA_GPTMTnICR_OFFSET )))
#define GPWTM5_TA_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TA_GPTMTnICR_OFFSET)))

#define GPWTM5_BITBANDING_TB_GPTMTnICR      (((BITBANDING_TB_GPTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32))))
#define GPWTM5_TB_GPTMTnICR                 (((TB_GPTMICR_TypeDef*)(GPWTM5_BASE + GPWTM_TB_GPTMTnICR_OFFSET )))
#define GPWTM5_TB_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TB_GPTMTnICR_OFFSET)))

#define GPWTM5_BITBANDING_TW_GPTMTnICR      (((BITBANDING_TW_GPWTMICR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32))))
#define GPWTM5_TW_GPTMTnICR                 (((TW_GPWTMICR_TypeDef*)(GPWTM5_BASE + GPWTM_TW_GPTMTnICR_OFFSET )))
#define GPWTM5_TW_GPTMTnICR_R               (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TW_GPTMTnICR_OFFSET)))

//--------
#define GPTM_GPTMICR_R_TATOCINT_MASK                    (0x00000001)
#define GPTM_GPTMICR_R_TATOCINT_BIT                     (0)
#define GPTM_GPTMICR_R_TATOCINT_CLEAR                   (0x00000001)

#define GPTM_GPTMICR_TATOCINT_MASK                      (0x00000001)
#define GPTM_GPTMICR_TATOCINT_CLEAR                     (0x00000001)
//--------

//--------
#define GPTM_GPTMICR_R_CAMCINT_MASK                     (0x00000002)
#define GPTM_GPTMICR_R_CAMCINT_BIT                      (1)
#define GPTM_GPTMICR_R_CAMCINT_CLEAR                    (0x00000002)

#define GPTM_GPTMICR_CAMCINT_MASK                       (0x00000001)
#define GPTM_GPTMICR_CAMCINT_CLEAR                      (0x00000001)
//--------

//--------
#define GPTM_GPTMICR_R_CAECINT_MASK                     (0x00000004)
#define GPTM_GPTMICR_R_CAECINT_BIT                      (2)
#define GPTM_GPTMICR_R_CAECINT_CLEAR                    (0x00000004)

#define GPTM_GPTMICR_CAECINT_MASK                       (0x00000001)
#define GPTM_GPTMICR_CAECINT_CLEAR                      (0x00000001)
//--------

//--------
#define GPTM_GPTMICR_R_RTCCINT_MASK                     (0x00000008)
#define GPTM_GPTMICR_R_RTCCINT_BIT                      (3)
#define GPTM_GPTMICR_R_RTCCINT_CLEAR                    (0x00000008)

#define GPTM_GPTMICR_RTCCINT_MASK                       (0x00000001)
#define GPTM_GPTMICR_RTCCINT_CLEAR                      (0x00000001)
//--------

//--------
#define GPTM_GPTMICR_R_TAMCINT_MASK                     (0x00000010)
#define GPTM_GPTMICR_R_TAMCINT_BIT                      (4)
#define GPTM_GPTMICR_R_TAMCINT_CLEAR                    (0x00000010)

#define GPTM_GPTMICR_TAMCINT_MASK                       (0x00000001)
#define GPTM_GPTMICR_TAMCINT_CLEAR                      (0x00000001)
//--------

//--------
#define GPTM_GPTMICR_R_TBTOCINT_MASK                    (0x00000100)
#define GPTM_GPTMICR_R_TBTOCINT_BIT                     (8)
#define GPTM_GPTMICR_R_TBTOCINT_CLEAR                   (0x00000100)

#define GPTM_GPTMICR_TBTOCINT_MASK                      (0x00000001)
#define GPTM_GPTMICR_TBTOCINT_CLEAR                     (0x00000001)
//--------

//--------
#define GPTM_GPTMICR_R_CBMCINT_MASK                     (0x00000200)
#define GPTM_GPTMICR_R_CBMCINT_BIT                      (9)
#define GPTM_GPTMICR_R_CBMCINT_CLEAR                    (0x00000200)

#define GPTM_GPTMICR_CBMCINT_MASK                       (0x00000001)
#define GPTM_GPTMICR_CBMCINT_CLEAR                      (0x00000001)
//--------

//--------
#define GPTM_GPTMICR_R_CBECINT_MASK                     (0x00000400)
#define GPTM_GPTMICR_R_CBECINT_BIT                      (10)
#define GPTM_GPTMICR_R_CBECINT_CLEAR                    (0x00000400)

#define GPTM_GPTMICR_CBECINT_MASK                       (0x00000001)
#define GPTM_GPTMICR_CBECINT_CLEAR                      (0x00000001)
//--------

//--------
#define GPTM_GPTMICR_R_TBMCINT_MASK                     (0x00000800)
#define GPTM_GPTMICR_R_TBMCINT_BIT                      (11)
#define GPTM_GPTMICR_R_TBMCINT_CLEAR                    (0x00000800)

#define GPTM_GPTMICR_TBMCINT_MASK                       (0x00000001)
#define GPTM_GPTMICR_TBMCINT_CLEAR                      (0x00000001)
//--------

//--------
#define GPTM_GPTMICR_R_WUECINT_MASK                     (0x00010000)
#define GPTM_GPTMICR_R_WUECINT_BIT                      (16)
#define GPTM_GPTMICR_R_WUECINT_CLEAR                    (0x00010000)

#define GPTM_GPTMICR_WUECINT_MASK                       (0x00000001)
#define GPTM_GPTMICR_WUECINT_CLEAR                      (0x00000001)
//--------


//--------
#define GPTM_TA_GPTMTnICR_R_TnTOCINT_MASK               (0x00000001)
#define GPTM_TA_GPTMTnICR_R_TnTOCINT_BIT                (0)
#define GPTM_TA_GPTMTnICR_R_TnTOCINT_CLEAR              (0x00000001)

#define GPTM_TA_GPTMTnICR_TnTOCINT_MASK                 (0x00000001)
#define GPTM_TA_GPTMTnICR_TnTOCINT_CLEAR                (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnICR_R_CnMCINT_MASK                (0x00000002)
#define GPTM_TA_GPTMTnICR_R_CnMCINT_BIT                 (1)
#define GPTM_TA_GPTMTnICR_R_CnMCINT_CLEAR               (0x00000002)

#define GPTM_TA_GPTMTnICR_CnMCINT_MASK                  (0x00000001)
#define GPTM_TA_GPTMTnICR_CnMCINT_CLEAR                 (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnICR_R_CnECINT_MASK                (0x00000004)
#define GPTM_TA_GPTMTnICR_R_CnECINT_BIT                 (2)
#define GPTM_TA_GPTMTnICR_R_CnECINT_CLEAR               (0x00000004)

#define GPTM_TA_GPTMTnICR_CnECINT_MASK                  (0x00000001)
#define GPTM_TA_GPTMTnICR_CnECINT_CLEAR                 (0x00000001)
//--------

//--------
#define GPTM_TA_GPTMTnICR_R_TnMCINT_MASK                (0x00000010)
#define GPTM_TA_GPTMTnICR_R_TnMCINT_BIT                 (4)
#define GPTM_TA_GPTMTnICR_R_TnMCINT_CLEAR               (0x00000010)

#define GPTM_TA_GPTMTnICR_TnMCINT_MASK                  (0x00000001)
#define GPTM_TA_GPTMTnICR_TnMCINT_CLEAR                 (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnICR_R_TnTOCINT_MASK              (0x00000100)
#define GPTM_TB_GPTMTnICR_R_TnTOCINT_BIT               (8)
#define GPTM_TB_GPTMTnICR_R_TnTOCINT_DIS               (0x00000000)
#define GPTM_TB_GPTMTnICR_R_TnTOCINT_EN                (0x00000100)

#define GPTM_TB_GPTMTnICR_TnTOCINT_MASK                (0x00000001)
#define GPTM_TB_GPTMTnICR_TnTOCINT_DIS                 (0x00000000)
#define GPTM_TB_GPTMTnICR_TnTOCINT_EN                  (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnICR_R_CnMCINT_MASK               (0x00000200)
#define GPTM_TB_GPTMTnICR_R_CnMCINT_BIT                (9)
#define GPTM_TB_GPTMTnICR_R_CnMCINT_DIS                (0x00000000)
#define GPTM_TB_GPTMTnICR_R_CnMCINT_EN                 (0x00000200)

#define GPTM_TB_GPTMTnICR_CnMCINT_MASK                 (0x00000001)
#define GPTM_TB_GPTMTnICR_CnMCINT_DIS                  (0x00000000)
#define GPTM_TB_GPTMTnICR_CnMCINT_EN                   (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnICR_R_CnECINT_MASK               (0x00000400)
#define GPTM_TB_GPTMTnICR_R_CnECINT_BIT                (10)
#define GPTM_TB_GPTMTnICR_R_CnECINT_DIS                (0x00000000)
#define GPTM_TB_GPTMTnICR_R_CnECINT_EN                 (0x00000400)

#define GPTM_TB_GPTMTnICR_CnECINT_MASK                 (0x00000001)
#define GPTM_TB_GPTMTnICR_CnECINT_DIS                  (0x00000000)
#define GPTM_TB_GPTMTnICR_CnECINT_EN                   (0x00000001)
//--------

//--------
#define GPTM_TB_GPTMTnICR_R_TnMCINT_MASK               (0x00000800)
#define GPTM_TB_GPTMTnICR_R_TnMCINT_BIT                (11)
#define GPTM_TB_GPTMTnICR_R_TnMCINT_DIS                (0x00000000)
#define GPTM_TB_GPTMTnICR_R_TnMCINT_EN                 (0x00000800)

#define GPTM_TB_GPTMTnICR_TnMCINT_MASK                 (0x00000001)
#define GPTM_TB_GPTMTnICR_TnMCINT_DIS                  (0x00000000)
#define GPTM_TB_GPTMTnICR_TnMCINT_EN                   (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnICR_R_TnTOCINT_MASK               (0x00000001)
#define GPTM_TW_GPTMTnICR_R_TnTOCINT_BIT                (0)
#define GPTM_TW_GPTMTnICR_R_TnTOCINT_CLEAR              (0x00000001)

#define GPTM_TW_GPTMTnICR_TnTOCINT_MASK                 (0x00000001)
#define GPTM_TW_GPTMTnICR_TnTOCINT_CLEAR                (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnICR_R_CnMCINT_MASK                (0x00000002)
#define GPTM_TW_GPTMTnICR_R_CnMCINT_BIT                 (1)
#define GPTM_TW_GPTMTnICR_R_CnMCINT_CLEAR               (0x00000002)

#define GPTM_TW_GPTMTnICR_CnMCINT_MASK                  (0x00000001)
#define GPTM_TW_GPTMTnICR_CnMCINT_CLEAR                 (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnICR_R_CnECINT_MASK                (0x00000004)
#define GPTM_TW_GPTMTnICR_R_CnECINT_BIT                 (2)
#define GPTM_TW_GPTMTnICR_R_CnECINT_CLEAR               (0x00000004)

#define GPTM_TW_GPTMTnICR_CnECINT_MASK                  (0x00000001)
#define GPTM_TW_GPTMTnICR_CnECINT_CLEAR                 (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnICR_R_RTCCINT_MASK                (0x00000008)
#define GPTM_TW_GPTMTnICR_R_RTCCINT_BIT                 (3)
#define GPTM_TW_GPTMTnICR_R_RTCCINT_CLEAR               (0x00000008)

#define GPTM_TW_GPTMTnICR_RTCCINT_MASK                  (0x00000001)
#define GPTM_TW_GPTMTnICR_RTCCINT_CLEAR                 (0x00000001)
//--------

//--------
#define GPTM_TW_GPTMTnICR_R_TnMCINT_MASK                (0x00000010)
#define GPTM_TW_GPTMTnICR_R_TnMCINT_BIT                 (4)
#define GPTM_TW_GPTMTnICR_R_TnMCINT_CLEAR               (0x00000010)

#define GPTM_TW_GPTMTnICR_TnMCINT_MASK                  (0x00000001)
#define GPTM_TW_GPTMTnICR_TnMCINT_CLEAR                 (0x00000001)
//--------

//--------
#define GPWTM_GPTMICR_R_TATOCINT_MASK                   (0x00000001)
#define GPWTM_GPTMICR_R_TATOCINT_BIT                    (0)
#define GPWTM_GPTMICR_R_TATOCINT_CLEAR                  (0x00000001)

#define GPWTM_GPTMICR_TATOCINT_MASK                     (0x00000001)
#define GPWTM_GPTMICR_TATOCINT_CLEAR                    (0x00000001)
//--------

//--------
#define GPWTM_GPTMICR_R_CAMCINT_MASK                    (0x00000002)
#define GPWTM_GPTMICR_R_CAMCINT_BIT                     (1)
#define GPWTM_GPTMICR_R_CAMCINT_CLEAR                   (0x00000002)

#define GPWTM_GPTMICR_CAMCINT_MASK                      (0x00000001)
#define GPWTM_GPTMICR_CAMCINT_CLEAR                     (0x00000001)
//--------

//--------
#define GPWTM_GPTMICR_R_CAECINT_MASK                    (0x00000004)
#define GPWTM_GPTMICR_R_CAECINT_BIT                     (2)
#define GPWTM_GPTMICR_R_CAECINT_CLEAR                   (0x00000004)

#define GPWTM_GPTMICR_CAECINT_MASK                      (0x00000001)
#define GPWTM_GPTMICR_CAECINT_CLEAR                     (0x00000001)
//--------

//--------
#define GPWTM_GPTMICR_R_RTCCINT_MASK                    (0x00000008)
#define GPWTM_GPTMICR_R_RTCCINT_BIT                     (3)
#define GPWTM_GPTMICR_R_RTCCINT_CLEAR                   (0x00000008)

#define GPWTM_GPTMICR_RTCCINT_MASK                      (0x00000001)
#define GPWTM_GPTMICR_RTCCINT_CLEAR                     (0x00000001)
//--------

//--------
#define GPWTM_GPTMICR_R_TAMCINT_MASK                    (0x00000010)
#define GPWTM_GPTMICR_R_TAMCINT_BIT                     (4)
#define GPWTM_GPTMICR_R_TAMCINT_CLEAR                   (0x00000010)

#define GPWTM_GPTMICR_TAMCINT_MASK                      (0x00000001)
#define GPWTM_GPTMICR_TAMCINT_CLEAR                     (0x00000001)
//--------

//--------
#define GPWTM_GPTMICR_R_TBTOCINT_MASK                   (0x00000100)
#define GPWTM_GPTMICR_R_TBTOCINT_BIT                    (8)
#define GPWTM_GPTMICR_R_TBTOCINT_CLEAR                  (0x00000100)

#define GPWTM_GPTMICR_TBTOCINT_MASK                     (0x00000001)
#define GPWTM_GPTMICR_TBTOCINT_CLEAR                    (0x00000001)
//--------

//--------
#define GPWTM_GPTMICR_R_CBMCINT_MASK                    (0x00000200)
#define GPWTM_GPTMICR_R_CBMCINT_BIT                     (9)
#define GPWTM_GPTMICR_R_CBMCINT_CLEAR                   (0x00000200)

#define GPWTM_GPTMICR_CBMCINT_MASK                      (0x00000001)
#define GPWTM_GPTMICR_CBMCINT_CLEAR                     (0x00000001)
//--------

//--------
#define GPWTM_GPTMICR_R_CBECINT_MASK                    (0x00000400)
#define GPWTM_GPTMICR_R_CBECINT_BIT                     (10)
#define GPWTM_GPTMICR_R_CBECINT_CLEAR                   (0x00000400)

#define GPWTM_GPTMICR_CBECINT_MASK                      (0x00000001)
#define GPWTM_GPTMICR_CBECINT_CLEAR                     (0x00000001)
//--------

//--------
#define GPWTM_GPTMICR_R_TBMCINT_MASK                    (0x00000800)
#define GPWTM_GPTMICR_R_TBMCINT_BIT                     (11)
#define GPWTM_GPTMICR_R_TBMCINT_CLEAR                   (0x00000800)

#define GPWTM_GPTMICR_TBMCINT_MASK                      (0x00000001)
#define GPWTM_GPTMICR_TBMCINT_CLEAR                     (0x00000001)
//--------

//--------
#define GPWTM_GPTMICR_R_WUECINT_MASK                    (0x00010000)
#define GPWTM_GPTMICR_R_WUECINT_BIT                     (16)
#define GPWTM_GPTMICR_R_WUECINT_CLEAR                   (0x00010000)

#define GPWTM_GPTMICR_WUECINT_MASK                      (0x00000001)
#define GPWTM_GPTMICR_WUECINT_CLEAR                     (0x00000001)
//--------


//--------
#define GPWTM_TA_GPTMTnICR_R_TnTOCINT_MASK              (0x00000001)
#define GPWTM_TA_GPTMTnICR_R_TnTOCINT_BIT               (0)
#define GPWTM_TA_GPTMTnICR_R_TnTOCINT_CLEAR             (0x00000001)

#define GPWTM_TA_GPTMTnICR_TnTOCINT_MASK                (0x00000001)
#define GPWTM_TA_GPTMTnICR_TnTOCINT_CLEAR               (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnICR_R_CnMCINT_MASK               (0x00000002)
#define GPWTM_TA_GPTMTnICR_R_CnMCINT_BIT                (1)
#define GPWTM_TA_GPTMTnICR_R_CnMCINT_CLEAR              (0x00000002)

#define GPWTM_TA_GPTMTnICR_CnMCINT_MASK                 (0x00000001)
#define GPWTM_TA_GPTMTnICR_CnMCINT_CLEAR                (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnICR_R_CnECINT_MASK               (0x00000004)
#define GPWTM_TA_GPTMTnICR_R_CnECINT_BIT                (2)
#define GPWTM_TA_GPTMTnICR_R_CnECINT_CLEAR              (0x00000004)

#define GPWTM_TA_GPTMTnICR_CnECINT_MASK                 (0x00000001)
#define GPWTM_TA_GPTMTnICR_CnECINT_CLEAR                (0x00000001)
//--------

//--------
#define GPWTM_TA_GPTMTnICR_R_TnMCINT_MASK               (0x00000010)
#define GPWTM_TA_GPTMTnICR_R_TnMCINT_BIT                (4)
#define GPWTM_TA_GPTMTnICR_R_TnMCINT_CLEAR              (0x00000010)

#define GPWTM_TA_GPTMTnICR_TnMCINT_MASK                 (0x00000001)
#define GPWTM_TA_GPTMTnICR_TnMCINT_CLEAR                (0x00000001)
//--------


//--------
#define GPWTM_TB_GPTMTnICR_R_TnTOCINT_MASK              (0x00000100)
#define GPWTM_TB_GPTMTnICR_R_TnTOCINT_BIT               (8)
#define GPWTM_TB_GPTMTnICR_R_TnTOCINT_DIS               (0x00000000)
#define GPWTM_TB_GPTMTnICR_R_TnTOCINT_EN                (0x00000100)

#define GPWTM_TB_GPTMTnICR_TnTOCINT_MASK                (0x00000001)
#define GPWTM_TB_GPTMTnICR_TnTOCINT_DIS                 (0x00000000)
#define GPWTM_TB_GPTMTnICR_TnTOCINT_EN                  (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnICR_R_CnMCINT_MASK               (0x00000200)
#define GPWTM_TB_GPTMTnICR_R_CnMCINT_BIT                (9)
#define GPWTM_TB_GPTMTnICR_R_CnMCINT_DIS                (0x00000000)
#define GPWTM_TB_GPTMTnICR_R_CnMCINT_EN                 (0x00000200)

#define GPWTM_TB_GPTMTnICR_CnMCINT_MASK                 (0x00000001)
#define GPWTM_TB_GPTMTnICR_CnMCINT_DIS                  (0x00000000)
#define GPWTM_TB_GPTMTnICR_CnMCINT_EN                   (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnICR_R_CnECINT_MASK               (0x00000400)
#define GPWTM_TB_GPTMTnICR_R_CnECINT_BIT                (10)
#define GPWTM_TB_GPTMTnICR_R_CnECINT_DIS                (0x00000000)
#define GPWTM_TB_GPTMTnICR_R_CnECINT_EN                 (0x00000400)

#define GPWTM_TB_GPTMTnICR_CnECINT_MASK                 (0x00000001)
#define GPWTM_TB_GPTMTnICR_CnECINT_DIS                  (0x00000000)
#define GPWTM_TB_GPTMTnICR_CnECINT_EN                   (0x00000001)
//--------

//--------
#define GPWTM_TB_GPTMTnICR_R_TnMCINT_MASK               (0x00000800)
#define GPWTM_TB_GPTMTnICR_R_TnMCINT_BIT                (11)
#define GPWTM_TB_GPTMTnICR_R_TnMCINT_DIS                (0x00000000)
#define GPWTM_TB_GPTMTnICR_R_TnMCINT_EN                 (0x00000800)

#define GPWTM_TB_GPTMTnICR_TnMCINT_MASK                 (0x00000001)
#define GPWTM_TB_GPTMTnICR_TnMCINT_DIS                  (0x00000000)
#define GPWTM_TB_GPTMTnICR_TnMCINT_EN                   (0x00000001)
//--------


//--------
#define GPWTM_TW_GPTMTnICR_R_TnTOCINT_MASK              (0x00000001)
#define GPWTM_TW_GPTMTnICR_R_TnTOCINT_BIT               (0)
#define GPWTM_TW_GPTMTnICR_R_TnTOCINT_CLEAR             (0x00000001)

#define GPWTM_TW_GPTMTnICR_TnTOCINT_MASK                (0x00000001)
#define GPWTM_TW_GPTMTnICR_TnTOCINT_CLEAR               (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnICR_R_CnMCINT_MASK               (0x00000002)
#define GPWTM_TW_GPTMTnICR_R_CnMCINT_BIT                (1)
#define GPWTM_TW_GPTMTnICR_R_CnMCINT_CLEAR              (0x00000002)

#define GPWTM_TW_GPTMTnICR_CnMCINT_MASK                 (0x00000001)
#define GPWTM_TW_GPTMTnICR_CnMCINT_CLEAR                (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnICR_R_CnECINT_MASK               (0x00000004)
#define GPWTM_TW_GPTMTnICR_R_CnECINT_BIT                (2)
#define GPWTM_TW_GPTMTnICR_R_CnECINT_CLEAR              (0x00000004)

#define GPWTM_TW_GPTMTnICR_CnECINT_MASK                 (0x00000001)
#define GPWTM_TW_GPTMTnICR_CnECINT_CLEAR                (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnICR_R_RTCCINT_MASK               (0x00000008)
#define GPWTM_TW_GPTMTnICR_R_RTCCINT_BIT                (3)
#define GPWTM_TW_GPTMTnICR_R_RTCCINT_CLEAR              (0x00000008)

#define GPWTM_TW_GPTMTnICR_RTCCINT_MASK                 (0x00000001)
#define GPWTM_TW_GPTMTnICR_RTCCINT_CLEAR                (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnICR_R_TnMCINT_MASK               (0x00000010)
#define GPWTM_TW_GPTMTnICR_R_TnMCINT_BIT                (4)
#define GPWTM_TW_GPTMTnICR_R_TnMCINT_CLEAR              (0x00000010)

#define GPWTM_TW_GPTMTnICR_TnMCINT_MASK                 (0x00000001)
#define GPWTM_TW_GPTMTnICR_TnMCINT_CLEAR                (0x00000001)
//--------

//--------
#define GPWTM_TW_GPTMTnICR_R_WUECINT_MASK               (0x00010000)
#define GPWTM_TW_GPTMTnICR_R_WUECINT_BIT                (16)
#define GPWTM_TW_GPTMTnICR_R_WUECINT_CLEAR              (0x00010000)

#define GPWTM_TW_GPTMTnICR_WUECINT_MASK                 (0x00000001)
#define GPWTM_TW_GPTMTnICR_WUECINT_CLEAR                (0x00000001)
//--------

/* GPTM0 BITBANDING GPTMICR*/
#define GPTM0_BITBANDING_GPTMICR_TATOCINT             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TATOCINT_BIT*4))))
#define GPTM0_BITBANDING_GPTMICR_CAMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CAMCINT_BIT*4))))
#define GPTM0_BITBANDING_GPTMICR_CAECINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CAECINT_BIT*4))))
#define GPTM0_BITBANDING_GPTMICR_RTCCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_RTCCINT_BIT*4))))
#define GPTM0_BITBANDING_GPTMICR_TAMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TAMCINT_BIT*4))))
#define GPTM0_BITBANDING_GPTMICR_TBTOCINT             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TBTOCINT_BIT*4))))
#define GPTM0_BITBANDING_GPTMICR_CBMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CBMCINT_BIT*4))))
#define GPTM0_BITBANDING_GPTMICR_CBECINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CBECINT_BIT*4))))
#define GPTM0_BITBANDING_GPTMICR_TBMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TBMCINT_BIT*4))))
#define GPTM0_BITBANDING_GPTMICR_WUECINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_WUECINT_BIT*4))))

#define GPTM0_BITBANDING_TA_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPTM0_BITBANDING_TA_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPTM0_BITBANDING_TB_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPTM0_BITBANDING_TB_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPTM0_BITBANDING_TW_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnICR_RTCCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_RTCCINT_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPTM0_BITBANDING_TW_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_TnMCINT_BIT*4))))

/* GPTM1 BITBANDING GPTMICR*/
#define GPTM1_BITBANDING_GPTMICR_TATOCINT             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TATOCINT_BIT*4))))
#define GPTM1_BITBANDING_GPTMICR_CAMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CAMCINT_BIT*4))))
#define GPTM1_BITBANDING_GPTMICR_CAECINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CAECINT_BIT*4))))
#define GPTM1_BITBANDING_GPTMICR_RTCCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_RTCCINT_BIT*4))))
#define GPTM1_BITBANDING_GPTMICR_TAMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TAMCINT_BIT*4))))
#define GPTM1_BITBANDING_GPTMICR_TBTOCINT             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TBTOCINT_BIT*4))))
#define GPTM1_BITBANDING_GPTMICR_CBMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CBMCINT_BIT*4))))
#define GPTM1_BITBANDING_GPTMICR_CBECINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CBECINT_BIT*4))))
#define GPTM1_BITBANDING_GPTMICR_TBMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TBMCINT_BIT*4))))
#define GPTM1_BITBANDING_GPTMICR_WUECINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_WUECINT_BIT*4))))

#define GPTM1_BITBANDING_TA_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPTM1_BITBANDING_TA_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPTM1_BITBANDING_TB_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPTM1_BITBANDING_TB_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPTM1_BITBANDING_TW_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnICR_RTCCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_RTCCINT_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPTM1_BITBANDING_TW_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_TnMCINT_BIT*4))))

/* GPTM2 BITBANDING GPTMICR*/
#define GPTM2_BITBANDING_GPTMICR_TATOCINT             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TATOCINT_BIT*4))))
#define GPTM2_BITBANDING_GPTMICR_CAMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CAMCINT_BIT*4))))
#define GPTM2_BITBANDING_GPTMICR_CAECINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CAECINT_BIT*4))))
#define GPTM2_BITBANDING_GPTMICR_RTCCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_RTCCINT_BIT*4))))
#define GPTM2_BITBANDING_GPTMICR_TAMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TAMCINT_BIT*4))))
#define GPTM2_BITBANDING_GPTMICR_TBTOCINT             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TBTOCINT_BIT*4))))
#define GPTM2_BITBANDING_GPTMICR_CBMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CBMCINT_BIT*4))))
#define GPTM2_BITBANDING_GPTMICR_CBECINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CBECINT_BIT*4))))
#define GPTM2_BITBANDING_GPTMICR_TBMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TBMCINT_BIT*4))))
#define GPTM2_BITBANDING_GPTMICR_WUECINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_WUECINT_BIT*4))))

#define GPTM2_BITBANDING_TA_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPTM2_BITBANDING_TA_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPTM2_BITBANDING_TB_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPTM2_BITBANDING_TB_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPTM2_BITBANDING_TW_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnICR_RTCCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_RTCCINT_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPTM2_BITBANDING_TW_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_TnMCINT_BIT*4))))

/* GPTM3 BITBANDING GPTMICR*/
#define GPTM3_BITBANDING_GPTMICR_TATOCINT             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TATOCINT_BIT*4))))
#define GPTM3_BITBANDING_GPTMICR_CAMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CAMCINT_BIT*4))))
#define GPTM3_BITBANDING_GPTMICR_CAECINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CAECINT_BIT*4))))
#define GPTM3_BITBANDING_GPTMICR_RTCCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_RTCCINT_BIT*4))))
#define GPTM3_BITBANDING_GPTMICR_TAMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TAMCINT_BIT*4))))
#define GPTM3_BITBANDING_GPTMICR_TBTOCINT             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TBTOCINT_BIT*4))))
#define GPTM3_BITBANDING_GPTMICR_CBMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CBMCINT_BIT*4))))
#define GPTM3_BITBANDING_GPTMICR_CBECINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CBECINT_BIT*4))))
#define GPTM3_BITBANDING_GPTMICR_TBMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TBMCINT_BIT*4))))
#define GPTM3_BITBANDING_GPTMICR_WUECINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_WUECINT_BIT*4))))

#define GPTM3_BITBANDING_TA_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPTM3_BITBANDING_TA_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPTM3_BITBANDING_TB_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPTM3_BITBANDING_TB_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPTM3_BITBANDING_TW_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnICR_RTCCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_RTCCINT_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPTM3_BITBANDING_TW_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_TnMCINT_BIT*4))))

/* GPTM4 BITBANDING GPTMICR*/
#define GPTM4_BITBANDING_GPTMICR_TATOCINT             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TATOCINT_BIT*4))))
#define GPTM4_BITBANDING_GPTMICR_CAMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CAMCINT_BIT*4))))
#define GPTM4_BITBANDING_GPTMICR_CAECINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CAECINT_BIT*4))))
#define GPTM4_BITBANDING_GPTMICR_RTCCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_RTCCINT_BIT*4))))
#define GPTM4_BITBANDING_GPTMICR_TAMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TAMCINT_BIT*4))))
#define GPTM4_BITBANDING_GPTMICR_TBTOCINT             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TBTOCINT_BIT*4))))
#define GPTM4_BITBANDING_GPTMICR_CBMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CBMCINT_BIT*4))))
#define GPTM4_BITBANDING_GPTMICR_CBECINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CBECINT_BIT*4))))
#define GPTM4_BITBANDING_GPTMICR_TBMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TBMCINT_BIT*4))))
#define GPTM4_BITBANDING_GPTMICR_WUECINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_WUECINT_BIT*4))))

#define GPTM4_BITBANDING_TA_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPTM4_BITBANDING_TA_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPTM4_BITBANDING_TB_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPTM4_BITBANDING_TB_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPTM4_BITBANDING_TW_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnICR_RTCCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_RTCCINT_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPTM4_BITBANDING_TW_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_TnMCINT_BIT*4))))

/* GPTM5 BITBANDING GPTMICR*/
#define GPTM5_BITBANDING_GPTMICR_TATOCINT             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TATOCINT_BIT*4))))
#define GPTM5_BITBANDING_GPTMICR_CAMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CAMCINT_BIT*4))))
#define GPTM5_BITBANDING_GPTMICR_CAECINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CAECINT_BIT*4))))
#define GPTM5_BITBANDING_GPTMICR_RTCCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_RTCCINT_BIT*4))))
#define GPTM5_BITBANDING_GPTMICR_TAMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TAMCINT_BIT*4))))
#define GPTM5_BITBANDING_GPTMICR_TBTOCINT             (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TBTOCINT_BIT*4))))
#define GPTM5_BITBANDING_GPTMICR_CBMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CBMCINT_BIT*4))))
#define GPTM5_BITBANDING_GPTMICR_CBECINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_CBECINT_BIT*4))))
#define GPTM5_BITBANDING_GPTMICR_TBMCINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_TBMCINT_BIT*4))))
#define GPTM5_BITBANDING_GPTMICR_WUECINT              (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMICR_OFFSET)*32)+(GPTM_GPTMICR_R_WUECINT_BIT*4))))

#define GPTM5_BITBANDING_TA_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPTM5_BITBANDING_TA_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnICR_OFFSET)*32)+(GPTM_TA_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPTM5_BITBANDING_TB_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPTM5_BITBANDING_TB_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnICR_OFFSET)*32)+(GPTM_TB_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPTM5_BITBANDING_TW_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnICR_RTCCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_RTCCINT_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPTM5_BITBANDING_TW_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnICR_OFFSET)*32)+(GPTM_TW_GPTMTnICR_R_TnMCINT_BIT*4))))

/* GPTM0 BITBANDING GPTMICR*/
#define GPWTM0_BITBANDING_GPTMICR_TATOCINT             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TATOCINT_BIT*4))))
#define GPWTM0_BITBANDING_GPTMICR_CAMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CAMCINT_BIT*4))))
#define GPWTM0_BITBANDING_GPTMICR_CAECINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CAECINT_BIT*4))))
#define GPWTM0_BITBANDING_GPTMICR_RTCCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_RTCCINT_BIT*4))))
#define GPWTM0_BITBANDING_GPTMICR_TAMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TAMCINT_BIT*4))))
#define GPWTM0_BITBANDING_GPTMICR_TBTOCINT             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TBTOCINT_BIT*4))))
#define GPWTM0_BITBANDING_GPTMICR_CBMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CBMCINT_BIT*4))))
#define GPWTM0_BITBANDING_GPTMICR_CBECINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CBECINT_BIT*4))))
#define GPWTM0_BITBANDING_GPTMICR_TBMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TBMCINT_BIT*4))))
#define GPWTM0_BITBANDING_GPTMICR_WUECINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_WUECINT_BIT*4))))

#define GPWTM0_BITBANDING_TA_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPWTM0_BITBANDING_TA_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPWTM0_BITBANDING_TB_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPWTM0_BITBANDING_TB_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPWTM0_BITBANDING_TW_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnICR_RTCCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_RTCCINT_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_TnMCINT_BIT*4))))
#define GPWTM0_BITBANDING_TW_GPTMTnICR_WUECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_WUECINT_BIT*4))))

/* GPTM0 BITBANDING GPTMICR*/
#define GPWTM1_BITBANDING_GPTMICR_TATOCINT             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TATOCINT_BIT*4))))
#define GPWTM1_BITBANDING_GPTMICR_CAMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CAMCINT_BIT*4))))
#define GPWTM1_BITBANDING_GPTMICR_CAECINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CAECINT_BIT*4))))
#define GPWTM1_BITBANDING_GPTMICR_RTCCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_RTCCINT_BIT*4))))
#define GPWTM1_BITBANDING_GPTMICR_TAMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TAMCINT_BIT*4))))
#define GPWTM1_BITBANDING_GPTMICR_TBTOCINT             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TBTOCINT_BIT*4))))
#define GPWTM1_BITBANDING_GPTMICR_CBMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CBMCINT_BIT*4))))
#define GPWTM1_BITBANDING_GPTMICR_CBECINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CBECINT_BIT*4))))
#define GPWTM1_BITBANDING_GPTMICR_TBMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TBMCINT_BIT*4))))
#define GPWTM1_BITBANDING_GPTMICR_WUECINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_WUECINT_BIT*4))))

#define GPWTM1_BITBANDING_TA_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPWTM1_BITBANDING_TA_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPWTM1_BITBANDING_TB_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPWTM1_BITBANDING_TB_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPWTM1_BITBANDING_TW_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnICR_RTCCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_RTCCINT_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_TnMCINT_BIT*4))))
#define GPWTM1_BITBANDING_TW_GPTMTnICR_WUECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_WUECINT_BIT*4))))

/* GPTM0 BITBANDING GPTMICR*/
#define GPWTM2_BITBANDING_GPTMICR_TATOCINT             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TATOCINT_BIT*4))))
#define GPWTM2_BITBANDING_GPTMICR_CAMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CAMCINT_BIT*4))))
#define GPWTM2_BITBANDING_GPTMICR_CAECINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CAECINT_BIT*4))))
#define GPWTM2_BITBANDING_GPTMICR_RTCCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_RTCCINT_BIT*4))))
#define GPWTM2_BITBANDING_GPTMICR_TAMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TAMCINT_BIT*4))))
#define GPWTM2_BITBANDING_GPTMICR_TBTOCINT             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TBTOCINT_BIT*4))))
#define GPWTM2_BITBANDING_GPTMICR_CBMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CBMCINT_BIT*4))))
#define GPWTM2_BITBANDING_GPTMICR_CBECINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CBECINT_BIT*4))))
#define GPWTM2_BITBANDING_GPTMICR_TBMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TBMCINT_BIT*4))))
#define GPWTM2_BITBANDING_GPTMICR_WUECINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_WUECINT_BIT*4))))

#define GPWTM2_BITBANDING_TA_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPWTM2_BITBANDING_TA_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPWTM2_BITBANDING_TB_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPWTM2_BITBANDING_TB_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPWTM2_BITBANDING_TW_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnICR_RTCCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_RTCCINT_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_TnMCINT_BIT*4))))
#define GPWTM2_BITBANDING_TW_GPTMTnICR_WUECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_WUECINT_BIT*4))))

/* GPTM0 BITBANDING GPTMICR*/
#define GPWTM3_BITBANDING_GPTMICR_TATOCINT             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TATOCINT_BIT*4))))
#define GPWTM3_BITBANDING_GPTMICR_CAMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CAMCINT_BIT*4))))
#define GPWTM3_BITBANDING_GPTMICR_CAECINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CAECINT_BIT*4))))
#define GPWTM3_BITBANDING_GPTMICR_RTCCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_RTCCINT_BIT*4))))
#define GPWTM3_BITBANDING_GPTMICR_TAMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TAMCINT_BIT*4))))
#define GPWTM3_BITBANDING_GPTMICR_TBTOCINT             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TBTOCINT_BIT*4))))
#define GPWTM3_BITBANDING_GPTMICR_CBMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CBMCINT_BIT*4))))
#define GPWTM3_BITBANDING_GPTMICR_CBECINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CBECINT_BIT*4))))
#define GPWTM3_BITBANDING_GPTMICR_TBMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TBMCINT_BIT*4))))
#define GPWTM3_BITBANDING_GPTMICR_WUECINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_WUECINT_BIT*4))))

#define GPWTM3_BITBANDING_TA_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPWTM3_BITBANDING_TA_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPWTM3_BITBANDING_TB_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPWTM3_BITBANDING_TB_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPWTM3_BITBANDING_TW_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnICR_RTCCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_RTCCINT_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_TnMCINT_BIT*4))))
#define GPWTM3_BITBANDING_TW_GPTMTnICR_WUECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_WUECINT_BIT*4))))

/* GPTM0 BITBANDING GPTMICR*/
#define GPWTM4_BITBANDING_GPTMICR_TATOCINT             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TATOCINT_BIT*4))))
#define GPWTM4_BITBANDING_GPTMICR_CAMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CAMCINT_BIT*4))))
#define GPWTM4_BITBANDING_GPTMICR_CAECINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CAECINT_BIT*4))))
#define GPWTM4_BITBANDING_GPTMICR_RTCCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_RTCCINT_BIT*4))))
#define GPWTM4_BITBANDING_GPTMICR_TAMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TAMCINT_BIT*4))))
#define GPWTM4_BITBANDING_GPTMICR_TBTOCINT             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TBTOCINT_BIT*4))))
#define GPWTM4_BITBANDING_GPTMICR_CBMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CBMCINT_BIT*4))))
#define GPWTM4_BITBANDING_GPTMICR_CBECINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CBECINT_BIT*4))))
#define GPWTM4_BITBANDING_GPTMICR_TBMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TBMCINT_BIT*4))))
#define GPWTM4_BITBANDING_GPTMICR_WUECINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_WUECINT_BIT*4))))

#define GPWTM4_BITBANDING_TA_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPWTM4_BITBANDING_TA_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPWTM4_BITBANDING_TB_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPWTM4_BITBANDING_TB_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPWTM4_BITBANDING_TW_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnICR_RTCCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_RTCCINT_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_TnMCINT_BIT*4))))
#define GPWTM4_BITBANDING_TW_GPTMTnICR_WUECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_WUECINT_BIT*4))))

/* GPTM0 BITBANDING GPTMICR*/
#define GPWTM5_BITBANDING_GPTMICR_TATOCINT             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TATOCINT_BIT*4))))
#define GPWTM5_BITBANDING_GPTMICR_CAMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CAMCINT_BIT*4))))
#define GPWTM5_BITBANDING_GPTMICR_CAECINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CAECINT_BIT*4))))
#define GPWTM5_BITBANDING_GPTMICR_RTCCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_RTCCINT_BIT*4))))
#define GPWTM5_BITBANDING_GPTMICR_TAMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TAMCINT_BIT*4))))
#define GPWTM5_BITBANDING_GPTMICR_TBTOCINT             (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TBTOCINT_BIT*4))))
#define GPWTM5_BITBANDING_GPTMICR_CBMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CBMCINT_BIT*4))))
#define GPWTM5_BITBANDING_GPTMICR_CBECINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_CBECINT_BIT*4))))
#define GPWTM5_BITBANDING_GPTMICR_TBMCINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_TBMCINT_BIT*4))))
#define GPWTM5_BITBANDING_GPTMICR_WUECINT              (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMICR_OFFSET)*32)+(GPWTM_GPTMICR_R_WUECINT_BIT*4))))

#define GPWTM5_BITBANDING_TA_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPWTM5_BITBANDING_TA_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnICR_OFFSET)*32)+(GPWTM_TA_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPWTM5_BITBANDING_TB_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPWTM5_BITBANDING_TB_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnICR_OFFSET)*32)+(GPWTM_TB_GPTMTnICR_R_TnMCINT_BIT*4))))

#define GPWTM5_BITBANDING_TW_GPTMTnICR_TnTOCINT        (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_TnTOCINT_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnICR_CnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_CnMCINT_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnICR_RTCCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_RTCCINT_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnICR_CnECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_CnECINT_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnICR_TnMCINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_TnMCINT_BIT*4))))
#define GPWTM5_BITBANDING_TW_GPTMTnICR_WUECINT         (*((volatile uint32_t *)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnICR_OFFSET)*32)+(GPWTM_TW_GPTMTnICR_R_WUECINT_BIT*4))))

/******************************************************************************************
************************************ 10 GPTMTAILR *********************************************
******************************************************************************************/

/* GPTM0 GPTMTAILR*/
#define GPTM0_BITBANDING_GPTMTAILR              (((BITBANDING_GPTMTAILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAILR_OFFSET)*32))))
#define GPTM0_GPTMTAILR                         (((GPTMTAILR_TypeDef*)(GPTM0_BASE + GPTM_GPTMTAILR_OFFSET )))
#define GPTM0_GPTMTAILR_R                       (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMTAILR_OFFSET)))

#define GPTM0_BITBANDING_TA_GPTMTnILR           (((BITBANDING_TA_GPTMILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnILR_OFFSET)*32))))
#define GPTM0_TA_GPTMTnILR                      (((TA_GPTMILR_TypeDef*)(GPTM0_BASE + GPTM_TA_GPTMTnILR_OFFSET )))
#define GPTM0_TA_GPTMTnILR_R                    (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TA_GPTMTnILR_OFFSET)))

#define GPTM0_BITBANDING_TW_GPTMTnILR           (((BITBANDING_TW_GPTMILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnILR_OFFSET)*32))))
#define GPTM0_TW_GPTMTnILR                      (((TW_GPTMILR_TypeDef*)(GPTM0_BASE + GPTM_TW_GPTMTnILR_OFFSET )))
#define GPTM0_TW_GPTMTnILR_R                    (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TW_GPTMTnILR_OFFSET)))

/* GPTM1 GPTMTAILR*/
#define GPTM1_BITBANDING_GPTMTAILR              (((BITBANDING_GPTMTAILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAILR_OFFSET)*32))))
#define GPTM1_GPTMTAILR                         (((GPTMTAILR_TypeDef*)(GPTM1_BASE + GPTM_GPTMTAILR_OFFSET )))
#define GPTM1_GPTMTAILR_R                       (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMTAILR_OFFSET)))

#define GPTM1_BITBANDING_TA_GPTMTnILR           (((BITBANDING_TA_GPTMILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnILR_OFFSET)*32))))
#define GPTM1_TA_GPTMTnILR                      (((TA_GPTMILR_TypeDef*)(GPTM1_BASE + GPTM_TA_GPTMTnILR_OFFSET )))
#define GPTM1_TA_GPTMTnILR_R                    (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TA_GPTMTnILR_OFFSET)))

#define GPTM1_BITBANDING_TW_GPTMTnILR           (((BITBANDING_TW_GPTMILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnILR_OFFSET)*32))))
#define GPTM1_TW_GPTMTnILR                      (((TW_GPTMILR_TypeDef*)(GPTM1_BASE + GPTM_TW_GPTMTnILR_OFFSET )))
#define GPTM1_TW_GPTMTnILR_R                    (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TW_GPTMTnILR_OFFSET)))

/* GPTM2 GPTMTAILR*/
#define GPTM2_BITBANDING_GPTMTAILR              (((BITBANDING_GPTMTAILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAILR_OFFSET)*32))))
#define GPTM2_GPTMTAILR                         (((GPTMTAILR_TypeDef*)(GPTM2_BASE + GPTM_GPTMTAILR_OFFSET )))
#define GPTM2_GPTMTAILR_R                       (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMTAILR_OFFSET)))

#define GPTM2_BITBANDING_TA_GPTMTnILR           (((BITBANDING_TA_GPTMILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnILR_OFFSET)*32))))
#define GPTM2_TA_GPTMTnILR                      (((TA_GPTMILR_TypeDef*)(GPTM2_BASE + GPTM_TA_GPTMTnILR_OFFSET )))
#define GPTM2_TA_GPTMTnILR_R                    (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TA_GPTMTnILR_OFFSET)))

#define GPTM2_BITBANDING_TW_GPTMTnILR           (((BITBANDING_TW_GPTMILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnILR_OFFSET)*32))))
#define GPTM2_TW_GPTMTnILR                      (((TW_GPTMILR_TypeDef*)(GPTM2_BASE + GPTM_TW_GPTMTnILR_OFFSET )))
#define GPTM2_TW_GPTMTnILR_R                    (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TW_GPTMTnILR_OFFSET)))

/* GPTM3 GPTMTAILR*/
#define GPTM3_BITBANDING_GPTMTAILR              (((BITBANDING_GPTMTAILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAILR_OFFSET)*32))))
#define GPTM3_GPTMTAILR                         (((GPTMTAILR_TypeDef*)(GPTM3_BASE + GPTM_GPTMTAILR_OFFSET )))
#define GPTM3_GPTMTAILR_R                       (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMTAILR_OFFSET)))

#define GPTM3_BITBANDING_TA_GPTMTnILR           (((BITBANDING_TA_GPTMILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnILR_OFFSET)*32))))
#define GPTM3_TA_GPTMTnILR                      (((TA_GPTMILR_TypeDef*)(GPTM3_BASE + GPTM_TA_GPTMTnILR_OFFSET )))
#define GPTM3_TA_GPTMTnILR_R                    (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TA_GPTMTnILR_OFFSET)))

#define GPTM3_BITBANDING_TW_GPTMTnILR           (((BITBANDING_TW_GPTMILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnILR_OFFSET)*32))))
#define GPTM3_TW_GPTMTnILR                      (((TW_GPTMILR_TypeDef*)(GPTM3_BASE + GPTM_TW_GPTMTnILR_OFFSET )))
#define GPTM3_TW_GPTMTnILR_R                    (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TW_GPTMTnILR_OFFSET)))

/* GPTM4 GPTMTAILR*/
#define GPTM4_BITBANDING_GPTMTAILR              (((BITBANDING_GPTMTAILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAILR_OFFSET)*32))))
#define GPTM4_GPTMTAILR                         (((GPTMTAILR_TypeDef*)(GPTM4_BASE + GPTM_GPTMTAILR_OFFSET )))
#define GPTM4_GPTMTAILR_R                       (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMTAILR_OFFSET)))

#define GPTM4_BITBANDING_TA_GPTMTnILR           (((BITBANDING_TA_GPTMILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnILR_OFFSET)*32))))
#define GPTM4_TA_GPTMTnILR                      (((TA_GPTMILR_TypeDef*)(GPTM4_BASE + GPTM_TA_GPTMTnILR_OFFSET )))
#define GPTM4_TA_GPTMTnILR_R                    (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TA_GPTMTnILR_OFFSET)))

#define GPTM4_BITBANDING_TW_GPTMTnILR           (((BITBANDING_TW_GPTMILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnILR_OFFSET)*32))))
#define GPTM4_TW_GPTMTnILR                      (((TW_GPTMILR_TypeDef*)(GPTM4_BASE + GPTM_TW_GPTMTnILR_OFFSET )))
#define GPTM4_TW_GPTMTnILR_R                    (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TW_GPTMTnILR_OFFSET)))

/* GPTM5 GPTMTAILR*/
#define GPTM5_BITBANDING_GPTMTAILR              (((BITBANDING_GPTMTAILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAILR_OFFSET)*32))))
#define GPTM5_GPTMTAILR                         (((GPTMTAILR_TypeDef*)(GPTM5_BASE + GPTM_GPTMTAILR_OFFSET )))
#define GPTM5_GPTMTAILR_R                       (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMTAILR_OFFSET)))

#define GPTM5_BITBANDING_TA_GPTMTnILR           (((BITBANDING_TA_GPTMILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnILR_OFFSET)*32))))
#define GPTM5_TA_GPTMTnILR                      (((TA_GPTMILR_TypeDef*)(GPTM5_BASE + GPTM_TA_GPTMTnILR_OFFSET )))
#define GPTM5_TA_GPTMTnILR_R                    (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TA_GPTMTnILR_OFFSET)))

#define GPTM5_BITBANDING_TW_GPTMTnILR           (((BITBANDING_TW_GPTMILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnILR_OFFSET)*32))))
#define GPTM5_TW_GPTMTnILR                      (((TW_GPTMILR_TypeDef*)(GPTM5_BASE + GPTM_TW_GPTMTnILR_OFFSET )))
#define GPTM5_TW_GPTMTnILR_R                    (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TW_GPTMTnILR_OFFSET)))

/* GPWTM0 GPWTMTAILR*/
#define GPWTM0_BITBANDING_GPTMTAILR             (((BITBANDING_GPTMTAILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAILR_OFFSET)*32))))
#define GPWTM0_GPTMTAILR                        (((GPTMTAILR_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMTAILR_OFFSET )))
#define GPWTM0_GPTMTAILR_R                      (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMTAILR_OFFSET)))

#define GPWTM0_BITBANDING_TA_GPTMTnILR          (((BITBANDING_TA_GPWTMILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnILR_OFFSET)*32))))
#define GPWTM0_TA_GPTMTnILR                     (((TA_GPWTMILR_TypeDef*)(GPWTM0_BASE + GPWTM_TA_GPTMTnILR_OFFSET )))
#define GPWTM0_TA_GPTMTnILR_R                   (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TA_GPTMTnILR_OFFSET)))

#define GPWTM0_BITBANDING_TW_GPTMTnILR_LOW      (((BITBANDING_TW_GPWTMILR_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnILR_LOW_OFFSET)*32))))
#define GPWTM0_TW_GPTMTnILR_LOW                 (((TW_GPWTMILR_LOW_TypeDef*)(GPWTM0_BASE + GPWTM_TW_GPTMTnILR_LOW_OFFSET )))
#define GPWTM0_TW_GPTMTnILR_LOW_R               (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TW_GPTMTnILR_LOW_OFFSET)))

/* GPWTM1 GPWTMTAILR*/
#define GPWTM1_BITBANDING_GPTMTAILR             (((BITBANDING_GPTMTAILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAILR_OFFSET)*32))))
#define GPWTM1_GPTMTAILR                        (((GPTMTAILR_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMTAILR_OFFSET )))
#define GPWTM1_GPTMTAILR_R                      (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMTAILR_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnILR          (((BITBANDING_TA_GPWTMILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnILR_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnILR                     (((TA_GPWTMILR_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnILR_OFFSET )))
#define GPWTM1_TA_GPTMTnILR_R                   (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnILR_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnILR_LOW      (((BITBANDING_TW_GPWTMILR_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnILR_LOW_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnILR_LOW                 (((TW_GPWTMILR_LOW_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnILR_LOW_OFFSET )))
#define GPWTM1_TW_GPTMTnILR_LOW_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnILR_LOW_OFFSET)))

/* GPWTM2 GPWTMTAILR*/
#define GPWTM2_BITBANDING_GPTMTAILR             (((BITBANDING_GPTMTAILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAILR_OFFSET)*32))))
#define GPWTM2_GPTMTAILR                        (((GPTMTAILR_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMTAILR_OFFSET )))
#define GPWTM2_GPTMTAILR_R                      (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMTAILR_OFFSET)))

#define GPWTM2_BITBANDING_TA_GPTMTnILR          (((BITBANDING_TA_GPWTMILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnILR_OFFSET)*32))))
#define GPWTM2_TA_GPTMTnILR                     (((TA_GPWTMILR_TypeDef*)(GPWTM2_BASE + GPWTM_TA_GPTMTnILR_OFFSET )))
#define GPWTM2_TA_GPTMTnILR_R                   (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TA_GPTMTnILR_OFFSET)))

#define GPWTM2_BITBANDING_TW_GPTMTnILR_LOW      (((BITBANDING_TW_GPWTMILR_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnILR_LOW_OFFSET)*32))))
#define GPWTM2_TW_GPTMTnILR_LOW                 (((TW_GPWTMILR_LOW_TypeDef*)(GPWTM2_BASE + GPWTM_TW_GPTMTnILR_LOW_OFFSET )))
#define GPWTM2_TW_GPTMTnILR_LOW_R               (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TW_GPTMTnILR_LOW_OFFSET)))

/* GPWTM3 GPWTMTAILR*/
#define GPWTM3_BITBANDING_GPTMTAILR             (((BITBANDING_GPTMTAILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAILR_OFFSET)*32))))
#define GPWTM3_GPTMTAILR                        (((GPTMTAILR_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMTAILR_OFFSET )))
#define GPWTM3_GPTMTAILR_R                      (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMTAILR_OFFSET)))

#define GPWTM3_BITBANDING_TA_GPTMTnILR          (((BITBANDING_TA_GPWTMILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnILR_OFFSET)*32))))
#define GPWTM3_TA_GPTMTnILR                     (((TA_GPWTMILR_TypeDef*)(GPWTM3_BASE + GPWTM_TA_GPTMTnILR_OFFSET )))
#define GPWTM3_TA_GPTMTnILR_R                   (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TA_GPTMTnILR_OFFSET)))

#define GPWTM3_BITBANDING_TW_GPTMTnILR_LOW      (((BITBANDING_TW_GPWTMILR_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnILR_LOW_OFFSET)*32))))
#define GPWTM3_TW_GPTMTnILR_LOW                 (((TW_GPWTMILR_LOW_TypeDef*)(GPWTM3_BASE + GPWTM_TW_GPTMTnILR_LOW_OFFSET )))
#define GPWTM3_TW_GPTMTnILR_LOW_R               (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TW_GPTMTnILR_LOW_OFFSET)))

/* GPWTM4 GPWTMTAILR*/
#define GPWTM4_BITBANDING_GPTMTAILR             (((BITBANDING_GPTMTAILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAILR_OFFSET)*32))))
#define GPWTM4_GPTMTAILR                        (((GPTMTAILR_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMTAILR_OFFSET )))
#define GPWTM4_GPTMTAILR_R                      (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMTAILR_OFFSET)))

#define GPWTM4_BITBANDING_TA_GPTMTnILR          (((BITBANDING_TA_GPWTMILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnILR_OFFSET)*32))))
#define GPWTM4_TA_GPTMTnILR                     (((TA_GPWTMILR_TypeDef*)(GPWTM4_BASE + GPWTM_TA_GPTMTnILR_OFFSET )))
#define GPWTM4_TA_GPTMTnILR_R                   (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TA_GPTMTnILR_OFFSET)))

#define GPWTM4_BITBANDING_TW_GPTMTnILR_LOW      (((BITBANDING_TW_GPWTMILR_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnILR_LOW_OFFSET)*32))))
#define GPWTM4_TW_GPTMTnILR_LOW                 (((TW_GPWTMILR_LOW_TypeDef*)(GPWTM4_BASE + GPWTM_TW_GPTMTnILR_LOW_OFFSET )))
#define GPWTM4_TW_GPTMTnILR_LOW_R               (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TW_GPTMTnILR_LOW_OFFSET)))

/* GPWTM5 GPWTMTAILR*/
#define GPWTM5_BITBANDING_GPTMTAILR             (((BITBANDING_GPTMTAILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAILR_OFFSET)*32))))
#define GPWTM5_GPTMTAILR                        (((GPTMTAILR_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMTAILR_OFFSET )))
#define GPWTM5_GPTMTAILR_R                      (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMTAILR_OFFSET)))

#define GPWTM5_BITBANDING_TA_GPTMTnILR          (((BITBANDING_TA_GPWTMILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnILR_OFFSET)*32))))
#define GPWTM5_TA_GPTMTnILR                     (((TA_GPWTMILR_TypeDef*)(GPWTM5_BASE + GPWTM_TA_GPTMTnILR_OFFSET )))
#define GPWTM5_TA_GPTMTnILR_R                   (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TA_GPTMTnILR_OFFSET)))

#define GPWTM5_BITBANDING_TW_GPTMTnILR_LOW      (((BITBANDING_TW_GPWTMILR_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnILR_LOW_OFFSET)*32))))
#define GPWTM5_TW_GPTMTnILR_LOW                 (((TW_GPWTMILR_LOW_TypeDef*)(GPWTM5_BASE + GPWTM_TW_GPTMTnILR_LOW_OFFSET )))
#define GPWTM5_TW_GPTMTnILR_LOW_R               (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TW_GPTMTnILR_LOW_OFFSET)))

//--------
#define GPTM_GPTMTAILR_R_TAILR_MASK         (0xFFFFFFFF)
#define GPTM_GPTMTAILR_R_TAILR_BIT          (0)

#define GPTM_GPTMTAILR_TAILR_MASK           (0xFFFFFFFF)
//--------

//--------
#define GPTM_TA_GPTMTnILR_R_TnILR_MASK      (0x0000FFFF)
#define GPTM_TA_GPTMTnILR_R_TnILR_BIT       (0)

#define GPTM_TA_GPTMTnILR_TnILR_MASK        (0x0000FFFF)
//--------

//--------
#define GPTM_TW_GPTMTnILR_R_TnILR_MASK      (0xFFFFFFFF)
#define GPTM_TW_GPTMTnILR_R_TnILR_BIT       (0)

#define GPTM_TW_GPTMTnILR_TnILR_MASK        (0xFFFFFFFF)
//--------

//--------
#define GPWTM_GPTMTAILR_R_TAILR_MASK        (0xFFFFFFFF)
#define GPWTM_GPTMTAILR_R_TAILR_BIT         (0)

#define GPWTM_GPTMTAILR_TAILR_MASK          (0xFFFFFFFF)
//--------

//--------
#define GPWTM_TA_GPTMTnILR_R_TnILR_MASK     (0xFFFFFFFF)
#define GPWTM_TA_GPTMTnILR_R_TnILR_BIT      (0)

#define GPWTM_TA_GPTMTnILR_TnILR_MASK       (0xFFFFFFFF)
//--------

//--------
#define GPWTM_TW_GPTMTnILR_LOW_R_TnILR_MASK (0xFFFFFFFF)
#define GPWTM_TW_GPTMTnILR_LOW_R_TnILR_BIT  (0)

#define GPWTM_TW_GPTMTnILR_LOW_TnILR_MASK   (0xFFFFFFFF)
//--------

/******************************************************************************************
************************************ 11 GPTMTBILR *********************************************
******************************************************************************************/

/* GPTM0 GPTMTBILR*/
#define GPTM0_BITBANDING_GPTMTBILR              (((BITBANDING_GPTMTBILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBILR_OFFSET)*32))))
#define GPTM0_GPTMTBILR                         (((GPTMTBILR_TypeDef*)(GPTM0_BASE + GPTM_GPTMTBILR_OFFSET )))
#define GPTM0_GPTMTBILR_R                       (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMTBILR_OFFSET)))

#define GPTM0_BITBANDING_TB_GPTMTnILR           (((BITBANDING_TB_GPTMILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnILR_OFFSET)*32))))
#define GPTM0_TB_GPTMTnILR                      (((TB_GPTMILR_TypeDef*)(GPTM0_BASE + GPTM_TB_GPTMTnILR_OFFSET )))
#define GPTM0_TB_GPTMTnILR_R                    (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TB_GPTMTnILR_OFFSET)))

/* GPTM1 GPTMTBILR*/
#define GPTM1_BITBANDING_GPTMTBILR              (((BITBANDING_GPTMTBILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBILR_OFFSET)*32))))
#define GPTM1_GPTMTBILR                         (((GPTMTBILR_TypeDef*)(GPTM1_BASE + GPTM_GPTMTBILR_OFFSET )))
#define GPTM1_GPTMTBILR_R                       (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMTBILR_OFFSET)))

#define GPTM1_BITBANDING_TB_GPTMTnILR           (((BITBANDING_TB_GPTMILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnILR_OFFSET)*32))))
#define GPTM1_TB_GPTMTnILR                      (((TB_GPTMILR_TypeDef*)(GPTM1_BASE + GPTM_TB_GPTMTnILR_OFFSET )))
#define GPTM1_TB_GPTMTnILR_R                    (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TB_GPTMTnILR_OFFSET)))

/* GPTM2 GPTMTBILR*/
#define GPTM2_BITBANDING_GPTMTBILR              (((BITBANDING_GPTMTBILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBILR_OFFSET)*32))))
#define GPTM2_GPTMTBILR                         (((GPTMTBILR_TypeDef*)(GPTM2_BASE + GPTM_GPTMTBILR_OFFSET )))
#define GPTM2_GPTMTBILR_R                       (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMTBILR_OFFSET)))

#define GPTM2_BITBANDING_TB_GPTMTnILR           (((BITBANDING_TB_GPTMILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnILR_OFFSET)*32))))
#define GPTM2_TB_GPTMTnILR                      (((TB_GPTMILR_TypeDef*)(GPTM2_BASE + GPTM_TB_GPTMTnILR_OFFSET )))
#define GPTM2_TB_GPTMTnILR_R                    (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TB_GPTMTnILR_OFFSET)))

/* GPTM3 GPTMTBILR*/
#define GPTM3_BITBANDING_GPTMTBILR              (((BITBANDING_GPTMTBILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBILR_OFFSET)*32))))
#define GPTM3_GPTMTBILR                         (((GPTMTBILR_TypeDef*)(GPTM3_BASE + GPTM_GPTMTBILR_OFFSET )))
#define GPTM3_GPTMTBILR_R                       (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMTBILR_OFFSET)))

#define GPTM3_BITBANDING_TB_GPTMTnILR           (((BITBANDING_TB_GPTMILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnILR_OFFSET)*32))))
#define GPTM3_TB_GPTMTnILR                      (((TB_GPTMILR_TypeDef*)(GPTM3_BASE + GPTM_TB_GPTMTnILR_OFFSET )))
#define GPTM3_TB_GPTMTnILR_R                    (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TB_GPTMTnILR_OFFSET)))

/* GPTM4 GPTMTBILR*/
#define GPTM4_BITBANDING_GPTMTBILR              (((BITBANDING_GPTMTBILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBILR_OFFSET)*32))))
#define GPTM4_GPTMTBILR                         (((GPTMTBILR_TypeDef*)(GPTM4_BASE + GPTM_GPTMTBILR_OFFSET )))
#define GPTM4_GPTMTBILR_R                       (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMTBILR_OFFSET)))

#define GPTM4_BITBANDING_TB_GPTMTnILR           (((BITBANDING_TB_GPTMILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnILR_OFFSET)*32))))
#define GPTM4_TB_GPTMTnILR                      (((TB_GPTMILR_TypeDef*)(GPTM4_BASE + GPTM_TB_GPTMTnILR_OFFSET )))
#define GPTM4_TB_GPTMTnILR_R                    (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TB_GPTMTnILR_OFFSET)))

/* GPTM5 GPTMTBILR*/
#define GPTM5_BITBANDING_GPTMTBILR              (((BITBANDING_GPTMTBILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBILR_OFFSET)*32))))
#define GPTM5_GPTMTBILR                         (((GPTMTBILR_TypeDef*)(GPTM5_BASE + GPTM_GPTMTBILR_OFFSET )))
#define GPTM5_GPTMTBILR_R                       (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMTBILR_OFFSET)))

#define GPTM5_BITBANDING_TB_GPTMTnILR           (((BITBANDING_TB_GPTMILR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnILR_OFFSET)*32))))
#define GPTM5_TB_GPTMTnILR                      (((TB_GPTMILR_TypeDef*)(GPTM5_BASE + GPTM_TB_GPTMTnILR_OFFSET )))
#define GPTM5_TB_GPTMTnILR_R                    (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TB_GPTMTnILR_OFFSET)))

/* GPWTM0 GPWTMTAILR*/
#define GPWTM0_BITBANDING_GPTMTBILR             (((BITBANDING_GPTMTBILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBILR_OFFSET)*32))))
#define GPWTM0_GPTMTBILR                        (((GPTMTBILR_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMTBILR_OFFSET )))
#define GPWTM0_GPTMTBILR_R                      (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMTBILR_OFFSET)))

#define GPWTM0_BITBANDING_TB_GPTMTnILR          (((BITBANDING_TB_GPWTMILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnILR_OFFSET)*32))))
#define GPWTM0_TB_GPTMTnILR                     (((TB_GPWTMILR_TypeDef*)(GPWTM0_BASE + GPWTM_TB_GPTMTnILR_OFFSET )))
#define GPWTM0_TB_GPTMTnILR_R                   (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TB_GPTMTnILR_OFFSET)))

#define GPWTM0_BITBANDING_TW_GPTMTnILR_HIGH     (((BITBANDING_TW_GPWTMILR_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnILR_HIGH_OFFSET)*32))))
#define GPWTM0_TW_GPTMTnILR_HIGH                (((TW_GPWTMILR_HIGH_TypeDef*)(GPWTM0_BASE + GPWTM_TW_GPTMTnILR_HIGH_OFFSET )))
#define GPWTM0_TW_GPTMTnILR_HIGH_R              (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TW_GPTMTnILR_HIGH_OFFSET)))

/* GPWTM1 GPWTMTAILR*/
#define GPWTM1_BITBANDING_GPTMTBILR             (((BITBANDING_GPTMTBILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBILR_OFFSET)*32))))
#define GPWTM1_GPTMTBILR                        (((GPTMTBILR_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMTBILR_OFFSET )))
#define GPWTM1_GPTMTBILR_R                      (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMTBILR_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnILR          (((BITBANDING_TB_GPWTMILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnILR_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnILR                     (((TB_GPWTMILR_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnILR_OFFSET )))
#define GPWTM1_TB_GPTMTnILR_R                   (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnILR_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnILR_HIGH     (((BITBANDING_TW_GPWTMILR_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnILR_HIGH_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnILR_HIGH                (((TW_GPWTMILR_HIGH_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnILR_HIGH_OFFSET )))
#define GPWTM1_TW_GPTMTnILR_HIGH_R              (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnILR_HIGH_OFFSET)))

/* GPWTM2 GPWTMTAILR*/
#define GPWTM2_BITBANDING_GPTMTBILR             (((BITBANDING_GPTMTBILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBILR_OFFSET)*32))))
#define GPWTM2_GPTMTBILR                        (((GPTMTBILR_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMTBILR_OFFSET )))
#define GPWTM2_GPTMTBILR_R                      (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMTBILR_OFFSET)))

#define GPWTM2_BITBANDING_TB_GPTMTnILR          (((BITBANDING_TB_GPWTMILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnILR_OFFSET)*32))))
#define GPWTM2_TB_GPTMTnILR                     (((TB_GPWTMILR_TypeDef*)(GPWTM2_BASE + GPWTM_TB_GPTMTnILR_OFFSET )))
#define GPWTM2_TB_GPTMTnILR_R                   (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TB_GPTMTnILR_OFFSET)))

#define GPWTM2_BITBANDING_TW_GPTMTnILR_HIGH     (((BITBANDING_TW_GPWTMILR_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnILR_HIGH_OFFSET)*32))))
#define GPWTM2_TW_GPTMTnILR_HIGH                (((TW_GPWTMILR_HIGH_TypeDef*)(GPWTM2_BASE + GPWTM_TW_GPTMTnILR_HIGH_OFFSET )))
#define GPWTM2_TW_GPTMTnILR_HIGH_R              (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TW_GPTMTnILR_HIGH_OFFSET)))

/* GPWTM3 GPWTMTAILR*/
#define GPWTM3_BITBANDING_GPTMTBILR             (((BITBANDING_GPTMTBILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBILR_OFFSET)*32))))
#define GPWTM3_GPTMTBILR                        (((GPTMTBILR_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMTBILR_OFFSET )))
#define GPWTM3_GPTMTBILR_R                      (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMTBILR_OFFSET)))

#define GPWTM3_BITBANDING_TB_GPTMTnILR          (((BITBANDING_TB_GPWTMILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnILR_OFFSET)*32))))
#define GPWTM3_TB_GPTMTnILR                     (((TB_GPWTMILR_TypeDef*)(GPWTM3_BASE + GPWTM_TB_GPTMTnILR_OFFSET )))
#define GPWTM3_TB_GPTMTnILR_R                   (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TB_GPTMTnILR_OFFSET)))

#define GPWTM3_BITBANDING_TW_GPTMTnILR_HIGH     (((BITBANDING_TW_GPWTMILR_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnILR_HIGH_OFFSET)*32))))
#define GPWTM3_TW_GPTMTnILR_HIGH                (((TW_GPWTMILR_HIGH_TypeDef*)(GPWTM3_BASE + GPWTM_TW_GPTMTnILR_HIGH_OFFSET )))
#define GPWTM3_TW_GPTMTnILR_HIGH_R              (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TW_GPTMTnILR_HIGH_OFFSET)))

/* GPWTM4 GPWTMTAILR*/
#define GPWTM4_BITBANDING_GPTMTBILR             (((BITBANDING_GPTMTBILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBILR_OFFSET)*32))))
#define GPWTM4_GPTMTBILR                        (((GPTMTBILR_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMTBILR_OFFSET )))
#define GPWTM4_GPTMTBILR_R                      (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMTBILR_OFFSET)))

#define GPWTM4_BITBANDING_TB_GPTMTnILR          (((BITBANDING_TB_GPWTMILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnILR_OFFSET)*32))))
#define GPWTM4_TB_GPTMTnILR                     (((TB_GPWTMILR_TypeDef*)(GPWTM4_BASE + GPWTM_TB_GPTMTnILR_OFFSET )))
#define GPWTM4_TB_GPTMTnILR_R                   (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TB_GPTMTnILR_OFFSET)))

#define GPWTM4_BITBANDING_TW_GPTMTnILR_HIGH     (((BITBANDING_TW_GPWTMILR_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnILR_HIGH_OFFSET)*32))))
#define GPWTM4_TW_GPTMTnILR_HIGH                (((TW_GPWTMILR_HIGH_TypeDef*)(GPWTM4_BASE + GPWTM_TW_GPTMTnILR_HIGH_OFFSET )))
#define GPWTM4_TW_GPTMTnILR_HIGH_R              (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TW_GPTMTnILR_HIGH_OFFSET)))

/* GPWTM5 GPWTMTAILR*/
#define GPWTM5_BITBANDING_GPTMTBILR             (((BITBANDING_GPTMTBILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBILR_OFFSET)*32))))
#define GPWTM5_GPTMTBILR                        (((GPTMTBILR_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMTBILR_OFFSET )))
#define GPWTM5_GPTMTBILR_R                      (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMTBILR_OFFSET)))

#define GPWTM5_BITBANDING_TB_GPTMTnILR          (((BITBANDING_TB_GPWTMILR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnILR_OFFSET)*32))))
#define GPWTM5_TB_GPTMTnILR                     (((TB_GPWTMILR_TypeDef*)(GPWTM5_BASE + GPWTM_TB_GPTMTnILR_OFFSET )))
#define GPWTM5_TB_GPTMTnILR_R                   (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TB_GPTMTnILR_OFFSET)))

#define GPWTM5_BITBANDING_TW_GPTMTnILR_HIGH     (((BITBANDING_TW_GPWTMILR_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnILR_HIGH_OFFSET)*32))))
#define GPWTM5_TW_GPTMTnILR_HIGH                (((TW_GPWTMILR_HIGH_TypeDef*)(GPWTM5_BASE + GPWTM_TW_GPTMTnILR_HIGH_OFFSET )))
#define GPWTM5_TW_GPTMTnILR_HIGH_R              (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TW_GPTMTnILR_HIGH_OFFSET)))

//--------
#define GPTM_GPTMTBILR_R_TAILR_MASK             (0xFFFFFFFF)
#define GPTM_GPTMTBILR_R_TAILR_BIT              (0)

#define GPTM_GPTMTBILR_TAILR_MASK               (0xFFFFFFFF)
//--------

//--------
#define GPTM_TB_GPTMTnILR_R_TnILR_MASK          (0x0000FFFF)
#define GPTM_TB_GPTMTnILR_R_TnILR_BIT           (0)

#define GPTM_TB_GPTMTnILR_TnILR_MASK            (0x0000FFFF)
//--------

//--------
#define GPWTM_GPTMTBILR_R_TAILR_MASK            (0xFFFFFFFF)
#define GPWTM_GPTMTBILR_R_TAILR_BIT             (0)

#define GPWTM_GPTMTBILR_TAILR_MASK              (0xFFFFFFFF)
//--------

//--------
#define GPWTM_TB_GPTMTnILR_R_TnILR_MASK         (0xFFFFFFFF)
#define GPWTM_TB_GPTMTnILR_R_TnILR_BIT          (0)

#define GPWTM_TB_GPTMTnILR_TnILR_MASK           (0xFFFFFFFF)
//--------

//--------
#define GPWTM_TW_GPTMTnILR_HIGH_R_TnILR_MASK    (0xFFFFFFFF)
#define GPWTM_TW_GPTMTnILR_HIGH_R_TnILR_BIT     (0)

#define GPWTM_TW_GPTMTnILR_HIGH_TnILR_MASK      (0xFFFFFFFF)
//--------


/******************************************************************************************
************************************ 12 GPTMTAMATCHR *********************************************
******************************************************************************************/

/* GPTM0 GPTMTAMATCHR*/
#define GPTM0_BITBANDING_GPTMTAMATCHR               (((BITBANDING_GPTMTAMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAMATCHR_OFFSET)*32))))
#define GPTM0_GPTMTAMATCHR                          (((GPTMTAMATCHR_TypeDef*)(GPTM0_BASE + GPTM_GPTMTAMATCHR_OFFSET )))
#define GPTM0_GPTMTAMATCHR_R                        (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMTAMATCHR_OFFSET)))

#define GPTM0_BITBANDING_TA_GPTMTnMATCHR            (((BITBANDING_TA_GPTMMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnMATCHR_OFFSET)*32))))
#define GPTM0_TA_GPTMTnMATCHR                       (((TA_GPTMMATCHR_TypeDef*)(GPTM0_BASE + GPTM_TA_GPTMTnMATCHR_OFFSET )))
#define GPTM0_TA_GPTMTnMATCHR_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TA_GPTMTnMATCHR_OFFSET)))

#define GPTM0_BITBANDING_TW_GPTMTnMATCHR            (((BITBANDING_TW_GPTMMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnMATCHR_OFFSET)*32))))
#define GPTM0_TW_GPTMTnMATCHR                       (((TW_GPTMMATCHR_TypeDef*)(GPTM0_BASE + GPTM_TW_GPTMTnMATCHR_OFFSET )))
#define GPTM0_TW_GPTMTnMATCHR_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TW_GPTMTnMATCHR_OFFSET)))

/* GPTM1 GPTMTAMATCHR*/
#define GPTM1_BITBANDING_GPTMTAMATCHR               (((BITBANDING_GPTMTAMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAMATCHR_OFFSET)*32))))
#define GPTM1_GPTMTAMATCHR                          (((GPTMTAMATCHR_TypeDef*)(GPTM1_BASE + GPTM_GPTMTAMATCHR_OFFSET )))
#define GPTM1_GPTMTAMATCHR_R                        (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMTAMATCHR_OFFSET)))

#define GPTM1_BITBANDING_TA_GPTMTnMATCHR            (((BITBANDING_TA_GPTMMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnMATCHR_OFFSET)*32))))
#define GPTM1_TA_GPTMTnMATCHR                       (((TA_GPTMMATCHR_TypeDef*)(GPTM1_BASE + GPTM_TA_GPTMTnMATCHR_OFFSET )))
#define GPTM1_TA_GPTMTnMATCHR_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TA_GPTMTnMATCHR_OFFSET)))

#define GPTM1_BITBANDING_TW_GPTMTnMATCHR            (((BITBANDING_TW_GPTMMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnMATCHR_OFFSET)*32))))
#define GPTM1_TW_GPTMTnMATCHR                       (((TW_GPTMMATCHR_TypeDef*)(GPTM1_BASE + GPTM_TW_GPTMTnMATCHR_OFFSET )))
#define GPTM1_TW_GPTMTnMATCHR_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TW_GPTMTnMATCHR_OFFSET)))

/* GPTM2 GPTMTAMATCHR*/
#define GPTM2_BITBANDING_GPTMTAMATCHR               (((BITBANDING_GPTMTAMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAMATCHR_OFFSET)*32))))
#define GPTM2_GPTMTAMATCHR                          (((GPTMTAMATCHR_TypeDef*)(GPTM2_BASE + GPTM_GPTMTAMATCHR_OFFSET )))
#define GPTM2_GPTMTAMATCHR_R                        (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMTAMATCHR_OFFSET)))

#define GPTM2_BITBANDING_TA_GPTMTnMATCHR            (((BITBANDING_TA_GPTMMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnMATCHR_OFFSET)*32))))
#define GPTM2_TA_GPTMTnMATCHR                       (((TA_GPTMMATCHR_TypeDef*)(GPTM2_BASE + GPTM_TA_GPTMTnMATCHR_OFFSET )))
#define GPTM2_TA_GPTMTnMATCHR_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TA_GPTMTnMATCHR_OFFSET)))

#define GPTM2_BITBANDING_TW_GPTMTnMATCHR            (((BITBANDING_TW_GPTMMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnMATCHR_OFFSET)*32))))
#define GPTM2_TW_GPTMTnMATCHR                       (((TW_GPTMMATCHR_TypeDef*)(GPTM2_BASE + GPTM_TW_GPTMTnMATCHR_OFFSET )))
#define GPTM2_TW_GPTMTnMATCHR_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TW_GPTMTnMATCHR_OFFSET)))

/* GPTM3 GPTMTAMATCHR*/
#define GPTM3_BITBANDING_GPTMTAMATCHR               (((BITBANDING_GPTMTAMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAMATCHR_OFFSET)*32))))
#define GPTM3_GPTMTAMATCHR                          (((GPTMTAMATCHR_TypeDef*)(GPTM3_BASE + GPTM_GPTMTAMATCHR_OFFSET )))
#define GPTM3_GPTMTAMATCHR_R                        (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMTAMATCHR_OFFSET)))

#define GPTM3_BITBANDING_TA_GPTMTnMATCHR            (((BITBANDING_TA_GPTMMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnMATCHR_OFFSET)*32))))
#define GPTM3_TA_GPTMTnMATCHR                       (((TA_GPTMMATCHR_TypeDef*)(GPTM3_BASE + GPTM_TA_GPTMTnMATCHR_OFFSET )))
#define GPTM3_TA_GPTMTnMATCHR_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TA_GPTMTnMATCHR_OFFSET)))

#define GPTM3_BITBANDING_TW_GPTMTnMATCHR            (((BITBANDING_TW_GPTMMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnMATCHR_OFFSET)*32))))
#define GPTM3_TW_GPTMTnMATCHR                       (((TW_GPTMMATCHR_TypeDef*)(GPTM3_BASE + GPTM_TW_GPTMTnMATCHR_OFFSET )))
#define GPTM3_TW_GPTMTnMATCHR_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TW_GPTMTnMATCHR_OFFSET)))

/* GPTM4 GPTMTAMATCHR*/
#define GPTM4_BITBANDING_GPTMTAMATCHR               (((BITBANDING_GPTMTAMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAMATCHR_OFFSET)*32))))
#define GPTM4_GPTMTAMATCHR                          (((GPTMTAMATCHR_TypeDef*)(GPTM4_BASE + GPTM_GPTMTAMATCHR_OFFSET )))
#define GPTM4_GPTMTAMATCHR_R                        (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMTAMATCHR_OFFSET)))

#define GPTM4_BITBANDING_TA_GPTMTnMATCHR            (((BITBANDING_TA_GPTMMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnMATCHR_OFFSET)*32))))
#define GPTM4_TA_GPTMTnMATCHR                       (((TA_GPTMMATCHR_TypeDef*)(GPTM4_BASE + GPTM_TA_GPTMTnMATCHR_OFFSET )))
#define GPTM4_TA_GPTMTnMATCHR_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TA_GPTMTnMATCHR_OFFSET)))

#define GPTM4_BITBANDING_TW_GPTMTnMATCHR            (((BITBANDING_TW_GPTMMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnMATCHR_OFFSET)*32))))
#define GPTM4_TW_GPTMTnMATCHR                       (((TW_GPTMMATCHR_TypeDef*)(GPTM4_BASE + GPTM_TW_GPTMTnMATCHR_OFFSET )))
#define GPTM4_TW_GPTMTnMATCHR_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TW_GPTMTnMATCHR_OFFSET)))

/* GPTM5 GPTMTAMATCHR*/
#define GPTM5_BITBANDING_GPTMTAMATCHR               (((BITBANDING_GPTMTAMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAMATCHR_OFFSET)*32))))
#define GPTM5_GPTMTAMATCHR                          (((GPTMTAMATCHR_TypeDef*)(GPTM5_BASE + GPTM_GPTMTAMATCHR_OFFSET )))
#define GPTM5_GPTMTAMATCHR_R                        (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMTAMATCHR_OFFSET)))

#define GPTM5_BITBANDING_TA_GPTMTnMATCHR            (((BITBANDING_TA_GPTMMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnMATCHR_OFFSET)*32))))
#define GPTM5_TA_GPTMTnMATCHR                       (((TA_GPTMMATCHR_TypeDef*)(GPTM5_BASE + GPTM_TA_GPTMTnMATCHR_OFFSET )))
#define GPTM5_TA_GPTMTnMATCHR_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TA_GPTMTnMATCHR_OFFSET)))

#define GPTM5_BITBANDING_TW_GPTMTnMATCHR            (((BITBANDING_TW_GPTMMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnMATCHR_OFFSET)*32))))
#define GPTM5_TW_GPTMTnMATCHR                       (((TW_GPTMMATCHR_TypeDef*)(GPTM5_BASE + GPTM_TW_GPTMTnMATCHR_OFFSET )))
#define GPTM5_TW_GPTMTnMATCHR_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TW_GPTMTnMATCHR_OFFSET)))

/* GPWTM0 GPTMTAMATCHR*/
#define GPWTM0_BITBANDING_GPTMTAMATCHR              (((BITBANDING_GPTMTAMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAMATCHR_OFFSET)*32))))
#define GPWTM0_GPTMTAMATCHR                         (((GPTMTAMATCHR_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMTAMATCHR_OFFSET )))
#define GPWTM0_GPTMTAMATCHR_R                       (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMTAMATCHR_OFFSET)))

#define GPWTM0_BITBANDING_TA_GPTMTnMATCHR           (((BITBANDING_TA_GPWTMMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnMATCHR_OFFSET)*32))))
#define GPWTM0_TA_GPTMTnMATCHR                      (((TA_GPWTMMATCHR_TypeDef*)(GPWTM0_BASE + GPWTM_TA_GPTMTnMATCHR_OFFSET )))
#define GPWTM0_TA_GPTMTnMATCHR_R                    (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TA_GPTMTnMATCHR_OFFSET)))

#define GPWTM0_BITBANDING_TW_GPTMTnMATCHR_LOW       (((BITBANDING_TW_GPWTMMATCHR_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET)*32))))
#define GPWTM0_TW_GPTMTnMATCHR_LOW                  (((TW_GPWTMMATCHR_LOW_TypeDef*)(GPWTM0_BASE + GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET )))
#define GPWTM0_TW_GPTMTnMATCHR_LOW_R                (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET)))

/* GPWTM1 GPTMTAMATCHR*/
#define GPWTM1_BITBANDING_GPTMTAMATCHR              (((BITBANDING_GPTMTAMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAMATCHR_OFFSET)*32))))
#define GPWTM1_GPTMTAMATCHR                         (((GPTMTAMATCHR_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMTAMATCHR_OFFSET )))
#define GPWTM1_GPTMTAMATCHR_R                       (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMTAMATCHR_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnMATCHR           (((BITBANDING_TA_GPWTMMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnMATCHR_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnMATCHR                      (((TA_GPWTMMATCHR_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnMATCHR_OFFSET )))
#define GPWTM1_TA_GPTMTnMATCHR_R                    (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnMATCHR_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnMATCHR_LOW       (((BITBANDING_TW_GPWTMMATCHR_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnMATCHR_LOW                  (((TW_GPWTMMATCHR_LOW_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET )))
#define GPWTM1_TW_GPTMTnMATCHR_LOW_R                (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET)))

/* GPWTM2 GPTMTAMATCHR*/
#define GPWTM2_BITBANDING_GPTMTAMATCHR              (((BITBANDING_GPTMTAMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAMATCHR_OFFSET)*32))))
#define GPWTM2_GPTMTAMATCHR                         (((GPTMTAMATCHR_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMTAMATCHR_OFFSET )))
#define GPWTM2_GPTMTAMATCHR_R                       (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMTAMATCHR_OFFSET)))

#define GPWTM2_BITBANDING_TA_GPTMTnMATCHR           (((BITBANDING_TA_GPWTMMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnMATCHR_OFFSET)*32))))
#define GPWTM2_TA_GPTMTnMATCHR                      (((TA_GPWTMMATCHR_TypeDef*)(GPWTM2_BASE + GPWTM_TA_GPTMTnMATCHR_OFFSET )))
#define GPWTM2_TA_GPTMTnMATCHR_R                    (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TA_GPTMTnMATCHR_OFFSET)))

#define GPWTM2_BITBANDING_TW_GPTMTnMATCHR_LOW       (((BITBANDING_TW_GPWTMMATCHR_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET)*32))))
#define GPWTM2_TW_GPTMTnMATCHR_LOW                  (((TW_GPWTMMATCHR_LOW_TypeDef*)(GPWTM2_BASE + GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET )))
#define GPWTM2_TW_GPTMTnMATCHR_LOW_R                (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET)))

/* GPWTM3 GPTMTAMATCHR*/
#define GPWTM3_BITBANDING_GPTMTAMATCHR              (((BITBANDING_GPTMTAMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAMATCHR_OFFSET)*32))))
#define GPWTM3_GPTMTAMATCHR                         (((GPTMTAMATCHR_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMTAMATCHR_OFFSET )))
#define GPWTM3_GPTMTAMATCHR_R                       (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMTAMATCHR_OFFSET)))

#define GPWTM3_BITBANDING_TA_GPTMTnMATCHR           (((BITBANDING_TA_GPWTMMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnMATCHR_OFFSET)*32))))
#define GPWTM3_TA_GPTMTnMATCHR                      (((TA_GPWTMMATCHR_TypeDef*)(GPWTM3_BASE + GPWTM_TA_GPTMTnMATCHR_OFFSET )))
#define GPWTM3_TA_GPTMTnMATCHR_R                    (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TA_GPTMTnMATCHR_OFFSET)))

#define GPWTM3_BITBANDING_TW_GPTMTnMATCHR_LOW       (((BITBANDING_TW_GPWTMMATCHR_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET)*32))))
#define GPWTM3_TW_GPTMTnMATCHR_LOW                  (((TW_GPWTMMATCHR_LOW_TypeDef*)(GPWTM3_BASE + GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET )))
#define GPWTM3_TW_GPTMTnMATCHR_LOW_R                (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET)))

/* GPWTM4 GPTMTAMATCHR*/
#define GPWTM4_BITBANDING_GPTMTAMATCHR              (((BITBANDING_GPTMTAMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAMATCHR_OFFSET)*32))))
#define GPWTM4_GPTMTAMATCHR                         (((GPTMTAMATCHR_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMTAMATCHR_OFFSET )))
#define GPWTM4_GPTMTAMATCHR_R                       (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMTAMATCHR_OFFSET)))

#define GPWTM4_BITBANDING_TA_GPTMTnMATCHR           (((BITBANDING_TA_GPWTMMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnMATCHR_OFFSET)*32))))
#define GPWTM4_TA_GPTMTnMATCHR                      (((TA_GPWTMMATCHR_TypeDef*)(GPWTM4_BASE + GPWTM_TA_GPTMTnMATCHR_OFFSET )))
#define GPWTM4_TA_GPTMTnMATCHR_R                    (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TA_GPTMTnMATCHR_OFFSET)))

#define GPWTM4_BITBANDING_TW_GPTMTnMATCHR_LOW       (((BITBANDING_TW_GPWTMMATCHR_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET)*32))))
#define GPWTM4_TW_GPTMTnMATCHR_LOW                  (((TW_GPWTMMATCHR_LOW_TypeDef*)(GPWTM4_BASE + GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET )))
#define GPWTM4_TW_GPTMTnMATCHR_LOW_R                (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET)))

/* GPWTM5 GPTMTAMATCHR*/
#define GPWTM5_BITBANDING_GPTMTAMATCHR              (((BITBANDING_GPTMTAMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAMATCHR_OFFSET)*32))))
#define GPWTM5_GPTMTAMATCHR                         (((GPTMTAMATCHR_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMTAMATCHR_OFFSET )))
#define GPWTM5_GPTMTAMATCHR_R                       (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMTAMATCHR_OFFSET)))

#define GPWTM5_BITBANDING_TA_GPTMTnMATCHR           (((BITBANDING_TA_GPWTMMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnMATCHR_OFFSET)*32))))
#define GPWTM5_TA_GPTMTnMATCHR                      (((TA_GPWTMMATCHR_TypeDef*)(GPWTM5_BASE + GPWTM_TA_GPTMTnMATCHR_OFFSET )))
#define GPWTM5_TA_GPTMTnMATCHR_R                    (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TA_GPTMTnMATCHR_OFFSET)))

#define GPWTM5_BITBANDING_TW_GPTMTnMATCHR_LOW       (((BITBANDING_TW_GPWTMMATCHR_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET)*32))))
#define GPWTM5_TW_GPTMTnMATCHR_LOW                  (((TW_GPWTMMATCHR_LOW_TypeDef*)(GPWTM5_BASE + GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET )))
#define GPWTM5_TW_GPTMTnMATCHR_LOW_R                (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TW_GPTMTnMATCHR_LOW_OFFSET)))

//--------
#define GPTM_GPTMTAMATCHR_R_TAMR_MASK               (0xFFFFFFFF)
#define GPTM_GPTMTAMATCHR_R_TAMR_BIT                (0)

#define GPTM_GPTMTAMATCHR_TAMR_MASK                 (0xFFFFFFFF)
//--------

//--------
#define GPTM_TA_GPTMTnMATCHR_R_TnMR_MASK            (0x0000FFFF)
#define GPTM_TA_GPTMTnMATCHR_R_TnMR_BIT             (0)

#define GPTM_TA_GPTMTnMATCHR_TnMR_MASK              (0x0000FFFF)
//--------

//--------
#define GPTM_TW_GPTMTnMATCHR_R_TnMR_MASK            (0xFFFFFFFF)
#define GPTM_TW_GPTMTnMATCHR_R_TnMR_BIT             (0)

#define GPTM_TW_GPTMTnMATCHR_TnMR_MASK              (0xFFFFFFFF)
//--------

//--------
#define GPWTM_GPTMTAMATCHR_R_TAMR_MASK              (0xFFFFFFFF)
#define GPWTM_GPTMTAMATCHR_R_TAMR_BIT               (0)

#define GPWTM_GPTMTAMATCHR_TAMR_MASK                (0xFFFFFFFF)
//--------

//--------
#define GPWTM_TA_GPTMTnMATCHR_R_TnMR_MASK           (0xFFFFFFFF)
#define GPWTM_TA_GPTMTnMATCHR_R_TnMR_BIT            (0)

#define GPWTM_TA_GPTMTnMATCHR_TnMR_MASK             (0xFFFFFFFF)
//--------

//--------
#define GPWTM_TW_GPTMTnMATCHR_LOW_R_TnMR_MASK       (0xFFFFFFFF)
#define GPWTM_TW_GPTMTnMATCHR_LOW_R_TnMR_BIT        (0)

#define GPWTM_TW_GPTMTnMATCHR_LOW_TnMR_MASK         (0xFFFFFFFF)
//--------

/******************************************************************************************
************************************ 13 GPTMTBMATCHR *********************************************
******************************************************************************************/

/* GPTM0 GPTMTBMATCHR*/
#define GPTM0_BITBANDING_GPTMTBMATCHR               (((BITBANDING_GPTMTBMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBMATCHR_OFFSET)*32))))
#define GPTM0_GPTMTBMATCHR                          (((GPTMTBMATCHR_TypeDef*)(GPTM0_BASE + GPTM_GPTMTBMATCHR_OFFSET )))
#define GPTM0_GPTMTBMATCHR_R                        (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMTBMATCHR_OFFSET)))

#define GPTM0_BITBANDING_TB_GPTMTnMATCHR            (((BITBANDING_TB_GPTMMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnMATCHR_OFFSET)*32))))
#define GPTM0_TB_GPTMTnMATCHR                       (((TB_GPTMMATCHR_TypeDef*)(GPTM0_BASE + GPTM_TB_GPTMTnMATCHR_OFFSET )))
#define GPTM0_TB_GPTMTnMATCHR_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TB_GPTMTnMATCHR_OFFSET)))

/* GPTM1 GPTMTBMATCHR*/
#define GPTM1_BITBANDING_GPTMTBMATCHR               (((BITBANDING_GPTMTBMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBMATCHR_OFFSET)*32))))
#define GPTM1_GPTMTBMATCHR                          (((GPTMTBMATCHR_TypeDef*)(GPTM1_BASE + GPTM_GPTMTBMATCHR_OFFSET )))
#define GPTM1_GPTMTBMATCHR_R                        (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMTBMATCHR_OFFSET)))

#define GPTM1_BITBANDING_TB_GPTMTnMATCHR            (((BITBANDING_TB_GPTMMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnMATCHR_OFFSET)*32))))
#define GPTM1_TB_GPTMTnMATCHR                       (((TB_GPTMMATCHR_TypeDef*)(GPTM1_BASE + GPTM_TB_GPTMTnMATCHR_OFFSET )))
#define GPTM1_TB_GPTMTnMATCHR_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TB_GPTMTnMATCHR_OFFSET)))

/* GPTM2 GPTMTBMATCHR*/
#define GPTM2_BITBANDING_GPTMTBMATCHR               (((BITBANDING_GPTMTBMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBMATCHR_OFFSET)*32))))
#define GPTM2_GPTMTBMATCHR                          (((GPTMTBMATCHR_TypeDef*)(GPTM2_BASE + GPTM_GPTMTBMATCHR_OFFSET )))
#define GPTM2_GPTMTBMATCHR_R                        (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMTBMATCHR_OFFSET)))

#define GPTM2_BITBANDING_TB_GPTMTnMATCHR            (((BITBANDING_TB_GPTMMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnMATCHR_OFFSET)*32))))
#define GPTM2_TB_GPTMTnMATCHR                       (((TB_GPTMMATCHR_TypeDef*)(GPTM2_BASE + GPTM_TB_GPTMTnMATCHR_OFFSET )))
#define GPTM2_TB_GPTMTnMATCHR_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TB_GPTMTnMATCHR_OFFSET)))

/* GPTM3 GPTMTBMATCHR*/
#define GPTM3_BITBANDING_GPTMTBMATCHR               (((BITBANDING_GPTMTBMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBMATCHR_OFFSET)*32))))
#define GPTM3_GPTMTBMATCHR                          (((GPTMTBMATCHR_TypeDef*)(GPTM3_BASE + GPTM_GPTMTBMATCHR_OFFSET )))
#define GPTM3_GPTMTBMATCHR_R                        (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMTBMATCHR_OFFSET)))

#define GPTM3_BITBANDING_TB_GPTMTnMATCHR            (((BITBANDING_TB_GPTMMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnMATCHR_OFFSET)*32))))
#define GPTM3_TB_GPTMTnMATCHR                       (((TB_GPTMMATCHR_TypeDef*)(GPTM3_BASE + GPTM_TB_GPTMTnMATCHR_OFFSET )))
#define GPTM3_TB_GPTMTnMATCHR_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TB_GPTMTnMATCHR_OFFSET)))

/* GPTM4 GPTMTBMATCHR*/
#define GPTM4_BITBANDING_GPTMTBMATCHR               (((BITBANDING_GPTMTBMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBMATCHR_OFFSET)*32))))
#define GPTM4_GPTMTBMATCHR                          (((GPTMTBMATCHR_TypeDef*)(GPTM4_BASE + GPTM_GPTMTBMATCHR_OFFSET )))
#define GPTM4_GPTMTBMATCHR_R                        (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMTBMATCHR_OFFSET)))

#define GPTM4_BITBANDING_TB_GPTMTnMATCHR            (((BITBANDING_TB_GPTMMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnMATCHR_OFFSET)*32))))
#define GPTM4_TB_GPTMTnMATCHR                       (((TB_GPTMMATCHR_TypeDef*)(GPTM4_BASE + GPTM_TB_GPTMTnMATCHR_OFFSET )))
#define GPTM4_TB_GPTMTnMATCHR_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TB_GPTMTnMATCHR_OFFSET)))

/* GPTM5 GPTMTBMATCHR*/
#define GPTM5_BITBANDING_GPTMTBMATCHR               (((BITBANDING_GPTMTBMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBMATCHR_OFFSET)*32))))
#define GPTM5_GPTMTBMATCHR                          (((GPTMTBMATCHR_TypeDef*)(GPTM5_BASE + GPTM_GPTMTBMATCHR_OFFSET )))
#define GPTM5_GPTMTBMATCHR_R                        (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMTBMATCHR_OFFSET)))

#define GPTM5_BITBANDING_TB_GPTMTnMATCHR            (((BITBANDING_TB_GPTMMATCHR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnMATCHR_OFFSET)*32))))
#define GPTM5_TB_GPTMTnMATCHR                       (((TB_GPTMMATCHR_TypeDef*)(GPTM5_BASE + GPTM_TB_GPTMTnMATCHR_OFFSET )))
#define GPTM5_TB_GPTMTnMATCHR_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TB_GPTMTnMATCHR_OFFSET)))

/* GPWTM0 GPWTMTBMR*/
#define GPWTM0_BITBANDING_GPTMTBMATCHR              (((BITBANDING_GPTMTBMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBMATCHR_OFFSET)*32))))
#define GPWTM0_GPTMTBMATCHR                         (((GPTMTBMATCHR_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMTBMATCHR_OFFSET )))
#define GPWTM0_GPTMTBMATCHR_R                       (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMTBMATCHR_OFFSET)))

#define GPWTM0_BITBANDING_TB_GPTMTnMATCHR           (((BITBANDING_TB_GPWTMMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnMATCHR_OFFSET)*32))))
#define GPWTM0_TB_GPTMTnMATCHR                      (((TB_GPWTMMATCHR_TypeDef*)(GPWTM0_BASE + GPWTM_TB_GPTMTnMATCHR_OFFSET )))
#define GPWTM0_TB_GPTMTnMATCHR_R                    (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TB_GPTMTnMATCHR_OFFSET)))

#define GPWTM0_BITBANDING_TW_GPTMTnMATCHR_HIGH      (((BITBANDING_TW_GPWTMMATCHR_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET)*32))))
#define GPWTM0_TW_GPTMTnMATCHR_HIGH                 (((TW_GPWTMMATCHR_HIGH_TypeDef*)(GPWTM0_BASE + GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET )))
#define GPWTM0_TW_GPTMTnMATCHR_HIGH_R               (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET)))

/* GPWTM1 GPWTMTBMR*/
#define GPWTM1_BITBANDING_GPTMTBMATCHR              (((BITBANDING_GPTMTBMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBMATCHR_OFFSET)*32))))
#define GPWTM1_GPTMTBMATCHR                         (((GPTMTBMATCHR_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMTBMATCHR_OFFSET )))
#define GPWTM1_GPTMTBMATCHR_R                       (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMTBMATCHR_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnMATCHR           (((BITBANDING_TB_GPWTMMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnMATCHR_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnMATCHR                      (((TB_GPWTMMATCHR_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnMATCHR_OFFSET )))
#define GPWTM1_TB_GPTMTnMATCHR_R                    (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnMATCHR_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnMATCHR_HIGH      (((BITBANDING_TW_GPWTMMATCHR_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnMATCHR_HIGH                 (((TW_GPWTMMATCHR_HIGH_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET )))
#define GPWTM1_TW_GPTMTnMATCHR_HIGH_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET)))

/* GPWTM2 GPWTMTBMR*/
#define GPWTM2_BITBANDING_GPTMTBMATCHR              (((BITBANDING_GPTMTBMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBMATCHR_OFFSET)*32))))
#define GPWTM2_GPTMTBMATCHR                         (((GPTMTBMATCHR_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMTBMATCHR_OFFSET )))
#define GPWTM2_GPTMTBMATCHR_R                       (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMTBMATCHR_OFFSET)))

#define GPWTM2_BITBANDING_TB_GPTMTnMATCHR           (((BITBANDING_TB_GPWTMMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnMATCHR_OFFSET)*32))))
#define GPWTM2_TB_GPTMTnMATCHR                      (((TB_GPWTMMATCHR_TypeDef*)(GPWTM2_BASE + GPWTM_TB_GPTMTnMATCHR_OFFSET )))
#define GPWTM2_TB_GPTMTnMATCHR_R                    (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TB_GPTMTnMATCHR_OFFSET)))

#define GPWTM2_BITBANDING_TW_GPTMTnMATCHR_HIGH      (((BITBANDING_TW_GPWTMMATCHR_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET)*32))))
#define GPWTM2_TW_GPTMTnMATCHR_HIGH                 (((TW_GPWTMMATCHR_HIGH_TypeDef*)(GPWTM2_BASE + GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET )))
#define GPWTM2_TW_GPTMTnMATCHR_HIGH_R               (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET)))

/* GPWTM3 GPWTMTBMR*/
#define GPWTM3_BITBANDING_GPTMTBMATCHR              (((BITBANDING_GPTMTBMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBMATCHR_OFFSET)*32))))
#define GPWTM3_GPTMTBMATCHR                         (((GPTMTBMATCHR_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMTBMATCHR_OFFSET )))
#define GPWTM3_GPTMTBMATCHR_R                       (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMTBMATCHR_OFFSET)))

#define GPWTM3_BITBANDING_TB_GPTMTnMATCHR           (((BITBANDING_TB_GPWTMMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnMATCHR_OFFSET)*32))))
#define GPWTM3_TB_GPTMTnMATCHR                      (((TB_GPWTMMATCHR_TypeDef*)(GPWTM3_BASE + GPWTM_TB_GPTMTnMATCHR_OFFSET )))
#define GPWTM3_TB_GPTMTnMATCHR_R                    (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TB_GPTMTnMATCHR_OFFSET)))

#define GPWTM3_BITBANDING_TW_GPTMTnMATCHR_HIGH      (((BITBANDING_TW_GPWTMMATCHR_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET)*32))))
#define GPWTM3_TW_GPTMTnMATCHR_HIGH                 (((TW_GPWTMMATCHR_HIGH_TypeDef*)(GPWTM3_BASE + GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET )))
#define GPWTM3_TW_GPTMTnMATCHR_HIGH_R               (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET)))

/* GPWTM4 GPWTMTBMR*/
#define GPWTM4_BITBANDING_GPTMTBMATCHR              (((BITBANDING_GPTMTBMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBMATCHR_OFFSET)*32))))
#define GPWTM4_GPTMTBMATCHR                         (((GPTMTBMATCHR_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMTBMATCHR_OFFSET )))
#define GPWTM4_GPTMTBMATCHR_R                       (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMTBMATCHR_OFFSET)))

#define GPWTM4_BITBANDING_TB_GPTMTnMATCHR           (((BITBANDING_TB_GPWTMMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnMATCHR_OFFSET)*32))))
#define GPWTM4_TB_GPTMTnMATCHR                      (((TB_GPWTMMATCHR_TypeDef*)(GPWTM4_BASE + GPWTM_TB_GPTMTnMATCHR_OFFSET )))
#define GPWTM4_TB_GPTMTnMATCHR_R                    (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TB_GPTMTnMATCHR_OFFSET)))

#define GPWTM4_BITBANDING_TW_GPTMTnMATCHR_HIGH      (((BITBANDING_TW_GPWTMMATCHR_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET)*32))))
#define GPWTM4_TW_GPTMTnMATCHR_HIGH                 (((TW_GPWTMMATCHR_HIGH_TypeDef*)(GPWTM4_BASE + GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET )))
#define GPWTM4_TW_GPTMTnMATCHR_HIGH_R               (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET)))

/* GPWTM5 GPWTMTBMR*/
#define GPWTM5_BITBANDING_GPTMTBMATCHR              (((BITBANDING_GPTMTBMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBMATCHR_OFFSET)*32))))
#define GPWTM5_GPTMTBMATCHR                         (((GPTMTBMATCHR_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMTBMATCHR_OFFSET )))
#define GPWTM5_GPTMTBMATCHR_R                       (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMTBMATCHR_OFFSET)))

#define GPWTM5_BITBANDING_TB_GPTMTnMATCHR           (((BITBANDING_TB_GPWTMMATCHR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnMATCHR_OFFSET)*32))))
#define GPWTM5_TB_GPTMTnMATCHR                      (((TB_GPWTMMATCHR_TypeDef*)(GPWTM5_BASE + GPWTM_TB_GPTMTnMATCHR_OFFSET )))
#define GPWTM5_TB_GPTMTnMATCHR_R                    (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TB_GPTMTnMATCHR_OFFSET)))

#define GPWTM5_BITBANDING_TW_GPTMTnMATCHR_HIGH      (((BITBANDING_TW_GPWTMMATCHR_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET)*32))))
#define GPWTM5_TW_GPTMTnMATCHR_HIGH                 (((TW_GPWTMMATCHR_HIGH_TypeDef*)(GPWTM5_BASE + GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET )))
#define GPWTM5_TW_GPTMTnMATCHR_HIGH_R               (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TW_GPTMTnMATCHR_HIGH_OFFSET)))

//--------
#define GPTM_GPTMTBMATCHR_R_TBMR_MASK               (0xFFFFFFFF)
#define GPTM_GPTMTBMATCHR_R_TBMR_BIT                (0)

#define GPTM_GPTMTBMATCHR_TBMR_MASK                 (0xFFFFFFFF)
//--------

//--------
#define GPTM_TB_GPTMTnMATCHR_R_TnMR_MASK            (0x0000FFFF)
#define GPTM_TB_GPTMTnMATCHR_R_TnMR_BIT             (0)

#define GPTM_TB_GPTMTnMATCHR_TnMR_MASK              (0x0000FFFF)
//--------


//--------
#define GPWTM_GPTMTBMATCHR_R_TBMR_MASK              (0xFFFFFFFF)
#define GPWTM_GPTMTBMATCHR_R_TBMR_BIT               (0)

#define GPWTM_GPTMTBMATCHR_TBMR_MASK                (0xFFFFFFFF)
//--------

//--------
#define GPWTM_TB_GPTMTnMATCHR_R_TnMR_MASK           (0xFFFFFFFF)
#define GPWTM_TB_GPTMTnMATCHR_R_TnMR_BIT            (0)

#define GPWTM_TB_GPTMTnMATCHR_TnMR_MASK             (0xFFFFFFFF)
//--------

//--------
#define GPWTM_TW_GPTMTnMATCHR_HIGH_R_TnMR_MASK      (0xFFFFFFFF)
#define GPWTM_TW_GPTMTnMATCHR_HIGH_R_TnMR_BIT       (0)

#define GPWTM_TW_GPTMTnMATCHR_HIGH_TnMR_MASK        (0xFFFFFFFF)
//--------

/******************************************************************************************
************************************ 14 GPTMTAPR *********************************************
******************************************************************************************/

/* GPTM0 GPTMTAPR*/
#define GPTM0_BITBANDING_GPTMTAPR               (((BITBANDING_GPTMTAPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAPR_OFFSET)*32))))
#define GPTM0_GPTMTAPR                          (((GPTMTAPR_TypeDef*)(GPTM0_BASE + GPTM_GPTMTAPR_OFFSET )))
#define GPTM0_GPTMTAPR_R                        (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMTAPR_OFFSET)))

#define GPTM0_BITBANDING_TA_GPTMTnPR            (((BITBANDING_TA_GPTMPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnPR_OFFSET)*32))))
#define GPTM0_TA_GPTMTnPR                       (((TA_GPTMPR_TypeDef*)(GPTM0_BASE + GPTM_TA_GPTMTnPR_OFFSET )))
#define GPTM0_TA_GPTMTnPR_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TA_GPTMTnPR_OFFSET)))

/* GPTM1 GPTMTAPR*/
#define GPTM1_BITBANDING_GPTMTAPR               (((BITBANDING_GPTMTAPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAPR_OFFSET)*32))))
#define GPTM1_GPTMTAPR                          (((GPTMTAPR_TypeDef*)(GPTM1_BASE + GPTM_GPTMTAPR_OFFSET )))
#define GPTM1_GPTMTAPR_R                        (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMTAPR_OFFSET)))

#define GPTM1_BITBANDING_TA_GPTMTnPR            (((BITBANDING_TA_GPTMPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnPR_OFFSET)*32))))
#define GPTM1_TA_GPTMTnPR                       (((TA_GPTMPR_TypeDef*)(GPTM1_BASE + GPTM_TA_GPTMTnPR_OFFSET )))
#define GPTM1_TA_GPTMTnPR_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TA_GPTMTnPR_OFFSET)))

/* GPTM2 GPTMTAPR*/
#define GPTM2_BITBANDING_GPTMTAPR               (((BITBANDING_GPTMTAPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAPR_OFFSET)*32))))
#define GPTM2_GPTMTAPR                          (((GPTMTAPR_TypeDef*)(GPTM2_BASE + GPTM_GPTMTAPR_OFFSET )))
#define GPTM2_GPTMTAPR_R                        (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMTAPR_OFFSET)))

#define GPTM2_BITBANDING_TA_GPTMTnPR            (((BITBANDING_TA_GPTMPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnPR_OFFSET)*32))))
#define GPTM2_TA_GPTMTnPR                       (((TA_GPTMPR_TypeDef*)(GPTM2_BASE + GPTM_TA_GPTMTnPR_OFFSET )))
#define GPTM2_TA_GPTMTnPR_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TA_GPTMTnPR_OFFSET)))

/* GPTM3 GPTMTAPR*/
#define GPTM3_BITBANDING_GPTMTAPR               (((BITBANDING_GPTMTAPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAPR_OFFSET)*32))))
#define GPTM3_GPTMTAPR                          (((GPTMTAPR_TypeDef*)(GPTM3_BASE + GPTM_GPTMTAPR_OFFSET )))
#define GPTM3_GPTMTAPR_R                        (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMTAPR_OFFSET)))

#define GPTM3_BITBANDING_TA_GPTMTnPR            (((BITBANDING_TA_GPTMPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnPR_OFFSET)*32))))
#define GPTM3_TA_GPTMTnPR                       (((TA_GPTMPR_TypeDef*)(GPTM3_BASE + GPTM_TA_GPTMTnPR_OFFSET )))
#define GPTM3_TA_GPTMTnPR_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TA_GPTMTnPR_OFFSET)))

/* GPTM4 GPTMTAPR*/
#define GPTM4_BITBANDING_GPTMTAPR               (((BITBANDING_GPTMTAPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAPR_OFFSET)*32))))
#define GPTM4_GPTMTAPR                          (((GPTMTAPR_TypeDef*)(GPTM4_BASE + GPTM_GPTMTAPR_OFFSET )))
#define GPTM4_GPTMTAPR_R                        (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMTAPR_OFFSET)))

#define GPTM4_BITBANDING_TA_GPTMTnPR            (((BITBANDING_TA_GPTMPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnPR_OFFSET)*32))))
#define GPTM4_TA_GPTMTnPR                       (((TA_GPTMPR_TypeDef*)(GPTM4_BASE + GPTM_TA_GPTMTnPR_OFFSET )))
#define GPTM4_TA_GPTMTnPR_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TA_GPTMTnPR_OFFSET)))

/* GPTM5 GPTMTAPR*/
#define GPTM5_BITBANDING_GPTMTAPR               (((BITBANDING_GPTMTAPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAPR_OFFSET)*32))))
#define GPTM5_GPTMTAPR                          (((GPTMTAPR_TypeDef*)(GPTM5_BASE + GPTM_GPTMTAPR_OFFSET )))
#define GPTM5_GPTMTAPR_R                        (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMTAPR_OFFSET)))

#define GPTM5_BITBANDING_TA_GPTMTnPR            (((BITBANDING_TA_GPTMPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnPR_OFFSET)*32))))
#define GPTM5_TA_GPTMTnPR                       (((TA_GPTMPR_TypeDef*)(GPTM5_BASE + GPTM_TA_GPTMTnPR_OFFSET )))
#define GPTM5_TA_GPTMTnPR_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TA_GPTMTnPR_OFFSET)))

/* GPWTM0 GPTMTAPR*/
#define GPWTM0_BITBANDING_GPTMTAPR               (((BITBANDING_GPTMTAPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAPR_OFFSET)*32))))
#define GPWTM0_GPTMTAPR                          (((GPTMTAPR_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMTAPR_OFFSET )))
#define GPWTM0_GPTMTAPR_R                        (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMTAPR_OFFSET)))

#define GPWTM0_BITBANDING_TA_GPTMTnPR            (((BITBANDING_TA_GPWTMPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnPR_OFFSET)*32))))
#define GPWTM0_TA_GPTMTnPR                       (((TA_GPWTMPR_TypeDef*)(GPWTM0_BASE + GPWTM_TA_GPTMTnPR_OFFSET )))
#define GPWTM0_TA_GPTMTnPR_R                     (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TA_GPTMTnPR_OFFSET)))

/* GPWTM1 GPTMTAPR*/
#define GPWTM1_BITBANDING_GPTMTAPR               (((BITBANDING_GPTMTAPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAPR_OFFSET)*32))))
#define GPWTM1_GPTMTAPR                          (((GPTMTAPR_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMTAPR_OFFSET )))
#define GPWTM1_GPTMTAPR_R                        (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMTAPR_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnPR            (((BITBANDING_TA_GPWTMPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnPR_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnPR                       (((TA_GPWTMPR_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnPR_OFFSET )))
#define GPWTM1_TA_GPTMTnPR_R                     (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnPR_OFFSET)))

/* GPWTM2 GPTMTAPR*/
#define GPWTM2_BITBANDING_GPTMTAPR               (((BITBANDING_GPTMTAPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAPR_OFFSET)*32))))
#define GPWTM2_GPTMTAPR                          (((GPTMTAPR_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMTAPR_OFFSET )))
#define GPWTM2_GPTMTAPR_R                        (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMTAPR_OFFSET)))

#define GPWTM2_BITBANDING_TA_GPTMTnPR            (((BITBANDING_TA_GPWTMPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnPR_OFFSET)*32))))
#define GPWTM2_TA_GPTMTnPR                       (((TA_GPWTMPR_TypeDef*)(GPWTM2_BASE + GPWTM_TA_GPTMTnPR_OFFSET )))
#define GPWTM2_TA_GPTMTnPR_R                     (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TA_GPTMTnPR_OFFSET)))

/* GPWTM3 GPTMTAPR*/
#define GPWTM3_BITBANDING_GPTMTAPR               (((BITBANDING_GPTMTAPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAPR_OFFSET)*32))))
#define GPWTM3_GPTMTAPR                          (((GPTMTAPR_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMTAPR_OFFSET )))
#define GPWTM3_GPTMTAPR_R                        (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMTAPR_OFFSET)))

#define GPWTM3_BITBANDING_TA_GPTMTnPR            (((BITBANDING_TA_GPWTMPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnPR_OFFSET)*32))))
#define GPWTM3_TA_GPTMTnPR                       (((TA_GPWTMPR_TypeDef*)(GPWTM3_BASE + GPWTM_TA_GPTMTnPR_OFFSET )))
#define GPWTM3_TA_GPTMTnPR_R                     (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TA_GPTMTnPR_OFFSET)))

/* GPWTM4 GPTMTAPR*/
#define GPWTM4_BITBANDING_GPTMTAPR               (((BITBANDING_GPTMTAPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAPR_OFFSET)*32))))
#define GPWTM4_GPTMTAPR                          (((GPTMTAPR_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMTAPR_OFFSET )))
#define GPWTM4_GPTMTAPR_R                        (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMTAPR_OFFSET)))

#define GPWTM4_BITBANDING_TA_GPTMTnPR            (((BITBANDING_TA_GPWTMPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnPR_OFFSET)*32))))
#define GPWTM4_TA_GPTMTnPR                       (((TA_GPWTMPR_TypeDef*)(GPWTM4_BASE + GPWTM_TA_GPTMTnPR_OFFSET )))
#define GPWTM4_TA_GPTMTnPR_R                     (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TA_GPTMTnPR_OFFSET)))

/* GPWTM5 GPTMTAPR*/
#define GPWTM5_BITBANDING_GPTMTAPR               (((BITBANDING_GPTMTAPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAPR_OFFSET)*32))))
#define GPWTM5_GPTMTAPR                          (((GPTMTAPR_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMTAPR_OFFSET )))
#define GPWTM5_GPTMTAPR_R                        (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMTAPR_OFFSET)))

#define GPWTM5_BITBANDING_TA_GPTMTnPR            (((BITBANDING_TA_GPWTMPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnPR_OFFSET)*32))))
#define GPWTM5_TA_GPTMTnPR                       (((TA_GPWTMPR_TypeDef*)(GPWTM5_BASE + GPWTM_TA_GPTMTnPR_OFFSET )))
#define GPWTM5_TA_GPTMTnPR_R                     (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TA_GPTMTnPR_OFFSET)))

//--------
#define GPTM_GPTMTAPR_R_TAPSR_MASK              (0x000000FF)
#define GPTM_GPTMTAPR_R_TAPSR_BIT               (0)

#define GPTM_GPTMTAPR_TAPSR_MASK                (0x000000FF)
//--------

//--------
#define GPTM_GPTMTAPR_R_TAPSRH_MASK             (0x0000FF00)
#define GPTM_GPTMTAPR_R_TAPSRH_BIT              (8)

#define GPTM_GPTMTAPR_TAPSRH_MASK               (0x000000FF)
//--------

//--------
#define GPTM_TA_GPTMTnPR_R_TnPSR_MASK           (0x000000FF)
#define GPTM_TA_GPTMTnPR_R_TnPSR_BIT            (0)

#define GPTM_TA_GPTMTnPR_TnPSR_MASK             (0x000000FF)
//--------

//--------
#define GPWTM_GPTMTAPR_R_TAPSR_MASK             (0x000000FF)
#define GPWTM_GPTMTAPR_R_TAPSR_BIT              (0)

#define GPWTM_GPTMTAPR_TAPSR_MASK               (0x000000FF)
//--------

//--------
#define GPWTM_GPTMTAPR_R_TAPSRH_MASK            (0x0000FF00)
#define GPWTM_GPTMTAPR_R_TAPSRH_BIT             (8)

#define GPWTM_GPTMTAPR_TAPSRH_MASK              (0x000000FF)
//--------

//--------
#define GPWTM_TA_GPTMTnPR_R_TnPSR_MASK          (0x0000FFFF)
#define GPWTM_TA_GPTMTnPR_R_TnPSR_BIT           (0)

#define GPWTM_TA_GPTMTnPR_TnPSR_MASK            (0x0000FFFF)
//--------

/******************************************************************************************
************************************ 15 GPTMTBPR *********************************************
******************************************************************************************/

/* GPTM0 GPTMTBPR*/
#define GPTM0_BITBANDING_GPTMTBPR               (((BITBANDING_GPTMTBPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBPR_OFFSET)*32))))
#define GPTM0_GPTMTBPR                          (((GPTMTBPR_TypeDef*)(GPTM0_BASE + GPTM_GPTMTBPR_OFFSET )))
#define GPTM0_GPTMTBPR_R                        (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMTBPR_OFFSET)))

#define GPTM0_BITBANDING_TB_GPTMTnPR            (((BITBANDING_TB_GPTMPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnPR_OFFSET)*32))))
#define GPTM0_TB_GPTMTnPR                       (((TB_GPTMPR_TypeDef*)(GPTM0_BASE + GPTM_TB_GPTMTnPR_OFFSET )))
#define GPTM0_TB_GPTMTnPR_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TB_GPTMTnPR_OFFSET)))

/* GPTM1 GPTMTBPR*/
#define GPTM1_BITBANDING_GPTMTBPR               (((BITBANDING_GPTMTBPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBPR_OFFSET)*32))))
#define GPTM1_GPTMTBPR                          (((GPTMTBPR_TypeDef*)(GPTM1_BASE + GPTM_GPTMTBPR_OFFSET )))
#define GPTM1_GPTMTBPR_R                        (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMTBPR_OFFSET)))

#define GPTM1_BITBANDING_TB_GPTMTnPR            (((BITBANDING_TB_GPTMPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnPR_OFFSET)*32))))
#define GPTM1_TB_GPTMTnPR                       (((TB_GPTMPR_TypeDef*)(GPTM1_BASE + GPTM_TB_GPTMTnPR_OFFSET )))
#define GPTM1_TB_GPTMTnPR_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TB_GPTMTnPR_OFFSET)))

/* GPTM2 GPTMTBPR*/
#define GPTM2_BITBANDING_GPTMTBPR               (((BITBANDING_GPTMTBPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBPR_OFFSET)*32))))
#define GPTM2_GPTMTBPR                          (((GPTMTBPR_TypeDef*)(GPTM2_BASE + GPTM_GPTMTBPR_OFFSET )))
#define GPTM2_GPTMTBPR_R                        (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMTBPR_OFFSET)))

#define GPTM2_BITBANDING_TB_GPTMTnPR            (((BITBANDING_TB_GPTMPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnPR_OFFSET)*32))))
#define GPTM2_TB_GPTMTnPR                       (((TB_GPTMPR_TypeDef*)(GPTM2_BASE + GPTM_TB_GPTMTnPR_OFFSET )))
#define GPTM2_TB_GPTMTnPR_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TB_GPTMTnPR_OFFSET)))

/* GPTM3 GPTMTBPR*/
#define GPTM3_BITBANDING_GPTMTBPR               (((BITBANDING_GPTMTBPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBPR_OFFSET)*32))))
#define GPTM3_GPTMTBPR                          (((GPTMTBPR_TypeDef*)(GPTM3_BASE + GPTM_GPTMTBPR_OFFSET )))
#define GPTM3_GPTMTBPR_R                        (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMTBPR_OFFSET)))

#define GPTM3_BITBANDING_TB_GPTMTnPR            (((BITBANDING_TB_GPTMPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnPR_OFFSET)*32))))
#define GPTM3_TB_GPTMTnPR                       (((TB_GPTMPR_TypeDef*)(GPTM3_BASE + GPTM_TB_GPTMTnPR_OFFSET )))
#define GPTM3_TB_GPTMTnPR_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TB_GPTMTnPR_OFFSET)))

/* GPTM4 GPTMTBPR*/
#define GPTM4_BITBANDING_GPTMTBPR               (((BITBANDING_GPTMTBPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBPR_OFFSET)*32))))
#define GPTM4_GPTMTBPR                          (((GPTMTBPR_TypeDef*)(GPTM4_BASE + GPTM_GPTMTBPR_OFFSET )))
#define GPTM4_GPTMTBPR_R                        (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMTBPR_OFFSET)))

#define GPTM4_BITBANDING_TB_GPTMTnPR            (((BITBANDING_TB_GPTMPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnPR_OFFSET)*32))))
#define GPTM4_TB_GPTMTnPR                       (((TB_GPTMPR_TypeDef*)(GPTM4_BASE + GPTM_TB_GPTMTnPR_OFFSET )))
#define GPTM4_TB_GPTMTnPR_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TB_GPTMTnPR_OFFSET)))

/* GPTM5 GPTMTBPR*/
#define GPTM5_BITBANDING_GPTMTBPR               (((BITBANDING_GPTMTBPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBPR_OFFSET)*32))))
#define GPTM5_GPTMTBPR                          (((GPTMTBPR_TypeDef*)(GPTM5_BASE + GPTM_GPTMTBPR_OFFSET )))
#define GPTM5_GPTMTBPR_R                        (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMTBPR_OFFSET)))

#define GPTM5_BITBANDING_TB_GPTMTnPR            (((BITBANDING_TB_GPTMPR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnPR_OFFSET)*32))))
#define GPTM5_TB_GPTMTnPR                       (((TB_GPTMPR_TypeDef*)(GPTM5_BASE + GPTM_TB_GPTMTnPR_OFFSET )))
#define GPTM5_TB_GPTMTnPR_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TB_GPTMTnPR_OFFSET)))

/* GPWTM0 GPTMTBPR*/
#define GPWTM0_BITBANDING_GPTMTBPR               (((BITBANDING_GPTMTBPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBPR_OFFSET)*32))))
#define GPWTM0_GPTMTBPR                          (((GPTMTBPR_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMTBPR_OFFSET )))
#define GPWTM0_GPTMTBPR_R                        (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMTBPR_OFFSET)))

#define GPWTM0_BITBANDING_TB_GPTMTnPR            (((BITBANDING_TB_GPWTMPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnPR_OFFSET)*32))))
#define GPWTM0_TB_GPTMTnPR                       (((TB_GPWTMPR_TypeDef*)(GPWTM0_BASE + GPWTM_TB_GPTMTnPR_OFFSET )))
#define GPWTM0_TB_GPTMTnPR_R                     (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TB_GPTMTnPR_OFFSET)))

/* GPWTM1 GPTMTBPR*/
#define GPWTM1_BITBANDING_GPTMTBPR               (((BITBANDING_GPTMTBPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBPR_OFFSET)*32))))
#define GPWTM1_GPTMTBPR                          (((GPTMTBPR_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMTBPR_OFFSET )))
#define GPWTM1_GPTMTBPR_R                        (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMTBPR_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnPR            (((BITBANDING_TB_GPWTMPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnPR_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnPR                       (((TB_GPWTMPR_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnPR_OFFSET )))
#define GPWTM1_TB_GPTMTnPR_R                     (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnPR_OFFSET)))

/* GPWTM2 GPTMTBPR*/
#define GPWTM2_BITBANDING_GPTMTBPR               (((BITBANDING_GPTMTBPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBPR_OFFSET)*32))))
#define GPWTM2_GPTMTBPR                          (((GPTMTBPR_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMTBPR_OFFSET )))
#define GPWTM2_GPTMTBPR_R                        (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMTBPR_OFFSET)))

#define GPWTM2_BITBANDING_TB_GPTMTnPR            (((BITBANDING_TB_GPWTMPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnPR_OFFSET)*32))))
#define GPWTM2_TB_GPTMTnPR                       (((TB_GPWTMPR_TypeDef*)(GPWTM2_BASE + GPWTM_TB_GPTMTnPR_OFFSET )))
#define GPWTM2_TB_GPTMTnPR_R                     (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TB_GPTMTnPR_OFFSET)))

/* GPWTM3 GPTMTBPR*/
#define GPWTM3_BITBANDING_GPTMTBPR               (((BITBANDING_GPTMTBPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBPR_OFFSET)*32))))
#define GPWTM3_GPTMTBPR                          (((GPTMTBPR_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMTBPR_OFFSET )))
#define GPWTM3_GPTMTBPR_R                        (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMTBPR_OFFSET)))

#define GPWTM3_BITBANDING_TB_GPTMTnPR            (((BITBANDING_TB_GPWTMPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnPR_OFFSET)*32))))
#define GPWTM3_TB_GPTMTnPR                       (((TB_GPWTMPR_TypeDef*)(GPWTM3_BASE + GPWTM_TB_GPTMTnPR_OFFSET )))
#define GPWTM3_TB_GPTMTnPR_R                     (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TB_GPTMTnPR_OFFSET)))

/* GPWTM4 GPTMTBPR*/
#define GPWTM4_BITBANDING_GPTMTBPR               (((BITBANDING_GPTMTBPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBPR_OFFSET)*32))))
#define GPWTM4_GPTMTBPR                          (((GPTMTBPR_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMTBPR_OFFSET )))
#define GPWTM4_GPTMTBPR_R                        (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMTBPR_OFFSET)))

#define GPWTM4_BITBANDING_TB_GPTMTnPR            (((BITBANDING_TB_GPWTMPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnPR_OFFSET)*32))))
#define GPWTM4_TB_GPTMTnPR                       (((TB_GPWTMPR_TypeDef*)(GPWTM4_BASE + GPWTM_TB_GPTMTnPR_OFFSET )))
#define GPWTM4_TB_GPTMTnPR_R                     (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TB_GPTMTnPR_OFFSET)))

/* GPWTM5 GPTMTBPR*/
#define GPWTM5_BITBANDING_GPTMTBPR               (((BITBANDING_GPTMTBPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBPR_OFFSET)*32))))
#define GPWTM5_GPTMTBPR                          (((GPTMTBPR_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMTBPR_OFFSET )))
#define GPWTM5_GPTMTBPR_R                        (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMTBPR_OFFSET)))

#define GPWTM5_BITBANDING_TB_GPTMTnPR            (((BITBANDING_TB_GPWTMPR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnPR_OFFSET)*32))))
#define GPWTM5_TB_GPTMTnPR                       (((TB_GPWTMPR_TypeDef*)(GPWTM5_BASE + GPWTM_TB_GPTMTnPR_OFFSET )))
#define GPWTM5_TB_GPTMTnPR_R                     (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TB_GPTMTnPR_OFFSET)))

//--------
#define GPTM_GPTMTBPR_R_TBPSR_MASK              (0x000000FF)
#define GPTM_GPTMTBPR_R_TBPSR_BIT               (0)

#define GPTM_GPTMTBPR_TBPSR_MASK                (0x000000FF)
//--------

//--------
#define GPTM_GPTMTBPR_R_TBPSRH_MASK             (0x0000FF00)
#define GPTM_GPTMTBPR_R_TBPSRH_BIT              (8)

#define GPTM_GPTMTBPR_TBPSRH_MASK               (0x000000FF)
//--------

//--------
#define GPTM_TB_GPTMTnPR_R_TnPSR_MASK           (0x000000FF)
#define GPTM_TB_GPTMTnPR_R_TnPSR_BIT            (0)

#define GPTM_TB_GPTMTnPR_TnPSR_MASK             (0x000000FF)
//--------

//--------
#define GPWTM_GPTMTBPR_R_TBPSR_MASK             (0x000000FF)
#define GPWTM_GPTMTBPR_R_TBPSR_BIT              (0)

#define GPWTM_GPTMTBPR_TBPSR_MASK               (0x000000FF)
//--------

//--------
#define GPWTM_GPTMTBPR_R_TBPSRH_MASK            (0x0000FF00)
#define GPWTM_GPTMTBPR_R_TBPSRH_BIT             (8)

#define GPWTM_GPTMTBPR_TBPSRH_MASK              (0x000000FF)
//--------

//--------
#define GPWTM_TB_GPTMTnPR_R_TnPSR_MASK          (0x0000FFFF)
#define GPWTM_TB_GPTMTnPR_R_TnPSR_BIT           (0)

#define GPWTM_TB_GPTMTnPR_TnPSR_MASK            (0x0000FFFF)
//--------

/******************************************************************************************
************************************ 16 GPTMTAPMR *********************************************
******************************************************************************************/

/* GPTM0 GPTMTAPMR*/
#define GPTM0_BITBANDING_GPTMTAPMR               (((BITBANDING_GPTMTAPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAPMR_OFFSET)*32))))
#define GPTM0_GPTMTAPMR                          (((GPTMTAPMR_TypeDef*)(GPTM0_BASE + GPTM_GPTMTAPMR_OFFSET )))
#define GPTM0_GPTMTAPMR_R                        (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMTAPMR_OFFSET)))

#define GPTM0_BITBANDING_TA_GPTMTnPMR            (((BITBANDING_TA_GPTMPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnPMR_OFFSET)*32))))
#define GPTM0_TA_GPTMTnPMR                       (((TA_GPTMPMR_TypeDef*)(GPTM0_BASE + GPTM_TA_GPTMTnPMR_OFFSET )))
#define GPTM0_TA_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TA_GPTMTnPMR_OFFSET)))

/* GPTM1 GPTMTAPMR*/
#define GPTM1_BITBANDING_GPTMTAPMR               (((BITBANDING_GPTMTAPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAPMR_OFFSET)*32))))
#define GPTM1_GPTMTAPMR                          (((GPTMTAPMR_TypeDef*)(GPTM1_BASE + GPTM_GPTMTAPMR_OFFSET )))
#define GPTM1_GPTMTAPMR_R                        (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMTAPMR_OFFSET)))

#define GPTM1_BITBANDING_TA_GPTMTnPMR            (((BITBANDING_TA_GPTMPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnPMR_OFFSET)*32))))
#define GPTM1_TA_GPTMTnPMR                       (((TA_GPTMPMR_TypeDef*)(GPTM1_BASE + GPTM_TA_GPTMTnPMR_OFFSET )))
#define GPTM1_TA_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TA_GPTMTnPMR_OFFSET)))

/* GPTM2 GPTMTAPMR*/
#define GPTM2_BITBANDING_GPTMTAPMR               (((BITBANDING_GPTMTAPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAPMR_OFFSET)*32))))
#define GPTM2_GPTMTAPMR                          (((GPTMTAPMR_TypeDef*)(GPTM2_BASE + GPTM_GPTMTAPMR_OFFSET )))
#define GPTM2_GPTMTAPMR_R                        (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMTAPMR_OFFSET)))

#define GPTM2_BITBANDING_TA_GPTMTnPMR            (((BITBANDING_TA_GPTMPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnPMR_OFFSET)*32))))
#define GPTM2_TA_GPTMTnPMR                       (((TA_GPTMPMR_TypeDef*)(GPTM2_BASE + GPTM_TA_GPTMTnPMR_OFFSET )))
#define GPTM2_TA_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TA_GPTMTnPMR_OFFSET)))

/* GPTM3 GPTMTAPMR*/
#define GPTM3_BITBANDING_GPTMTAPMR               (((BITBANDING_GPTMTAPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAPMR_OFFSET)*32))))
#define GPTM3_GPTMTAPMR                          (((GPTMTAPMR_TypeDef*)(GPTM3_BASE + GPTM_GPTMTAPMR_OFFSET )))
#define GPTM3_GPTMTAPMR_R                        (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMTAPMR_OFFSET)))

#define GPTM3_BITBANDING_TA_GPTMTnPMR            (((BITBANDING_TA_GPTMPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnPMR_OFFSET)*32))))
#define GPTM3_TA_GPTMTnPMR                       (((TA_GPTMPMR_TypeDef*)(GPTM3_BASE + GPTM_TA_GPTMTnPMR_OFFSET )))
#define GPTM3_TA_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TA_GPTMTnPMR_OFFSET)))

/* GPTM4 GPTMTAPMR*/
#define GPTM4_BITBANDING_GPTMTAPMR               (((BITBANDING_GPTMTAPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAPMR_OFFSET)*32))))
#define GPTM4_GPTMTAPMR                          (((GPTMTAPMR_TypeDef*)(GPTM4_BASE + GPTM_GPTMTAPMR_OFFSET )))
#define GPTM4_GPTMTAPMR_R                        (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMTAPMR_OFFSET)))

#define GPTM4_BITBANDING_TA_GPTMTnPMR            (((BITBANDING_TA_GPTMPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnPMR_OFFSET)*32))))
#define GPTM4_TA_GPTMTnPMR                       (((TA_GPTMPMR_TypeDef*)(GPTM4_BASE + GPTM_TA_GPTMTnPMR_OFFSET )))
#define GPTM4_TA_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TA_GPTMTnPMR_OFFSET)))

/* GPTM5 GPTMTAPMR*/
#define GPTM5_BITBANDING_GPTMTAPMR               (((BITBANDING_GPTMTAPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAPMR_OFFSET)*32))))
#define GPTM5_GPTMTAPMR                          (((GPTMTAPMR_TypeDef*)(GPTM5_BASE + GPTM_GPTMTAPMR_OFFSET )))
#define GPTM5_GPTMTAPMR_R                        (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMTAPMR_OFFSET)))

#define GPTM5_BITBANDING_TA_GPTMTnPMR            (((BITBANDING_TA_GPTMPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnPMR_OFFSET)*32))))
#define GPTM5_TA_GPTMTnPMR                       (((TA_GPTMPMR_TypeDef*)(GPTM5_BASE + GPTM_TA_GPTMTnPMR_OFFSET )))
#define GPTM5_TA_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TA_GPTMTnPMR_OFFSET)))

/* GPWTM0 GPTMTAPMR*/
#define GPWTM0_BITBANDING_GPTMTAPMR               (((BITBANDING_GPTMTAPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAPMR_OFFSET)*32))))
#define GPWTM0_GPTMTAPMR                          (((GPTMTAPMR_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMTAPMR_OFFSET )))
#define GPWTM0_GPTMTAPMR_R                        (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMTAPMR_OFFSET)))

#define GPWTM0_BITBANDING_TA_GPTMTnPMR            (((BITBANDING_TA_GPWTMPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnPMR_OFFSET)*32))))
#define GPWTM0_TA_GPTMTnPMR                       (((TA_GPWTMPMR_TypeDef*)(GPWTM0_BASE + GPWTM_TA_GPTMTnPMR_OFFSET )))
#define GPWTM0_TA_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TA_GPTMTnPMR_OFFSET)))

/* GPWTM1 GPTMTAPMR*/
#define GPWTM1_BITBANDING_GPTMTAPMR               (((BITBANDING_GPTMTAPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAPMR_OFFSET)*32))))
#define GPWTM1_GPTMTAPMR                          (((GPTMTAPMR_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMTAPMR_OFFSET )))
#define GPWTM1_GPTMTAPMR_R                        (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMTAPMR_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnPMR            (((BITBANDING_TA_GPWTMPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnPMR_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnPMR                       (((TA_GPWTMPMR_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnPMR_OFFSET )))
#define GPWTM1_TA_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnPMR_OFFSET)))

/* GPWTM2 GPTMTAPMR*/
#define GPWTM2_BITBANDING_GPTMTAPMR               (((BITBANDING_GPTMTAPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAPMR_OFFSET)*32))))
#define GPWTM2_GPTMTAPMR                          (((GPTMTAPMR_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMTAPMR_OFFSET )))
#define GPWTM2_GPTMTAPMR_R                        (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMTAPMR_OFFSET)))

#define GPWTM2_BITBANDING_TA_GPTMTnPMR            (((BITBANDING_TA_GPWTMPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnPMR_OFFSET)*32))))
#define GPWTM2_TA_GPTMTnPMR                       (((TA_GPWTMPMR_TypeDef*)(GPWTM2_BASE + GPWTM_TA_GPTMTnPMR_OFFSET )))
#define GPWTM2_TA_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TA_GPTMTnPMR_OFFSET)))

/* GPWTM3 GPTMTAPMR*/
#define GPWTM3_BITBANDING_GPTMTAPMR               (((BITBANDING_GPTMTAPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAPMR_OFFSET)*32))))
#define GPWTM3_GPTMTAPMR                          (((GPTMTAPMR_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMTAPMR_OFFSET )))
#define GPWTM3_GPTMTAPMR_R                        (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMTAPMR_OFFSET)))

#define GPWTM3_BITBANDING_TA_GPTMTnPMR            (((BITBANDING_TA_GPWTMPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnPMR_OFFSET)*32))))
#define GPWTM3_TA_GPTMTnPMR                       (((TA_GPWTMPMR_TypeDef*)(GPWTM3_BASE + GPWTM_TA_GPTMTnPMR_OFFSET )))
#define GPWTM3_TA_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TA_GPTMTnPMR_OFFSET)))

/* GPWTM4 GPTMTAPMR*/
#define GPWTM4_BITBANDING_GPTMTAPMR               (((BITBANDING_GPTMTAPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAPMR_OFFSET)*32))))
#define GPWTM4_GPTMTAPMR                          (((GPTMTAPMR_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMTAPMR_OFFSET )))
#define GPWTM4_GPTMTAPMR_R                        (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMTAPMR_OFFSET)))

#define GPWTM4_BITBANDING_TA_GPTMTnPMR            (((BITBANDING_TA_GPWTMPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnPMR_OFFSET)*32))))
#define GPWTM4_TA_GPTMTnPMR                       (((TA_GPWTMPMR_TypeDef*)(GPWTM4_BASE + GPWTM_TA_GPTMTnPMR_OFFSET )))
#define GPWTM4_TA_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TA_GPTMTnPMR_OFFSET)))

/* GPWTM5 GPTMTAPMR*/
#define GPWTM5_BITBANDING_GPTMTAPMR               (((BITBANDING_GPTMTAPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAPMR_OFFSET)*32))))
#define GPWTM5_GPTMTAPMR                          (((GPTMTAPMR_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMTAPMR_OFFSET )))
#define GPWTM5_GPTMTAPMR_R                        (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMTAPMR_OFFSET)))

#define GPWTM5_BITBANDING_TA_GPTMTnPMR            (((BITBANDING_TA_GPWTMPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnPMR_OFFSET)*32))))
#define GPWTM5_TA_GPTMTnPMR                       (((TA_GPWTMPMR_TypeDef*)(GPWTM5_BASE + GPWTM_TA_GPTMTnPMR_OFFSET )))
#define GPWTM5_TA_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TA_GPTMTnPMR_OFFSET)))

//--------
#define GPTM_GPTMTAPMR_R_TAPSMR_MASK              (0x000000FF)
#define GPTM_GPTMTAPMR_R_TAPSMR_BIT               (0)

#define GPTM_GPTMTAPMR_TAPSMR_MASK                (0x000000FF)
//--------

//--------
#define GPTM_GPTMTAPMR_R_TAPSMRH_MASK             (0x0000FF00)
#define GPTM_GPTMTAPMR_R_TAPSMRH_BIT              (8)

#define GPTM_GPTMTAPMR_TAPSMRH_MASK               (0x000000FF)
//--------

//--------
#define GPTM_TA_GPTMTnPMR_R_TnPSMR_MASK           (0x000000FF)
#define GPTM_TA_GPTMTnPMR_R_TnPSMR_BIT            (0)

#define GPTM_TA_GPTMTnPMR_TnPSMR_MASK             (0x000000FF)
//--------

//--------
#define GPWTM_GPTMTAPMR_R_TAPSMR_MASK             (0x000000FF)
#define GPWTM_GPTMTAPMR_R_TAPSMR_BIT              (0)

#define GPWTM_GPTMTAPMR_TAPSMR_MASK               (0x000000FF)
//--------

//--------
#define GPWTM_GPTMTAPMR_R_TAPSMRH_MASK            (0x0000FF00)
#define GPWTM_GPTMTAPMR_R_TAPSMRH_BIT             (8)

#define GPWTM_GPTMTAPMR_TAPSMRH_MASK              (0x000000FF)
//--------

//--------
#define GPWTM_TA_GPTMTnPMR_R_TnPSMR_MASK          (0x0000FFFF)
#define GPWTM_TA_GPTMTnPMR_R_TnPSMR_BIT           (0)

#define GPWTM_TA_GPTMTnPMR_TnPSMR_MASK            (0x0000FFFF)
//--------


/******************************************************************************************
************************************ 17 GPTMTBPMR *********************************************
******************************************************************************************/

/* GPTM0 GPTMTBPMR*/
#define GPTM0_BITBANDING_GPTMTBPMR               (((BITBANDING_GPTMTBPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBPMR_OFFSET)*32))))
#define GPTM0_GPTMTBPMR                          (((GPTMTBPMR_TypeDef*)(GPTM0_BASE + GPTM_GPTMTBPMR_OFFSET )))
#define GPTM0_GPTMTBPMR_R                        (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMTBPMR_OFFSET)))

#define GPTM0_BITBANDING_TB_GPTMTnPMR            (((BITBANDING_TB_GPTMPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnPMR_OFFSET)*32))))
#define GPTM0_TB_GPTMTnPMR                       (((TB_GPTMPMR_TypeDef*)(GPTM0_BASE + GPTM_TB_GPTMTnPMR_OFFSET )))
#define GPTM0_TB_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TB_GPTMTnPMR_OFFSET)))

/* GPTM1 GPTMTBPMR*/
#define GPTM1_BITBANDING_GPTMTBPMR               (((BITBANDING_GPTMTBPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBPMR_OFFSET)*32))))
#define GPTM1_GPTMTBPMR                          (((GPTMTBPMR_TypeDef*)(GPTM1_BASE + GPTM_GPTMTBPMR_OFFSET )))
#define GPTM1_GPTMTBPMR_R                        (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMTBPMR_OFFSET)))

#define GPTM1_BITBANDING_TB_GPTMTnPMR            (((BITBANDING_TB_GPTMPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnPMR_OFFSET)*32))))
#define GPTM1_TB_GPTMTnPMR                       (((TB_GPTMPMR_TypeDef*)(GPTM1_BASE + GPTM_TB_GPTMTnPMR_OFFSET )))
#define GPTM1_TB_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TB_GPTMTnPMR_OFFSET)))

/* GPTM2 GPTMTBPMR*/
#define GPTM2_BITBANDING_GPTMTBPMR               (((BITBANDING_GPTMTBPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBPMR_OFFSET)*32))))
#define GPTM2_GPTMTBPMR                          (((GPTMTBPMR_TypeDef*)(GPTM2_BASE + GPTM_GPTMTBPMR_OFFSET )))
#define GPTM2_GPTMTBPMR_R                        (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMTBPMR_OFFSET)))

#define GPTM2_BITBANDING_TB_GPTMTnPMR            (((BITBANDING_TB_GPTMPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnPMR_OFFSET)*32))))
#define GPTM2_TB_GPTMTnPMR                       (((TB_GPTMPMR_TypeDef*)(GPTM2_BASE + GPTM_TB_GPTMTnPMR_OFFSET )))
#define GPTM2_TB_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TB_GPTMTnPMR_OFFSET)))

/* GPTM3 GPTMTBPMR*/
#define GPTM3_BITBANDING_GPTMTBPMR               (((BITBANDING_GPTMTBPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBPMR_OFFSET)*32))))
#define GPTM3_GPTMTBPMR                          (((GPTMTBPMR_TypeDef*)(GPTM3_BASE + GPTM_GPTMTBPMR_OFFSET )))
#define GPTM3_GPTMTBPMR_R                        (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMTBPMR_OFFSET)))

#define GPTM3_BITBANDING_TB_GPTMTnPMR            (((BITBANDING_TB_GPTMPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnPMR_OFFSET)*32))))
#define GPTM3_TB_GPTMTnPMR                       (((TB_GPTMPMR_TypeDef*)(GPTM3_BASE + GPTM_TB_GPTMTnPMR_OFFSET )))
#define GPTM3_TB_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TB_GPTMTnPMR_OFFSET)))

/* GPTM4 GPTMTBPMR*/
#define GPTM4_BITBANDING_GPTMTBPMR               (((BITBANDING_GPTMTBPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBPMR_OFFSET)*32))))
#define GPTM4_GPTMTBPMR                          (((GPTMTBPMR_TypeDef*)(GPTM4_BASE + GPTM_GPTMTBPMR_OFFSET )))
#define GPTM4_GPTMTBPMR_R                        (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMTBPMR_OFFSET)))

#define GPTM4_BITBANDING_TB_GPTMTnPMR            (((BITBANDING_TB_GPTMPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnPMR_OFFSET)*32))))
#define GPTM4_TB_GPTMTnPMR                       (((TB_GPTMPMR_TypeDef*)(GPTM4_BASE + GPTM_TB_GPTMTnPMR_OFFSET )))
#define GPTM4_TB_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TB_GPTMTnPMR_OFFSET)))

/* GPTM5 GPTMTBPMR*/
#define GPTM5_BITBANDING_GPTMTBPMR               (((BITBANDING_GPTMTBPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBPMR_OFFSET)*32))))
#define GPTM5_GPTMTBPMR                          (((GPTMTBPMR_TypeDef*)(GPTM5_BASE + GPTM_GPTMTBPMR_OFFSET )))
#define GPTM5_GPTMTBPMR_R                        (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMTBPMR_OFFSET)))

#define GPTM5_BITBANDING_TB_GPTMTnPMR            (((BITBANDING_TB_GPTMPMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnPMR_OFFSET)*32))))
#define GPTM5_TB_GPTMTnPMR                       (((TB_GPTMPMR_TypeDef*)(GPTM5_BASE + GPTM_TB_GPTMTnPMR_OFFSET )))
#define GPTM5_TB_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TB_GPTMTnPMR_OFFSET)))

/* GPWTM0 GPTMTBPMR*/
#define GPWTM0_BITBANDING_GPTMTBPMR               (((BITBANDING_GPTMTBPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBPMR_OFFSET)*32))))
#define GPWTM0_GPTMTBPMR                          (((GPTMTBPMR_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMTBPMR_OFFSET )))
#define GPWTM0_GPTMTBPMR_R                        (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMTBPMR_OFFSET)))

#define GPWTM0_BITBANDING_TB_GPTMTnPMR            (((BITBANDING_TB_GPWTMPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnPMR_OFFSET)*32))))
#define GPWTM0_TB_GPTMTnPMR                       (((TB_GPWTMPMR_TypeDef*)(GPWTM0_BASE + GPWTM_TB_GPTMTnPMR_OFFSET )))
#define GPWTM0_TB_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TB_GPTMTnPMR_OFFSET)))

/* GPWTM1 GPTMTBPMR*/
#define GPWTM1_BITBANDING_GPTMTBPMR               (((BITBANDING_GPTMTBPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBPMR_OFFSET)*32))))
#define GPWTM1_GPTMTBPMR                          (((GPTMTBPMR_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMTBPMR_OFFSET )))
#define GPWTM1_GPTMTBPMR_R                        (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMTBPMR_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnPMR            (((BITBANDING_TB_GPWTMPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnPMR_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnPMR                       (((TB_GPWTMPMR_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnPMR_OFFSET )))
#define GPWTM1_TB_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnPMR_OFFSET)))

/* GPWTM2 GPTMTBPMR*/
#define GPWTM2_BITBANDING_GPTMTBPMR               (((BITBANDING_GPTMTBPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBPMR_OFFSET)*32))))
#define GPWTM2_GPTMTBPMR                          (((GPTMTBPMR_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMTBPMR_OFFSET )))
#define GPWTM2_GPTMTBPMR_R                        (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMTBPMR_OFFSET)))

#define GPWTM2_BITBANDING_TB_GPTMTnPMR            (((BITBANDING_TB_GPWTMPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnPMR_OFFSET)*32))))
#define GPWTM2_TB_GPTMTnPMR                       (((TB_GPWTMPMR_TypeDef*)(GPWTM2_BASE + GPWTM_TB_GPTMTnPMR_OFFSET )))
#define GPWTM2_TB_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TB_GPTMTnPMR_OFFSET)))

/* GPWTM3 GPTMTBPMR*/
#define GPWTM3_BITBANDING_GPTMTBPMR               (((BITBANDING_GPTMTBPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBPMR_OFFSET)*32))))
#define GPWTM3_GPTMTBPMR                          (((GPTMTBPMR_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMTBPMR_OFFSET )))
#define GPWTM3_GPTMTBPMR_R                        (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMTBPMR_OFFSET)))

#define GPWTM3_BITBANDING_TB_GPTMTnPMR            (((BITBANDING_TB_GPWTMPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnPMR_OFFSET)*32))))
#define GPWTM3_TB_GPTMTnPMR                       (((TB_GPWTMPMR_TypeDef*)(GPWTM3_BASE + GPWTM_TB_GPTMTnPMR_OFFSET )))
#define GPWTM3_TB_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TB_GPTMTnPMR_OFFSET)))

/* GPWTM4 GPTMTBPMR*/
#define GPWTM4_BITBANDING_GPTMTBPMR               (((BITBANDING_GPTMTBPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBPMR_OFFSET)*32))))
#define GPWTM4_GPTMTBPMR                          (((GPTMTBPMR_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMTBPMR_OFFSET )))
#define GPWTM4_GPTMTBPMR_R                        (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMTBPMR_OFFSET)))

#define GPWTM4_BITBANDING_TB_GPTMTnPMR            (((BITBANDING_TB_GPWTMPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnPMR_OFFSET)*32))))
#define GPWTM4_TB_GPTMTnPMR                       (((TB_GPWTMPMR_TypeDef*)(GPWTM4_BASE + GPWTM_TB_GPTMTnPMR_OFFSET )))
#define GPWTM4_TB_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TB_GPTMTnPMR_OFFSET)))

/* GPWTM5 GPTMTBPMR*/
#define GPWTM5_BITBANDING_GPTMTBPMR               (((BITBANDING_GPTMTBPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBPMR_OFFSET)*32))))
#define GPWTM5_GPTMTBPMR                          (((GPTMTBPMR_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMTBPMR_OFFSET )))
#define GPWTM5_GPTMTBPMR_R                        (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMTBPMR_OFFSET)))

#define GPWTM5_BITBANDING_TB_GPTMTnPMR            (((BITBANDING_TB_GPWTMPMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnPMR_OFFSET)*32))))
#define GPWTM5_TB_GPTMTnPMR                       (((TB_GPWTMPMR_TypeDef*)(GPWTM5_BASE + GPWTM_TB_GPTMTnPMR_OFFSET )))
#define GPWTM5_TB_GPTMTnPMR_R                     (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TB_GPTMTnPMR_OFFSET)))

//--------
#define GPTM_GPTMTBPMR_R_TBPSMR_MASK              (0x000000FF)
#define GPTM_GPTMTBPMR_R_TBPSMR_BIT               (0)

#define GPTM_GPTMTBPMR_TBPSMR_MASK                (0x000000FF)
//--------

//--------
#define GPTM_GPTMTBPMR_R_TBPSMRH_MASK             (0x0000FF00)
#define GPTM_GPTMTBPMR_R_TBPSMRH_BIT              (8)

#define GPTM_GPTMTBPMR_TBPSMRH_MASK               (0x000000FF)
//--------

//--------
#define GPTM_TB_GPTMTnPMR_R_TnPSMR_MASK           (0x000000FF)
#define GPTM_TB_GPTMTnPMR_R_TnPSMR_BIT            (0)

#define GPTM_TB_GPTMTnPMR_TnPSMR_MASK             (0x000000FF)
//--------

//--------
#define GPWTM_GPTMTBPMR_R_TBPSMR_MASK             (0x000000FF)
#define GPWTM_GPTMTBPMR_R_TBPSMR_BIT              (0)

#define GPWTM_GPTMTBPMR_TBPSMR_MASK               (0x000000FF)
//--------

//--------
#define GPWTM_GPTMTBPMR_R_TBPSMRH_MASK            (0x0000FF00)
#define GPWTM_GPTMTBPMR_R_TBPSMRH_BIT             (8)

#define GPWTM_GPTMTBPMR_TBPSMRH_MASK              (0x000000FF)
//--------

//--------
#define GPWTM_TB_GPTMTnPMR_R_TnPSMR_MASK          (0x0000FFFF)
#define GPWTM_TB_GPTMTnPMR_R_TnPSMR_BIT           (0)

#define GPWTM_TB_GPTMTnPMR_TnPSMR_MASK            (0x0000FFFF)
//--------


/******************************************************************************************
************************************ 18 GPTMTAR *********************************************
******************************************************************************************/

/* GPTM0 GPTMTAR*/
#define GPTM0_BITBANDING_GPTMTAR               (((BITBANDING_GPTMTAR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAR_OFFSET)*32))))
#define GPTM0_GPTMTAR                          (((GPTMTAR_TypeDef*)(GPTM0_BASE + GPTM_GPTMTAR_OFFSET )))
#define GPTM0_GPTMTAR_R                        (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMTAR_OFFSET)))

#define GPTM0_BITBANDING_TA_GPTMTnR            (((BITBANDING_TA_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnR_OFFSET)*32))))
#define GPTM0_TA_GPTMTnR                       (((TA_GPTMR_TypeDef*)(GPTM0_BASE + GPTM_TA_GPTMTnR_OFFSET )))
#define GPTM0_TA_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TA_GPTMTnR_OFFSET)))

#define GPTM0_BITBANDING_TW_GPTMTnR            (((BITBANDING_TW_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnR_OFFSET)*32))))
#define GPTM0_TW_GPTMTnR                       (((TW_GPTMR_TypeDef*)(GPTM0_BASE + GPTM_TW_GPTMTnR_OFFSET )))
#define GPTM0_TW_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TW_GPTMTnR_OFFSET)))

/* GPTM1 GPTMTAR*/
#define GPTM1_BITBANDING_GPTMTAR               (((BITBANDING_GPTMTAR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAR_OFFSET)*32))))
#define GPTM1_GPTMTAR                          (((GPTMTAR_TypeDef*)(GPTM1_BASE + GPTM_GPTMTAR_OFFSET )))
#define GPTM1_GPTMTAR_R                        (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMTAR_OFFSET)))

#define GPTM1_BITBANDING_TA_GPTMTnR            (((BITBANDING_TA_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnR_OFFSET)*32))))
#define GPTM1_TA_GPTMTnR                       (((TA_GPTMR_TypeDef*)(GPTM1_BASE + GPTM_TA_GPTMTnR_OFFSET )))
#define GPTM1_TA_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TA_GPTMTnR_OFFSET)))

#define GPTM1_BITBANDING_TW_GPTMTnR            (((BITBANDING_TW_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnR_OFFSET)*32))))
#define GPTM1_TW_GPTMTnR                       (((TW_GPTMR_TypeDef*)(GPTM1_BASE + GPTM_TW_GPTMTnR_OFFSET )))
#define GPTM1_TW_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TW_GPTMTnR_OFFSET)))

/* GPTM2 GPTMTAR*/
#define GPTM2_BITBANDING_GPTMTAR               (((BITBANDING_GPTMTAR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAR_OFFSET)*32))))
#define GPTM2_GPTMTAR                          (((GPTMTAR_TypeDef*)(GPTM2_BASE + GPTM_GPTMTAR_OFFSET )))
#define GPTM2_GPTMTAR_R                        (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMTAR_OFFSET)))

#define GPTM2_BITBANDING_TA_GPTMTnR            (((BITBANDING_TA_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnR_OFFSET)*32))))
#define GPTM2_TA_GPTMTnR                       (((TA_GPTMR_TypeDef*)(GPTM2_BASE + GPTM_TA_GPTMTnR_OFFSET )))
#define GPTM2_TA_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TA_GPTMTnR_OFFSET)))

#define GPTM2_BITBANDING_TW_GPTMTnR            (((BITBANDING_TW_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnR_OFFSET)*32))))
#define GPTM2_TW_GPTMTnR                       (((TW_GPTMR_TypeDef*)(GPTM2_BASE + GPTM_TW_GPTMTnR_OFFSET )))
#define GPTM2_TW_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TW_GPTMTnR_OFFSET)))

/* GPTM3 GPTMTAR*/
#define GPTM3_BITBANDING_GPTMTAR               (((BITBANDING_GPTMTAR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAR_OFFSET)*32))))
#define GPTM3_GPTMTAR                          (((GPTMTAR_TypeDef*)(GPTM3_BASE + GPTM_GPTMTAR_OFFSET )))
#define GPTM3_GPTMTAR_R                        (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMTAR_OFFSET)))

#define GPTM3_BITBANDING_TA_GPTMTnR            (((BITBANDING_TA_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnR_OFFSET)*32))))
#define GPTM3_TA_GPTMTnR                       (((TA_GPTMR_TypeDef*)(GPTM3_BASE + GPTM_TA_GPTMTnR_OFFSET )))
#define GPTM3_TA_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TA_GPTMTnR_OFFSET)))

#define GPTM3_BITBANDING_TW_GPTMTnR            (((BITBANDING_TW_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnR_OFFSET)*32))))
#define GPTM3_TW_GPTMTnR                       (((TW_GPTMR_TypeDef*)(GPTM3_BASE + GPTM_TW_GPTMTnR_OFFSET )))
#define GPTM3_TW_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TW_GPTMTnR_OFFSET)))

/* GPTM4 GPTMTAR*/
#define GPTM4_BITBANDING_GPTMTAR               (((BITBANDING_GPTMTAR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAR_OFFSET)*32))))
#define GPTM4_GPTMTAR                          (((GPTMTAR_TypeDef*)(GPTM4_BASE + GPTM_GPTMTAR_OFFSET )))
#define GPTM4_GPTMTAR_R                        (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMTAR_OFFSET)))

#define GPTM4_BITBANDING_TA_GPTMTnR            (((BITBANDING_TA_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnR_OFFSET)*32))))
#define GPTM4_TA_GPTMTnR                       (((TA_GPTMR_TypeDef*)(GPTM4_BASE + GPTM_TA_GPTMTnR_OFFSET )))
#define GPTM4_TA_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TA_GPTMTnR_OFFSET)))

#define GPTM4_BITBANDING_TW_GPTMTnR            (((BITBANDING_TW_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnR_OFFSET)*32))))
#define GPTM4_TW_GPTMTnR                       (((TW_GPTMR_TypeDef*)(GPTM4_BASE + GPTM_TW_GPTMTnR_OFFSET )))
#define GPTM4_TW_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TW_GPTMTnR_OFFSET)))

/* GPTM5 GPTMTAR*/
#define GPTM5_BITBANDING_GPTMTAR               (((BITBANDING_GPTMTAR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAR_OFFSET)*32))))
#define GPTM5_GPTMTAR                          (((GPTMTAR_TypeDef*)(GPTM5_BASE + GPTM_GPTMTAR_OFFSET )))
#define GPTM5_GPTMTAR_R                        (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMTAR_OFFSET)))

#define GPTM5_BITBANDING_TA_GPTMTnR            (((BITBANDING_TA_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnR_OFFSET)*32))))
#define GPTM5_TA_GPTMTnR                       (((TA_GPTMR_TypeDef*)(GPTM5_BASE + GPTM_TA_GPTMTnR_OFFSET )))
#define GPTM5_TA_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TA_GPTMTnR_OFFSET)))

#define GPTM5_BITBANDING_TW_GPTMTnR            (((BITBANDING_TW_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnR_OFFSET)*32))))
#define GPTM5_TW_GPTMTnR                       (((TW_GPTMR_TypeDef*)(GPTM5_BASE + GPTM_TW_GPTMTnR_OFFSET )))
#define GPTM5_TW_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TW_GPTMTnR_OFFSET)))

/* GPWTM0 GPTMTAR*/
#define GPWTM0_BITBANDING_GPTMTAR              (((BITBANDING_GPTMTAR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAR_OFFSET)*32))))
#define GPWTM0_GPTMTAR                         (((GPTMTAR_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMTAR_OFFSET )))
#define GPWTM0_GPTMTAR_R                       (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMTAR_OFFSET)))

#define GPWTM0_BITBANDING_TA_GPTMTnR           (((BITBANDING_TA_GPTMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnR_OFFSET)*32))))
#define GPWTM0_TA_GPTMTnR                      (((TA_GPTMR_TypeDef*)(GPWTM0_BASE + GPWTM_TA_GPTMTnR_OFFSET )))
#define GPWTM0_TA_GPTMTnR_R                    (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TA_GPTMTnR_OFFSET)))

#define GPWTM0_BITBANDING_TW_GPTMTnR_LOW       (((BITBANDING_TW_GPWTMR_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnR_LOW_OFFSET)*32))))
#define GPWTM0_TW_GPTMTnR_LOW                  (((TW_GPWTMR_LOW_TypeDef*)(GPWTM0_BASE + GPWTM_TW_GPTMTnR_LOW_OFFSET )))
#define GPWTM0_TW_GPTMTnR_LOW_R                (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TW_GPTMTnR_LOW_OFFSET)))

/* GPWTM1 GPTMTAR*/
#define GPWTM1_BITBANDING_GPTMTAR              (((BITBANDING_GPTMTAR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAR_OFFSET)*32))))
#define GPWTM1_GPTMTAR                         (((GPTMTAR_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMTAR_OFFSET )))
#define GPWTM1_GPTMTAR_R                       (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMTAR_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnR           (((BITBANDING_TA_GPTMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnR_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnR                      (((TA_GPTMR_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnR_OFFSET )))
#define GPWTM1_TA_GPTMTnR_R                    (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnR_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnR_LOW       (((BITBANDING_TW_GPWTMR_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnR_LOW_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnR_LOW                  (((TW_GPWTMR_LOW_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnR_LOW_OFFSET )))
#define GPWTM1_TW_GPTMTnR_LOW_R                (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnR_LOW_OFFSET)))

/* GPWTM2 GPTMTAR*/
#define GPWTM2_BITBANDING_GPTMTAR              (((BITBANDING_GPTMTAR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAR_OFFSET)*32))))
#define GPWTM2_GPTMTAR                         (((GPTMTAR_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMTAR_OFFSET )))
#define GPWTM2_GPTMTAR_R                       (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMTAR_OFFSET)))

#define GPWTM2_BITBANDING_TA_GPTMTnR           (((BITBANDING_TA_GPTMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnR_OFFSET)*32))))
#define GPWTM2_TA_GPTMTnR                      (((TA_GPTMR_TypeDef*)(GPWTM2_BASE + GPWTM_TA_GPTMTnR_OFFSET )))
#define GPWTM2_TA_GPTMTnR_R                    (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TA_GPTMTnR_OFFSET)))

#define GPWTM2_BITBANDING_TW_GPTMTnR_LOW       (((BITBANDING_TW_GPWTMR_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnR_LOW_OFFSET)*32))))
#define GPWTM2_TW_GPTMTnR_LOW                  (((TW_GPWTMR_LOW_TypeDef*)(GPWTM2_BASE + GPWTM_TW_GPTMTnR_LOW_OFFSET )))
#define GPWTM2_TW_GPTMTnR_LOW_R                (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TW_GPTMTnR_LOW_OFFSET)))

/* GPWTM3 GPTMTAR*/
#define GPWTM3_BITBANDING_GPTMTAR              (((BITBANDING_GPTMTAR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAR_OFFSET)*32))))
#define GPWTM3_GPTMTAR                         (((GPTMTAR_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMTAR_OFFSET )))
#define GPWTM3_GPTMTAR_R                       (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMTAR_OFFSET)))

#define GPWTM3_BITBANDING_TA_GPTMTnR           (((BITBANDING_TA_GPTMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnR_OFFSET)*32))))
#define GPWTM3_TA_GPTMTnR                      (((TA_GPTMR_TypeDef*)(GPWTM3_BASE + GPWTM_TA_GPTMTnR_OFFSET )))
#define GPWTM3_TA_GPTMTnR_R                    (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TA_GPTMTnR_OFFSET)))

#define GPWTM3_BITBANDING_TW_GPTMTnR_LOW       (((BITBANDING_TW_GPWTMR_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnR_LOW_OFFSET)*32))))
#define GPWTM3_TW_GPTMTnR_LOW                  (((TW_GPWTMR_LOW_TypeDef*)(GPWTM3_BASE + GPWTM_TW_GPTMTnR_LOW_OFFSET )))
#define GPWTM3_TW_GPTMTnR_LOW_R                (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TW_GPTMTnR_LOW_OFFSET)))

/* GPWTM4 GPTMTAR*/
#define GPWTM4_BITBANDING_GPTMTAR              (((BITBANDING_GPTMTAR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAR_OFFSET)*32))))
#define GPWTM4_GPTMTAR                         (((GPTMTAR_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMTAR_OFFSET )))
#define GPWTM4_GPTMTAR_R                       (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMTAR_OFFSET)))

#define GPWTM4_BITBANDING_TA_GPTMTnR           (((BITBANDING_TA_GPTMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnR_OFFSET)*32))))
#define GPWTM4_TA_GPTMTnR                      (((TA_GPTMR_TypeDef*)(GPWTM4_BASE + GPWTM_TA_GPTMTnR_OFFSET )))
#define GPWTM4_TA_GPTMTnR_R                    (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TA_GPTMTnR_OFFSET)))

#define GPWTM4_BITBANDING_TW_GPTMTnR_LOW       (((BITBANDING_TW_GPWTMR_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnR_LOW_OFFSET)*32))))
#define GPWTM4_TW_GPTMTnR_LOW                  (((TW_GPWTMR_LOW_TypeDef*)(GPWTM4_BASE + GPWTM_TW_GPTMTnR_LOW_OFFSET )))
#define GPWTM4_TW_GPTMTnR_LOW_R                (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TW_GPTMTnR_LOW_OFFSET)))

/* GPWTM5 GPTMTAR*/
#define GPWTM5_BITBANDING_GPTMTAR              (((BITBANDING_GPTMTAR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAR_OFFSET)*32))))
#define GPWTM5_GPTMTAR                         (((GPTMTAR_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMTAR_OFFSET )))
#define GPWTM5_GPTMTAR_R                       (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMTAR_OFFSET)))

#define GPWTM5_BITBANDING_TA_GPTMTnR           (((BITBANDING_TA_GPTMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnR_OFFSET)*32))))
#define GPWTM5_TA_GPTMTnR                      (((TA_GPTMR_TypeDef*)(GPWTM5_BASE + GPWTM_TA_GPTMTnR_OFFSET )))
#define GPWTM5_TA_GPTMTnR_R                    (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TA_GPTMTnR_OFFSET)))

#define GPWTM5_BITBANDING_TW_GPTMTnR_LOW       (((BITBANDING_TW_GPWTMR_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnR_LOW_OFFSET)*32))))
#define GPWTM5_TW_GPTMTnR_LOW                  (((TW_GPWTMR_LOW_TypeDef*)(GPWTM5_BASE + GPWTM_TW_GPTMTnR_LOW_OFFSET )))
#define GPWTM5_TW_GPTMTnR_LOW_R                (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TW_GPTMTnR_LOW_OFFSET)))

//--------
#define GPTM_GPTMTAR_R_TAR_MASK                 (0xFFFFFFFF)
#define GPTM_GPTMTAR_R_TAR_BIT                  (0)

#define GPTM_GPTMTAR_TAR_MASK                   (0xFFFFFFFF)
//--------

//--------
#define GPTM_TA_GPTMTnR_R_TnR_MASK              (0x0000FFFF)
#define GPTM_TA_GPTMTnR_R_TnR_BIT               (0)

#define GPTM_TA_GPTMTnR_TnR_MASK                (0x0000FFFF)
//--------

//--------
#define GPTM_TW_GPTMTnR_R_TnR_MASK              (0xFFFFFFFF)
#define GPTM_TW_GPTMTnR_R_TnR_BIT               (0)

#define GPTM_TW_GPTMTnR_TnR_MASK                (0xFFFFFFFF)
//--------

//--------
#define GPWTM_GPTMTAR_R_TAR_MASK                (0xFFFFFFFF)
#define GPWTM_GPTMTAR_R_TAR_BIT                 (0)

#define GPWTM_GPTMTAR_TAR_MASK                  (0xFFFFFFFF)
//--------

//--------
#define GPWTM_TA_GPTMTnR_R_TnR_MASK             (0xFFFFFFFF)
#define GPWTM_TA_GPTMTnR_R_TnR_BIT              (0)

#define GPWTM_TA_GPTMTnR_TnR_MASK               (0xFFFFFFFF)
//--------

//--------
#define GPWTM_TW_GPTMTnR_LOW_R_TnR_LOW_MASK     (0xFFFFFFFF)
#define GPWTM_TW_GPTMTnR_LOW_R_TnR_LOW_BIT      (0)

#define GPWTM_TW_GPTMTnR_LOW_TnR_LOW_MASK       (0xFFFFFFFF)
//--------

/******************************************************************************************
************************************ 19 GPTMTBR *********************************************
******************************************************************************************/

/* GPTM0 GPTMTBR*/
#define GPTM0_BITBANDING_GPTMTBR               (((BITBANDING_GPTMTBR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBR_OFFSET)*32))))
#define GPTM0_GPTMTBR                          (((GPTMTBR_TypeDef*)(GPTM0_BASE + GPTM_GPTMTBR_OFFSET )))
#define GPTM0_GPTMTBR_R                        (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMTBR_OFFSET)))

#define GPTM0_BITBANDING_TB_GPTMTnR            (((BITBANDING_TB_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnR_OFFSET)*32))))
#define GPTM0_TB_GPTMTnR                       (((TB_GPTMR_TypeDef*)(GPTM0_BASE + GPTM_TB_GPTMTnR_OFFSET )))
#define GPTM0_TB_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TB_GPTMTnR_OFFSET)))

#define GPTM0_BITBANDING_TW_GPTMTnR            (((BITBANDING_TW_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnR_OFFSET)*32))))
#define GPTM0_TW_GPTMTnR                       (((TW_GPTMR_TypeDef*)(GPTM0_BASE + GPTM_TW_GPTMTnR_OFFSET )))
#define GPTM0_TW_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TW_GPTMTnR_OFFSET)))

/* GPTM1 GPTMTBR*/
#define GPTM1_BITBANDING_GPTMTBR               (((BITBANDING_GPTMTBR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBR_OFFSET)*32))))
#define GPTM1_GPTMTBR                          (((GPTMTBR_TypeDef*)(GPTM1_BASE + GPTM_GPTMTBR_OFFSET )))
#define GPTM1_GPTMTBR_R                        (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMTBR_OFFSET)))

#define GPTM1_BITBANDING_TB_GPTMTnR            (((BITBANDING_TB_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnR_OFFSET)*32))))
#define GPTM1_TB_GPTMTnR                       (((TB_GPTMR_TypeDef*)(GPTM1_BASE + GPTM_TB_GPTMTnR_OFFSET )))
#define GPTM1_TB_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TB_GPTMTnR_OFFSET)))

#define GPTM1_BITBANDING_TW_GPTMTnR            (((BITBANDING_TW_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnR_OFFSET)*32))))
#define GPTM1_TW_GPTMTnR                       (((TW_GPTMR_TypeDef*)(GPTM1_BASE + GPTM_TW_GPTMTnR_OFFSET )))
#define GPTM1_TW_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TW_GPTMTnR_OFFSET)))

/* GPTM2 GPTMTBR*/
#define GPTM2_BITBANDING_GPTMTBR               (((BITBANDING_GPTMTBR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBR_OFFSET)*32))))
#define GPTM2_GPTMTBR                          (((GPTMTBR_TypeDef*)(GPTM2_BASE + GPTM_GPTMTBR_OFFSET )))
#define GPTM2_GPTMTBR_R                        (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMTBR_OFFSET)))

#define GPTM2_BITBANDING_TB_GPTMTnR            (((BITBANDING_TB_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnR_OFFSET)*32))))
#define GPTM2_TB_GPTMTnR                       (((TB_GPTMR_TypeDef*)(GPTM2_BASE + GPTM_TB_GPTMTnR_OFFSET )))
#define GPTM2_TB_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TB_GPTMTnR_OFFSET)))

#define GPTM2_BITBANDING_TW_GPTMTnR            (((BITBANDING_TW_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnR_OFFSET)*32))))
#define GPTM2_TW_GPTMTnR                       (((TW_GPTMR_TypeDef*)(GPTM2_BASE + GPTM_TW_GPTMTnR_OFFSET )))
#define GPTM2_TW_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TW_GPTMTnR_OFFSET)))

/* GPTM3 GPTMTBR*/
#define GPTM3_BITBANDING_GPTMTBR               (((BITBANDING_GPTMTBR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBR_OFFSET)*32))))
#define GPTM3_GPTMTBR                          (((GPTMTBR_TypeDef*)(GPTM3_BASE + GPTM_GPTMTBR_OFFSET )))
#define GPTM3_GPTMTBR_R                        (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMTBR_OFFSET)))

#define GPTM3_BITBANDING_TB_GPTMTnR            (((BITBANDING_TB_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnR_OFFSET)*32))))
#define GPTM3_TB_GPTMTnR                       (((TB_GPTMR_TypeDef*)(GPTM3_BASE + GPTM_TB_GPTMTnR_OFFSET )))
#define GPTM3_TB_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TB_GPTMTnR_OFFSET)))

#define GPTM3_BITBANDING_TW_GPTMTnR            (((BITBANDING_TW_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnR_OFFSET)*32))))
#define GPTM3_TW_GPTMTnR                       (((TW_GPTMR_TypeDef*)(GPTM3_BASE + GPTM_TW_GPTMTnR_OFFSET )))
#define GPTM3_TW_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TW_GPTMTnR_OFFSET)))

/* GPTM4 GPTMTBR*/
#define GPTM4_BITBANDING_GPTMTBR               (((BITBANDING_GPTMTBR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBR_OFFSET)*32))))
#define GPTM4_GPTMTBR                          (((GPTMTBR_TypeDef*)(GPTM4_BASE + GPTM_GPTMTBR_OFFSET )))
#define GPTM4_GPTMTBR_R                        (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMTBR_OFFSET)))

#define GPTM4_BITBANDING_TB_GPTMTnR            (((BITBANDING_TB_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnR_OFFSET)*32))))
#define GPTM4_TB_GPTMTnR                       (((TB_GPTMR_TypeDef*)(GPTM4_BASE + GPTM_TB_GPTMTnR_OFFSET )))
#define GPTM4_TB_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TB_GPTMTnR_OFFSET)))

#define GPTM4_BITBANDING_TW_GPTMTnR            (((BITBANDING_TW_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnR_OFFSET)*32))))
#define GPTM4_TW_GPTMTnR                       (((TW_GPTMR_TypeDef*)(GPTM4_BASE + GPTM_TW_GPTMTnR_OFFSET )))
#define GPTM4_TW_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TW_GPTMTnR_OFFSET)))

/* GPTM5 GPTMTBR*/
#define GPTM5_BITBANDING_GPTMTBR               (((BITBANDING_GPTMTBR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBR_OFFSET)*32))))
#define GPTM5_GPTMTBR                          (((GPTMTBR_TypeDef*)(GPTM5_BASE + GPTM_GPTMTBR_OFFSET )))
#define GPTM5_GPTMTBR_R                        (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMTBR_OFFSET)))

#define GPTM5_BITBANDING_TB_GPTMTnR            (((BITBANDING_TB_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnR_OFFSET)*32))))
#define GPTM5_TB_GPTMTnR                       (((TB_GPTMR_TypeDef*)(GPTM5_BASE + GPTM_TB_GPTMTnR_OFFSET )))
#define GPTM5_TB_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TB_GPTMTnR_OFFSET)))

#define GPTM5_BITBANDING_TW_GPTMTnR            (((BITBANDING_TW_GPTMR_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnR_OFFSET)*32))))
#define GPTM5_TW_GPTMTnR                       (((TW_GPTMR_TypeDef*)(GPTM5_BASE + GPTM_TW_GPTMTnR_OFFSET )))
#define GPTM5_TW_GPTMTnR_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TW_GPTMTnR_OFFSET)))

/* GPWTM0 GPTMTBR*/
#define GPWTM0_BITBANDING_GPTMTBR              (((BITBANDING_GPTMTBR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBR_OFFSET)*32))))
#define GPWTM0_GPTMTBR                         (((GPTMTBR_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMTBR_OFFSET )))
#define GPWTM0_GPTMTBR_R                       (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMTBR_OFFSET)))

#define GPWTM0_BITBANDING_TB_GPTMTnR           (((BITBANDING_TB_GPTMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnR_OFFSET)*32))))
#define GPWTM0_TB_GPTMTnR                      (((TB_GPTMR_TypeDef*)(GPWTM0_BASE + GPWTM_TB_GPTMTnR_OFFSET )))
#define GPWTM0_TB_GPTMTnR_R                    (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TB_GPTMTnR_OFFSET)))

#define GPWTM0_BITBANDING_TW_GPTMTnR_HIGH      (((BITBANDING_TW_GPWTMR_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnR_HIGH_OFFSET)*32))))
#define GPWTM0_TW_GPTMTnR_HIGH                 (((TW_GPWTMR_HIGH_TypeDef*)(GPWTM0_BASE + GPWTM_TW_GPTMTnR_HIGH_OFFSET )))
#define GPWTM0_TW_GPTMTnR_HIGH_R               (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TW_GPTMTnR_HIGH_OFFSET)))

/* GPWTM1 GPTMTBR*/
#define GPWTM1_BITBANDING_GPTMTBR              (((BITBANDING_GPTMTBR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBR_OFFSET)*32))))
#define GPWTM1_GPTMTBR                         (((GPTMTBR_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMTBR_OFFSET )))
#define GPWTM1_GPTMTBR_R                       (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMTBR_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnR           (((BITBANDING_TB_GPTMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnR_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnR                      (((TB_GPTMR_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnR_OFFSET )))
#define GPWTM1_TB_GPTMTnR_R                    (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnR_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnR_HIGH      (((BITBANDING_TW_GPWTMR_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnR_HIGH_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnR_HIGH                 (((TW_GPWTMR_HIGH_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnR_HIGH_OFFSET )))
#define GPWTM1_TW_GPTMTnR_HIGH_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnR_HIGH_OFFSET)))

/* GPWTM2 GPTMTBR*/
#define GPWTM2_BITBANDING_GPTMTBR              (((BITBANDING_GPTMTBR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBR_OFFSET)*32))))
#define GPWTM2_GPTMTBR                         (((GPTMTBR_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMTBR_OFFSET )))
#define GPWTM2_GPTMTBR_R                       (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMTBR_OFFSET)))

#define GPWTM2_BITBANDING_TB_GPTMTnR           (((BITBANDING_TB_GPTMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnR_OFFSET)*32))))
#define GPWTM2_TB_GPTMTnR                      (((TB_GPTMR_TypeDef*)(GPWTM2_BASE + GPWTM_TB_GPTMTnR_OFFSET )))
#define GPWTM2_TB_GPTMTnR_R                    (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TB_GPTMTnR_OFFSET)))

#define GPWTM2_BITBANDING_TW_GPTMTnR_HIGH      (((BITBANDING_TW_GPWTMR_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnR_HIGH_OFFSET)*32))))
#define GPWTM2_TW_GPTMTnR_HIGH                 (((TW_GPWTMR_HIGH_TypeDef*)(GPWTM2_BASE + GPWTM_TW_GPTMTnR_HIGH_OFFSET )))
#define GPWTM2_TW_GPTMTnR_HIGH_R               (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TW_GPTMTnR_HIGH_OFFSET)))

/* GPWTM3 GPTMTBR*/
#define GPWTM3_BITBANDING_GPTMTBR              (((BITBANDING_GPTMTBR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBR_OFFSET)*32))))
#define GPWTM3_GPTMTBR                         (((GPTMTBR_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMTBR_OFFSET )))
#define GPWTM3_GPTMTBR_R                       (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMTBR_OFFSET)))

#define GPWTM3_BITBANDING_TB_GPTMTnR           (((BITBANDING_TB_GPTMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnR_OFFSET)*32))))
#define GPWTM3_TB_GPTMTnR                      (((TB_GPTMR_TypeDef*)(GPWTM3_BASE + GPWTM_TB_GPTMTnR_OFFSET )))
#define GPWTM3_TB_GPTMTnR_R                    (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TB_GPTMTnR_OFFSET)))

#define GPWTM3_BITBANDING_TW_GPTMTnR_HIGH      (((BITBANDING_TW_GPWTMR_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnR_HIGH_OFFSET)*32))))
#define GPWTM3_TW_GPTMTnR_HIGH                 (((TW_GPWTMR_HIGH_TypeDef*)(GPWTM3_BASE + GPWTM_TW_GPTMTnR_HIGH_OFFSET )))
#define GPWTM3_TW_GPTMTnR_HIGH_R               (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TW_GPTMTnR_HIGH_OFFSET)))

/* GPWTM4 GPTMTBR*/
#define GPWTM4_BITBANDING_GPTMTBR              (((BITBANDING_GPTMTBR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBR_OFFSET)*32))))
#define GPWTM4_GPTMTBR                         (((GPTMTBR_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMTBR_OFFSET )))
#define GPWTM4_GPTMTBR_R                       (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMTBR_OFFSET)))

#define GPWTM4_BITBANDING_TB_GPTMTnR           (((BITBANDING_TB_GPTMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnR_OFFSET)*32))))
#define GPWTM4_TB_GPTMTnR                      (((TB_GPTMR_TypeDef*)(GPWTM4_BASE + GPWTM_TB_GPTMTnR_OFFSET )))
#define GPWTM4_TB_GPTMTnR_R                    (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TB_GPTMTnR_OFFSET)))

#define GPWTM4_BITBANDING_TW_GPTMTnR_HIGH      (((BITBANDING_TW_GPWTMR_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnR_HIGH_OFFSET)*32))))
#define GPWTM4_TW_GPTMTnR_HIGH                 (((TW_GPWTMR_HIGH_TypeDef*)(GPWTM4_BASE + GPWTM_TW_GPTMTnR_HIGH_OFFSET )))
#define GPWTM4_TW_GPTMTnR_HIGH_R               (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TW_GPTMTnR_HIGH_OFFSET)))

/* GPWTM5 GPTMTBR*/
#define GPWTM5_BITBANDING_GPTMTBR              (((BITBANDING_GPTMTBR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBR_OFFSET)*32))))
#define GPWTM5_GPTMTBR                         (((GPTMTBR_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMTBR_OFFSET )))
#define GPWTM5_GPTMTBR_R                       (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMTBR_OFFSET)))

#define GPWTM5_BITBANDING_TB_GPTMTnR           (((BITBANDING_TB_GPTMR_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnR_OFFSET)*32))))
#define GPWTM5_TB_GPTMTnR                      (((TB_GPTMR_TypeDef*)(GPWTM5_BASE + GPWTM_TB_GPTMTnR_OFFSET )))
#define GPWTM5_TB_GPTMTnR_R                    (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TB_GPTMTnR_OFFSET)))

#define GPWTM5_BITBANDING_TW_GPTMTnR_HIGH      (((BITBANDING_TW_GPWTMR_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnR_HIGH_OFFSET)*32))))
#define GPWTM5_TW_GPTMTnR_HIGH                 (((TW_GPWTMR_HIGH_TypeDef*)(GPWTM5_BASE + GPWTM_TW_GPTMTnR_HIGH_OFFSET )))
#define GPWTM5_TW_GPTMTnR_HIGH_R               (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TW_GPTMTnR_HIGH_OFFSET)))

//--------
#define GPTM_GPTMTBR_R_TBR_MASK                 (0xFFFFFFFF)
#define GPTM_GPTMTBR_R_TBR_BIT                  (0)

#define GPTM_GPTMTBR_TBR_MASK                   (0xFFFFFFFF)
//--------

//--------
#define GPTM_TB_GPTMTnR_R_TnR_MASK              (0x0000FFFF)
#define GPTM_TB_GPTMTnR_R_TnR_BIT               (0)

#define GPTM_TB_GPTMTnR_TnR_MASK                (0x0000FFFF)
//--------

//--------
#define GPTM_TW_GPTMTnR_R_TnR_MASK              (0xFFFFFFFF)
#define GPTM_TW_GPTMTnR_R_TnR_BIT               (0)

#define GPTM_TW_GPTMTnR_TnR_MASK                (0xFFFFFFFF)
//--------

//--------
#define GPWTM_GPTMTBR_R_TBR_MASK                (0xFFFFFFFF)
#define GPWTM_GPTMTBR_R_TBR_BIT                 (0)

#define GPWTM_GPTMTBR_TBR_MASK                  (0xFFFFFFFF)
//--------

//--------
#define GPWTM_TB_GPTMTnR_R_TnR_MASK             (0xFFFFFFFF)
#define GPWTM_TB_GPTMTnR_R_TnR_BIT              (0)

#define GPWTM_TB_GPTMTnR_TnR_MASK               (0xFFFFFFFF)
//--------

//--------
#define GPWTM_TW_GPTMTnR_HIGH_R_TnR_HIGH_MASK   (0xFFFFFFFF)
#define GPWTM_TW_GPTMTnR_HIGH_R_TnR_HIGH_BIT    (0)

#define GPWTM_TW_GPTMTnR_HIGH_TnR_HIGH_MASK     (0xFFFFFFFF)
//--------


/******************************************************************************************
************************************ 20 GPTMTAV *********************************************
******************************************************************************************/

/* GPTM0 GPTMTAV*/
#define GPTM0_BITBANDING_GPTMTAV               (((BITBANDING_GPTMTAV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAV_OFFSET)*32))))
#define GPTM0_GPTMTAV                          (((GPTMTAV_TypeDef*)(GPTM0_BASE + GPTM_GPTMTAV_OFFSET )))
#define GPTM0_GPTMTAV_R                        (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMTAV_OFFSET)))

#define GPTM0_BITBANDING_TA_GPTMTnV            (((BITBANDING_TA_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnV_OFFSET)*32))))
#define GPTM0_TA_GPTMTnV                       (((TA_GPTMV_TypeDef*)(GPTM0_BASE + GPTM_TA_GPTMTnV_OFFSET )))
#define GPTM0_TA_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TA_GPTMTnV_OFFSET)))

#define GPTM0_BITBANDING_TW_GPTMTnV            (((BITBANDING_TW_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnV_OFFSET)*32))))
#define GPTM0_TW_GPTMTnV                       (((TW_GPTMV_TypeDef*)(GPTM0_BASE + GPTM_TW_GPTMTnV_OFFSET )))
#define GPTM0_TW_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TW_GPTMTnV_OFFSET)))

/* GPTM1 GPTMTAV*/
#define GPTM1_BITBANDING_GPTMTAV               (((BITBANDING_GPTMTAV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAV_OFFSET)*32))))
#define GPTM1_GPTMTAV                          (((GPTMTAV_TypeDef*)(GPTM1_BASE + GPTM_GPTMTAV_OFFSET )))
#define GPTM1_GPTMTAV_R                        (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMTAV_OFFSET)))

#define GPTM1_BITBANDING_TA_GPTMTnV            (((BITBANDING_TA_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnV_OFFSET)*32))))
#define GPTM1_TA_GPTMTnV                       (((TA_GPTMV_TypeDef*)(GPTM1_BASE + GPTM_TA_GPTMTnV_OFFSET )))
#define GPTM1_TA_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TA_GPTMTnV_OFFSET)))

#define GPTM1_BITBANDING_TW_GPTMTnV            (((BITBANDING_TW_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnV_OFFSET)*32))))
#define GPTM1_TW_GPTMTnV                       (((TW_GPTMV_TypeDef*)(GPTM1_BASE + GPTM_TW_GPTMTnV_OFFSET )))
#define GPTM1_TW_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TW_GPTMTnV_OFFSET)))

/* GPTM2 GPTMTAV*/
#define GPTM2_BITBANDING_GPTMTAV               (((BITBANDING_GPTMTAV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAV_OFFSET)*32))))
#define GPTM2_GPTMTAV                          (((GPTMTAV_TypeDef*)(GPTM2_BASE + GPTM_GPTMTAV_OFFSET )))
#define GPTM2_GPTMTAV_R                        (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMTAV_OFFSET)))

#define GPTM2_BITBANDING_TA_GPTMTnV            (((BITBANDING_TA_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnV_OFFSET)*32))))
#define GPTM2_TA_GPTMTnV                       (((TA_GPTMV_TypeDef*)(GPTM2_BASE + GPTM_TA_GPTMTnV_OFFSET )))
#define GPTM2_TA_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TA_GPTMTnV_OFFSET)))

#define GPTM2_BITBANDING_TW_GPTMTnV            (((BITBANDING_TW_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnV_OFFSET)*32))))
#define GPTM2_TW_GPTMTnV                       (((TW_GPTMV_TypeDef*)(GPTM2_BASE + GPTM_TW_GPTMTnV_OFFSET )))
#define GPTM2_TW_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TW_GPTMTnV_OFFSET)))

/* GPTM3 GPTMTAV*/
#define GPTM3_BITBANDING_GPTMTAV               (((BITBANDING_GPTMTAV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAV_OFFSET)*32))))
#define GPTM3_GPTMTAV                          (((GPTMTAV_TypeDef*)(GPTM3_BASE + GPTM_GPTMTAV_OFFSET )))
#define GPTM3_GPTMTAV_R                        (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMTAV_OFFSET)))

#define GPTM3_BITBANDING_TA_GPTMTnV            (((BITBANDING_TA_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnV_OFFSET)*32))))
#define GPTM3_TA_GPTMTnV                       (((TA_GPTMV_TypeDef*)(GPTM3_BASE + GPTM_TA_GPTMTnV_OFFSET )))
#define GPTM3_TA_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TA_GPTMTnV_OFFSET)))

#define GPTM3_BITBANDING_TW_GPTMTnV            (((BITBANDING_TW_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnV_OFFSET)*32))))
#define GPTM3_TW_GPTMTnV                       (((TW_GPTMV_TypeDef*)(GPTM3_BASE + GPTM_TW_GPTMTnV_OFFSET )))
#define GPTM3_TW_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TW_GPTMTnV_OFFSET)))

/* GPTM4 GPTMTAV*/
#define GPTM4_BITBANDING_GPTMTAV               (((BITBANDING_GPTMTAV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAV_OFFSET)*32))))
#define GPTM4_GPTMTAV                          (((GPTMTAV_TypeDef*)(GPTM4_BASE + GPTM_GPTMTAV_OFFSET )))
#define GPTM4_GPTMTAV_R                        (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMTAV_OFFSET)))

#define GPTM4_BITBANDING_TA_GPTMTnV            (((BITBANDING_TA_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnV_OFFSET)*32))))
#define GPTM4_TA_GPTMTnV                       (((TA_GPTMV_TypeDef*)(GPTM4_BASE + GPTM_TA_GPTMTnV_OFFSET )))
#define GPTM4_TA_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TA_GPTMTnV_OFFSET)))

#define GPTM4_BITBANDING_TW_GPTMTnV            (((BITBANDING_TW_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnV_OFFSET)*32))))
#define GPTM4_TW_GPTMTnV                       (((TW_GPTMV_TypeDef*)(GPTM4_BASE + GPTM_TW_GPTMTnV_OFFSET )))
#define GPTM4_TW_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TW_GPTMTnV_OFFSET)))

/* GPTM5 GPTMTAV*/
#define GPTM5_BITBANDING_GPTMTAV               (((BITBANDING_GPTMTAV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAV_OFFSET)*32))))
#define GPTM5_GPTMTAV                          (((GPTMTAV_TypeDef*)(GPTM5_BASE + GPTM_GPTMTAV_OFFSET )))
#define GPTM5_GPTMTAV_R                        (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMTAV_OFFSET)))

#define GPTM5_BITBANDING_TA_GPTMTnV            (((BITBANDING_TA_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnV_OFFSET)*32))))
#define GPTM5_TA_GPTMTnV                       (((TA_GPTMV_TypeDef*)(GPTM5_BASE + GPTM_TA_GPTMTnV_OFFSET )))
#define GPTM5_TA_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TA_GPTMTnV_OFFSET)))

#define GPTM5_BITBANDING_TW_GPTMTnV            (((BITBANDING_TW_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnV_OFFSET)*32))))
#define GPTM5_TW_GPTMTnV                       (((TW_GPTMV_TypeDef*)(GPTM5_BASE + GPTM_TW_GPTMTnV_OFFSET )))
#define GPTM5_TW_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TW_GPTMTnV_OFFSET)))

/* GPWTM0 GPTMTAV*/
#define GPWTM0_BITBANDING_GPTMTAV              (((BITBANDING_GPTMTAV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAV_OFFSET)*32))))
#define GPWTM0_GPTMTAV                         (((GPTMTAV_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMTAV_OFFSET )))
#define GPWTM0_GPTMTAV_R                       (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMTAV_OFFSET)))

#define GPWTM0_BITBANDING_TA_GPTMTnV           (((BITBANDING_TA_GPTMV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnV_OFFSET)*32))))
#define GPWTM0_TA_GPTMTnV                      (((TA_GPTMV_TypeDef*)(GPWTM0_BASE + GPWTM_TA_GPTMTnV_OFFSET )))
#define GPWTM0_TA_GPTMTnV_R                    (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TA_GPTMTnV_OFFSET)))

#define GPWTM0_BITBANDING_TW_GPTMTnV_LOW       (((BITBANDING_TW_GPWTMV_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnV_LOW_OFFSET)*32))))
#define GPWTM0_TW_GPTMTnV_LOW                  (((TW_GPWTMV_LOW_TypeDef*)(GPWTM0_BASE + GPWTM_TW_GPTMTnV_LOW_OFFSET )))
#define GPWTM0_TW_GPTMTnV_LOW_R                (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TW_GPTMTnV_LOW_OFFSET)))

/* GPWTM1 GPTMTAV*/
#define GPWTM1_BITBANDING_GPTMTAV              (((BITBANDING_GPTMTAV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAV_OFFSET)*32))))
#define GPWTM1_GPTMTAV                         (((GPTMTAV_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMTAV_OFFSET )))
#define GPWTM1_GPTMTAV_R                       (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMTAV_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnV           (((BITBANDING_TA_GPTMV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnV_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnV                      (((TA_GPTMV_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnV_OFFSET )))
#define GPWTM1_TA_GPTMTnV_R                    (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnV_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnV_LOW       (((BITBANDING_TW_GPWTMV_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnV_LOW_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnV_LOW                  (((TW_GPWTMV_LOW_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnV_LOW_OFFSET )))
#define GPWTM1_TW_GPTMTnV_LOW_R                (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnV_LOW_OFFSET)))

/* GPWTM2 GPTMTAV*/
#define GPWTM2_BITBANDING_GPTMTAV              (((BITBANDING_GPTMTAV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAV_OFFSET)*32))))
#define GPWTM2_GPTMTAV                         (((GPTMTAV_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMTAV_OFFSET )))
#define GPWTM2_GPTMTAV_R                       (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMTAV_OFFSET)))

#define GPWTM2_BITBANDING_TA_GPTMTnV           (((BITBANDING_TA_GPTMV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnV_OFFSET)*32))))
#define GPWTM2_TA_GPTMTnV                      (((TA_GPTMV_TypeDef*)(GPWTM2_BASE + GPWTM_TA_GPTMTnV_OFFSET )))
#define GPWTM2_TA_GPTMTnV_R                    (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TA_GPTMTnV_OFFSET)))

#define GPWTM2_BITBANDING_TW_GPTMTnV_LOW       (((BITBANDING_TW_GPWTMV_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnV_LOW_OFFSET)*32))))
#define GPWTM2_TW_GPTMTnV_LOW                  (((TW_GPWTMV_LOW_TypeDef*)(GPWTM2_BASE + GPWTM_TW_GPTMTnV_LOW_OFFSET )))
#define GPWTM2_TW_GPTMTnV_LOW_R                (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TW_GPTMTnV_LOW_OFFSET)))

/* GPWTM3 GPTMTAV*/
#define GPWTM3_BITBANDING_GPTMTAV              (((BITBANDING_GPTMTAV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAV_OFFSET)*32))))
#define GPWTM3_GPTMTAV                         (((GPTMTAV_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMTAV_OFFSET )))
#define GPWTM3_GPTMTAV_R                       (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMTAV_OFFSET)))

#define GPWTM3_BITBANDING_TA_GPTMTnV           (((BITBANDING_TA_GPTMV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnV_OFFSET)*32))))
#define GPWTM3_TA_GPTMTnV                      (((TA_GPTMV_TypeDef*)(GPWTM3_BASE + GPWTM_TA_GPTMTnV_OFFSET )))
#define GPWTM3_TA_GPTMTnV_R                    (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TA_GPTMTnV_OFFSET)))

#define GPWTM3_BITBANDING_TW_GPTMTnV_LOW       (((BITBANDING_TW_GPWTMV_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnV_LOW_OFFSET)*32))))
#define GPWTM3_TW_GPTMTnV_LOW                  (((TW_GPWTMV_LOW_TypeDef*)(GPWTM3_BASE + GPWTM_TW_GPTMTnV_LOW_OFFSET )))
#define GPWTM3_TW_GPTMTnV_LOW_R                (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TW_GPTMTnV_LOW_OFFSET)))

/* GPWTM4 GPTMTAV*/
#define GPWTM4_BITBANDING_GPTMTAV              (((BITBANDING_GPTMTAV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAV_OFFSET)*32))))
#define GPWTM4_GPTMTAV                         (((GPTMTAV_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMTAV_OFFSET )))
#define GPWTM4_GPTMTAV_R                       (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMTAV_OFFSET)))

#define GPWTM4_BITBANDING_TA_GPTMTnV           (((BITBANDING_TA_GPTMV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnV_OFFSET)*32))))
#define GPWTM4_TA_GPTMTnV                      (((TA_GPTMV_TypeDef*)(GPWTM4_BASE + GPWTM_TA_GPTMTnV_OFFSET )))
#define GPWTM4_TA_GPTMTnV_R                    (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TA_GPTMTnV_OFFSET)))

#define GPWTM4_BITBANDING_TW_GPTMTnV_LOW       (((BITBANDING_TW_GPWTMV_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnV_LOW_OFFSET)*32))))
#define GPWTM4_TW_GPTMTnV_LOW                  (((TW_GPWTMV_LOW_TypeDef*)(GPWTM4_BASE + GPWTM_TW_GPTMTnV_LOW_OFFSET )))
#define GPWTM4_TW_GPTMTnV_LOW_R                (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TW_GPTMTnV_LOW_OFFSET)))

/* GPWTM5 GPTMTAV*/
#define GPWTM5_BITBANDING_GPTMTAV              (((BITBANDING_GPTMTAV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAV_OFFSET)*32))))
#define GPWTM5_GPTMTAV                         (((GPTMTAV_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMTAV_OFFSET )))
#define GPWTM5_GPTMTAV_R                       (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMTAV_OFFSET)))

#define GPWTM5_BITBANDING_TA_GPTMTnV           (((BITBANDING_TA_GPTMV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnV_OFFSET)*32))))
#define GPWTM5_TA_GPTMTnV                      (((TA_GPTMV_TypeDef*)(GPWTM5_BASE + GPWTM_TA_GPTMTnV_OFFSET )))
#define GPWTM5_TA_GPTMTnV_R                    (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TA_GPTMTnV_OFFSET)))

#define GPWTM5_BITBANDING_TW_GPTMTnV_LOW       (((BITBANDING_TW_GPWTMV_LOW_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnV_LOW_OFFSET)*32))))
#define GPWTM5_TW_GPTMTnV_LOW                  (((TW_GPWTMV_LOW_TypeDef*)(GPWTM5_BASE + GPWTM_TW_GPTMTnV_LOW_OFFSET )))
#define GPWTM5_TW_GPTMTnV_LOW_R                (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TW_GPTMTnV_LOW_OFFSET)))

//--------
#define GPTM_GPTMTAV_R_TAV_MASK                 (0xFFFFFFFF)
#define GPTM_GPTMTAV_R_TAV_BIT                  (0)

#define GPTM_GPTMTAV_TAV_MASK                   (0xFFFFFFFF)
//--------

//--------
#define GPTM_TA_GPTMTnV_R_TnV_MASK              (0x0000FFFF)
#define GPTM_TA_GPTMTnV_R_TnV_BIT               (0)

#define GPTM_TA_GPTMTnV_TnV_MASK                (0x0000FFFF)
//--------

//--------
#define GPTM_TW_GPTMTnV_R_TnV_MASK              (0xFFFFFFFF)
#define GPTM_TW_GPTMTnV_R_TnV_BIT               (0)

#define GPTM_TW_GPTMTnV_TnV_MASK                (0xFFFFFFFF)
//--------

//--------
#define GPWTM_GPTMTAV_R_TAV_MASK                (0xFFFFFFFF)
#define GPWTM_GPTMTAV_R_TAV_BIT                 (0)

#define GPWTM_GPTMTAV_TAV_MASK                  (0xFFFFFFFF)
//--------

//--------
#define GPWTM_TA_GPTMTnV_R_TnV_MASK             (0xFFFFFFFF)
#define GPWTM_TA_GPTMTnV_R_TnV_BIT              (0)

#define GPWTM_TA_GPTMTnV_TnV_MASK               (0xFFFFFFFF)
//--------

//--------
#define GPWTM_TW_GPTMTnV_LOW_R_TnV_LOW_MASK     (0xFFFFFFFF)
#define GPWTM_TW_GPTMTnV_LOW_R_TnV_LOW_BIT      (0)

#define GPWTM_TW_GPTMTnV_LOW_TnV_LOW_MASK       (0xFFFFFFFF)
//--------



/******************************************************************************************
************************************ 21 GPTMTBV *********************************************
******************************************************************************************/

/* GPTM0 GPTMTBV*/
#define GPTM0_BITBANDING_GPTMTBV               (((BITBANDING_GPTMTBV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBV_OFFSET)*32))))
#define GPTM0_GPTMTBV                          (((GPTMTBV_TypeDef*)(GPTM0_BASE + GPTM_GPTMTBV_OFFSET )))
#define GPTM0_GPTMTBV_R                        (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMTBV_OFFSET)))

#define GPTM0_BITBANDING_TB_GPTMTnV            (((BITBANDING_TB_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnV_OFFSET)*32))))
#define GPTM0_TB_GPTMTnV                       (((TB_GPTMV_TypeDef*)(GPTM0_BASE + GPTM_TB_GPTMTnV_OFFSET )))
#define GPTM0_TB_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TB_GPTMTnV_OFFSET)))

#define GPTM0_BITBANDING_TW_GPTMTnV            (((BITBANDING_TW_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMTnV_OFFSET)*32))))
#define GPTM0_TW_GPTMTnV                       (((TW_GPTMV_TypeDef*)(GPTM0_BASE + GPTM_TW_GPTMTnV_OFFSET )))
#define GPTM0_TW_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TW_GPTMTnV_OFFSET)))

/* GPTM1 GPTMTBV*/
#define GPTM1_BITBANDING_GPTMTBV               (((BITBANDING_GPTMTBV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBV_OFFSET)*32))))
#define GPTM1_GPTMTBV                          (((GPTMTBV_TypeDef*)(GPTM1_BASE + GPTM_GPTMTBV_OFFSET )))
#define GPTM1_GPTMTBV_R                        (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMTBV_OFFSET)))

#define GPTM1_BITBANDING_TB_GPTMTnV            (((BITBANDING_TB_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnV_OFFSET)*32))))
#define GPTM1_TB_GPTMTnV                       (((TB_GPTMV_TypeDef*)(GPTM1_BASE + GPTM_TB_GPTMTnV_OFFSET )))
#define GPTM1_TB_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TB_GPTMTnV_OFFSET)))

#define GPTM1_BITBANDING_TW_GPTMTnV            (((BITBANDING_TW_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMTnV_OFFSET)*32))))
#define GPTM1_TW_GPTMTnV                       (((TW_GPTMV_TypeDef*)(GPTM1_BASE + GPTM_TW_GPTMTnV_OFFSET )))
#define GPTM1_TW_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TW_GPTMTnV_OFFSET)))

/* GPTM2 GPTMTBV*/
#define GPTM2_BITBANDING_GPTMTBV               (((BITBANDING_GPTMTBV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBV_OFFSET)*32))))
#define GPTM2_GPTMTBV                          (((GPTMTBV_TypeDef*)(GPTM2_BASE + GPTM_GPTMTBV_OFFSET )))
#define GPTM2_GPTMTBV_R                        (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMTBV_OFFSET)))

#define GPTM2_BITBANDING_TB_GPTMTnV            (((BITBANDING_TB_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnV_OFFSET)*32))))
#define GPTM2_TB_GPTMTnV                       (((TB_GPTMV_TypeDef*)(GPTM2_BASE + GPTM_TB_GPTMTnV_OFFSET )))
#define GPTM2_TB_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TB_GPTMTnV_OFFSET)))

#define GPTM2_BITBANDING_TW_GPTMTnV            (((BITBANDING_TW_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMTnV_OFFSET)*32))))
#define GPTM2_TW_GPTMTnV                       (((TW_GPTMV_TypeDef*)(GPTM2_BASE + GPTM_TW_GPTMTnV_OFFSET )))
#define GPTM2_TW_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TW_GPTMTnV_OFFSET)))

/* GPTM3 GPTMTBV*/
#define GPTM3_BITBANDING_GPTMTBV               (((BITBANDING_GPTMTBV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBV_OFFSET)*32))))
#define GPTM3_GPTMTBV                          (((GPTMTBV_TypeDef*)(GPTM3_BASE + GPTM_GPTMTBV_OFFSET )))
#define GPTM3_GPTMTBV_R                        (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMTBV_OFFSET)))

#define GPTM3_BITBANDING_TB_GPTMTnV            (((BITBANDING_TB_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnV_OFFSET)*32))))
#define GPTM3_TB_GPTMTnV                       (((TB_GPTMV_TypeDef*)(GPTM3_BASE + GPTM_TB_GPTMTnV_OFFSET )))
#define GPTM3_TB_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TB_GPTMTnV_OFFSET)))

#define GPTM3_BITBANDING_TW_GPTMTnV            (((BITBANDING_TW_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMTnV_OFFSET)*32))))
#define GPTM3_TW_GPTMTnV                       (((TW_GPTMV_TypeDef*)(GPTM3_BASE + GPTM_TW_GPTMTnV_OFFSET )))
#define GPTM3_TW_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TW_GPTMTnV_OFFSET)))

/* GPTM4 GPTMTBV*/
#define GPTM4_BITBANDING_GPTMTBV               (((BITBANDING_GPTMTBV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBV_OFFSET)*32))))
#define GPTM4_GPTMTBV                          (((GPTMTBV_TypeDef*)(GPTM4_BASE + GPTM_GPTMTBV_OFFSET )))
#define GPTM4_GPTMTBV_R                        (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMTBV_OFFSET)))

#define GPTM4_BITBANDING_TB_GPTMTnV            (((BITBANDING_TB_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnV_OFFSET)*32))))
#define GPTM4_TB_GPTMTnV                       (((TB_GPTMV_TypeDef*)(GPTM4_BASE + GPTM_TB_GPTMTnV_OFFSET )))
#define GPTM4_TB_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TB_GPTMTnV_OFFSET)))

#define GPTM4_BITBANDING_TW_GPTMTnV            (((BITBANDING_TW_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMTnV_OFFSET)*32))))
#define GPTM4_TW_GPTMTnV                       (((TW_GPTMV_TypeDef*)(GPTM4_BASE + GPTM_TW_GPTMTnV_OFFSET )))
#define GPTM4_TW_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TW_GPTMTnV_OFFSET)))

/* GPTM5 GPTMTBV*/
#define GPTM5_BITBANDING_GPTMTBV               (((BITBANDING_GPTMTBV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBV_OFFSET)*32))))
#define GPTM5_GPTMTBV                          (((GPTMTBV_TypeDef*)(GPTM5_BASE + GPTM_GPTMTBV_OFFSET )))
#define GPTM5_GPTMTBV_R                        (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMTBV_OFFSET)))

#define GPTM5_BITBANDING_TB_GPTMTnV            (((BITBANDING_TB_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnV_OFFSET)*32))))
#define GPTM5_TB_GPTMTnV                       (((TB_GPTMV_TypeDef*)(GPTM5_BASE + GPTM_TB_GPTMTnV_OFFSET )))
#define GPTM5_TB_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TB_GPTMTnV_OFFSET)))

#define GPTM5_BITBANDING_TW_GPTMTnV            (((BITBANDING_TW_GPTMV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMTnV_OFFSET)*32))))
#define GPTM5_TW_GPTMTnV                       (((TW_GPTMV_TypeDef*)(GPTM5_BASE + GPTM_TW_GPTMTnV_OFFSET )))
#define GPTM5_TW_GPTMTnV_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TW_GPTMTnV_OFFSET)))

/* GPWTM0 GPTMTBV*/
#define GPWTM0_BITBANDING_GPTMTBV              (((BITBANDING_GPTMTBV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBV_OFFSET)*32))))
#define GPWTM0_GPTMTBV                         (((GPTMTBV_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMTBV_OFFSET )))
#define GPWTM0_GPTMTBV_R                       (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMTBV_OFFSET)))

#define GPWTM0_BITBANDING_TB_GPTMTnV           (((BITBANDING_TB_GPTMV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnV_OFFSET)*32))))
#define GPWTM0_TB_GPTMTnV                      (((TB_GPTMV_TypeDef*)(GPWTM0_BASE + GPWTM_TB_GPTMTnV_OFFSET )))
#define GPWTM0_TB_GPTMTnV_R                    (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TB_GPTMTnV_OFFSET)))

#define GPWTM0_BITBANDING_TW_GPTMTnV_HIGH      (((BITBANDING_TW_GPWTMV_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMTnV_HIGH_OFFSET)*32))))
#define GPWTM0_TW_GPTMTnV_HIGH                 (((TW_GPWTMV_HIGH_TypeDef*)(GPWTM0_BASE + GPWTM_TW_GPTMTnV_HIGH_OFFSET )))
#define GPWTM0_TW_GPTMTnV_HIGH_R               (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TW_GPTMTnV_HIGH_OFFSET)))

/* GPWTM1 GPTMTBV*/
#define GPWTM1_BITBANDING_GPTMTBV              (((BITBANDING_GPTMTBV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBV_OFFSET)*32))))
#define GPWTM1_GPTMTBV                         (((GPTMTBV_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMTBV_OFFSET )))
#define GPWTM1_GPTMTBV_R                       (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMTBV_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnV           (((BITBANDING_TB_GPTMV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnV_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnV                      (((TB_GPTMV_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnV_OFFSET )))
#define GPWTM1_TB_GPTMTnV_R                    (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnV_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMTnV_HIGH      (((BITBANDING_TW_GPWTMV_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMTnV_HIGH_OFFSET)*32))))
#define GPWTM1_TW_GPTMTnV_HIGH                 (((TW_GPWTMV_HIGH_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMTnV_HIGH_OFFSET )))
#define GPWTM1_TW_GPTMTnV_HIGH_R               (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMTnV_HIGH_OFFSET)))

/* GPWTM2 GPTMTBV*/
#define GPWTM2_BITBANDING_GPTMTBV              (((BITBANDING_GPTMTBV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBV_OFFSET)*32))))
#define GPWTM2_GPTMTBV                         (((GPTMTBV_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMTBV_OFFSET )))
#define GPWTM2_GPTMTBV_R                       (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMTBV_OFFSET)))

#define GPWTM2_BITBANDING_TB_GPTMTnV           (((BITBANDING_TB_GPTMV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnV_OFFSET)*32))))
#define GPWTM2_TB_GPTMTnV                      (((TB_GPTMV_TypeDef*)(GPWTM2_BASE + GPWTM_TB_GPTMTnV_OFFSET )))
#define GPWTM2_TB_GPTMTnV_R                    (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TB_GPTMTnV_OFFSET)))

#define GPWTM2_BITBANDING_TW_GPTMTnV_HIGH      (((BITBANDING_TW_GPWTMV_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMTnV_HIGH_OFFSET)*32))))
#define GPWTM2_TW_GPTMTnV_HIGH                 (((TW_GPWTMV_HIGH_TypeDef*)(GPWTM2_BASE + GPWTM_TW_GPTMTnV_HIGH_OFFSET )))
#define GPWTM2_TW_GPTMTnV_HIGH_R               (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TW_GPTMTnV_HIGH_OFFSET)))

/* GPWTM3 GPTMTBV*/
#define GPWTM3_BITBANDING_GPTMTBV              (((BITBANDING_GPTMTBV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBV_OFFSET)*32))))
#define GPWTM3_GPTMTBV                         (((GPTMTBV_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMTBV_OFFSET )))
#define GPWTM3_GPTMTBV_R                       (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMTBV_OFFSET)))

#define GPWTM3_BITBANDING_TB_GPTMTnV           (((BITBANDING_TB_GPTMV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnV_OFFSET)*32))))
#define GPWTM3_TB_GPTMTnV                      (((TB_GPTMV_TypeDef*)(GPWTM3_BASE + GPWTM_TB_GPTMTnV_OFFSET )))
#define GPWTM3_TB_GPTMTnV_R                    (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TB_GPTMTnV_OFFSET)))

#define GPWTM3_BITBANDING_TW_GPTMTnV_HIGH      (((BITBANDING_TW_GPWTMV_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMTnV_HIGH_OFFSET)*32))))
#define GPWTM3_TW_GPTMTnV_HIGH                 (((TW_GPWTMV_HIGH_TypeDef*)(GPWTM3_BASE + GPWTM_TW_GPTMTnV_HIGH_OFFSET )))
#define GPWTM3_TW_GPTMTnV_HIGH_R               (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TW_GPTMTnV_HIGH_OFFSET)))

/* GPWTM4 GPTMTBV*/
#define GPWTM4_BITBANDING_GPTMTBV              (((BITBANDING_GPTMTBV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBV_OFFSET)*32))))
#define GPWTM4_GPTMTBV                         (((GPTMTBV_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMTBV_OFFSET )))
#define GPWTM4_GPTMTBV_R                       (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMTBV_OFFSET)))

#define GPWTM4_BITBANDING_TB_GPTMTnV           (((BITBANDING_TB_GPTMV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnV_OFFSET)*32))))
#define GPWTM4_TB_GPTMTnV                      (((TB_GPTMV_TypeDef*)(GPWTM4_BASE + GPWTM_TB_GPTMTnV_OFFSET )))
#define GPWTM4_TB_GPTMTnV_R                    (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TB_GPTMTnV_OFFSET)))

#define GPWTM4_BITBANDING_TW_GPTMTnV_HIGH      (((BITBANDING_TW_GPWTMV_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMTnV_HIGH_OFFSET)*32))))
#define GPWTM4_TW_GPTMTnV_HIGH                 (((TW_GPWTMV_HIGH_TypeDef*)(GPWTM4_BASE + GPWTM_TW_GPTMTnV_HIGH_OFFSET )))
#define GPWTM4_TW_GPTMTnV_HIGH_R               (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TW_GPTMTnV_HIGH_OFFSET)))

/* GPWTM5 GPTMTBV*/
#define GPWTM5_BITBANDING_GPTMTBV              (((BITBANDING_GPTMTBV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBV_OFFSET)*32))))
#define GPWTM5_GPTMTBV                         (((GPTMTBV_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMTBV_OFFSET )))
#define GPWTM5_GPTMTBV_R                       (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMTBV_OFFSET)))

#define GPWTM5_BITBANDING_TB_GPTMTnV           (((BITBANDING_TB_GPTMV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnV_OFFSET)*32))))
#define GPWTM5_TB_GPTMTnV                      (((TB_GPTMV_TypeDef*)(GPWTM5_BASE + GPWTM_TB_GPTMTnV_OFFSET )))
#define GPWTM5_TB_GPTMTnV_R                    (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TB_GPTMTnV_OFFSET)))

#define GPWTM5_BITBANDING_TW_GPTMTnV_HIGH      (((BITBANDING_TW_GPWTMV_HIGH_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMTnV_HIGH_OFFSET)*32))))
#define GPWTM5_TW_GPTMTnV_HIGH                 (((TW_GPWTMV_HIGH_TypeDef*)(GPWTM5_BASE + GPWTM_TW_GPTMTnV_HIGH_OFFSET )))
#define GPWTM5_TW_GPTMTnV_HIGH_R               (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TW_GPTMTnV_HIGH_OFFSET)))

//--------
#define GPTM_GPTMTBV_R_TBV_MASK                 (0xFFFFFFFF)
#define GPTM_GPTMTBV_R_TBV_BIT                  (0)

#define GPTM_GPTMTBV_TBV_MASK                   (0xFFFFFFFF)
//--------

//--------
#define GPTM_TB_GPTMTnV_R_TnV_MASK              (0x0000FFFF)
#define GPTM_TB_GPTMTnV_R_TnV_BIT               (0)

#define GPTM_TB_GPTMTnV_TnV_MASK                (0x0000FFFF)
//--------

//--------
#define GPTM_TW_GPTMTnV_R_TnV_MASK              (0xFFFFFFFF)
#define GPTM_TW_GPTMTnV_R_TnV_BIT               (0)

#define GPTM_TW_GPTMTnV_TnV_MASK                (0xFFFFFFFF)
//--------

//--------
#define GPWTM_GPTMTBV_R_TBV_MASK                (0xFFFFFFFF)
#define GPWTM_GPTMTBV_R_TBV_BIT                 (0)

#define GPWTM_GPTMTBV_TBV_MASK                  (0xFFFFFFFF)
//--------

//--------
#define GPWTM_TB_GPTMTnV_R_TnV_MASK             (0xFFFFFFFF)
#define GPWTM_TB_GPTMTnV_R_TnV_BIT              (0)

#define GPWTM_TB_GPTMTnV_TnV_MASK               (0xFFFFFFFF)
//--------

//--------
#define GPWTM_TW_GPTMTnV_HIGH_R_TnV_HIGH_MASK   (0xFFFFFFFF)
#define GPWTM_TW_GPTMTnV_HIGH_R_TnV_HIGH_BIT    (0)

#define GPWTM_TW_GPTMTnV_HIGH_TnV_HIGH_MASK     (0xFFFFFFFF)
//--------


/******************************************************************************************
************************************ 22 GPTMRTCPD *********************************************
******************************************************************************************/

/* GPTM0 GPTMRTCPD*/
#define GPTM0_BITBANDING_GPTMRTCPD               (((BITBANDING_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMRTCPD_OFFSET)*32))))
#define GPTM0_GPTMRTCPD                          (((GPTMRTCPD_TypeDef*)(GPTM0_BASE + GPTM_GPTMRTCPD_OFFSET )))
#define GPTM0_GPTMRTCPD_R                        (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMRTCPD_OFFSET)))

#define GPTM0_BITBANDING_TW_GPTMRTCPD            (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPTM0_TW_GPTMRTCPD                       (((TW_GPTMRTCPD_TypeDef*)(GPTM0_BASE + GPTM_TW_GPTMRTCPD_OFFSET )))
#define GPTM0_TW_GPTMRTCPD_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TW_GPTMRTCPD_OFFSET)))

/* GPTM1 GPTMRTCPD*/
#define GPTM1_BITBANDING_GPTMRTCPD               (((BITBANDING_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMRTCPD_OFFSET)*32))))
#define GPTM1_GPTMRTCPD                          (((GPTMRTCPD_TypeDef*)(GPTM1_BASE + GPTM_GPTMRTCPD_OFFSET )))
#define GPTM1_GPTMRTCPD_R                        (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMRTCPD_OFFSET)))

#define GPTM1_BITBANDING_TW_GPTMRTCPD            (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPTM1_TW_GPTMRTCPD                       (((TW_GPTMRTCPD_TypeDef*)(GPTM1_BASE + GPTM_TW_GPTMRTCPD_OFFSET )))
#define GPTM1_TW_GPTMRTCPD_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TW_GPTMRTCPD_OFFSET)))

/* GPTM2 GPTMRTCPD*/
#define GPTM2_BITBANDING_GPTMRTCPD               (((BITBANDING_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMRTCPD_OFFSET)*32))))
#define GPTM2_GPTMRTCPD                          (((GPTMRTCPD_TypeDef*)(GPTM2_BASE + GPTM_GPTMRTCPD_OFFSET )))
#define GPTM2_GPTMRTCPD_R                        (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMRTCPD_OFFSET)))

#define GPTM2_BITBANDING_TW_GPTMRTCPD            (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPTM2_TW_GPTMRTCPD                       (((TW_GPTMRTCPD_TypeDef*)(GPTM2_BASE + GPTM_TW_GPTMRTCPD_OFFSET )))
#define GPTM2_TW_GPTMRTCPD_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TW_GPTMRTCPD_OFFSET)))

/* GPTM3 GPTMRTCPD*/
#define GPTM3_BITBANDING_GPTMRTCPD               (((BITBANDING_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMRTCPD_OFFSET)*32))))
#define GPTM3_GPTMRTCPD                          (((GPTMRTCPD_TypeDef*)(GPTM3_BASE + GPTM_GPTMRTCPD_OFFSET )))
#define GPTM3_GPTMRTCPD_R                        (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMRTCPD_OFFSET)))

#define GPTM3_BITBANDING_TW_GPTMRTCPD            (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPTM3_TW_GPTMRTCPD                       (((TW_GPTMRTCPD_TypeDef*)(GPTM3_BASE + GPTM_TW_GPTMRTCPD_OFFSET )))
#define GPTM3_TW_GPTMRTCPD_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TW_GPTMRTCPD_OFFSET)))

/* GPTM4 GPTMRTCPD*/
#define GPTM4_BITBANDING_GPTMRTCPD               (((BITBANDING_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMRTCPD_OFFSET)*32))))
#define GPTM4_GPTMRTCPD                          (((GPTMRTCPD_TypeDef*)(GPTM4_BASE + GPTM_GPTMRTCPD_OFFSET )))
#define GPTM4_GPTMRTCPD_R                        (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMRTCPD_OFFSET)))

#define GPTM4_BITBANDING_TW_GPTMRTCPD            (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPTM4_TW_GPTMRTCPD                       (((TW_GPTMRTCPD_TypeDef*)(GPTM4_BASE + GPTM_TW_GPTMRTCPD_OFFSET )))
#define GPTM4_TW_GPTMRTCPD_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TW_GPTMRTCPD_OFFSET)))

/* GPTM5 GPTMRTCPD*/
#define GPTM5_BITBANDING_GPTMRTCPD               (((BITBANDING_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMRTCPD_OFFSET)*32))))
#define GPTM5_GPTMRTCPD                          (((GPTMRTCPD_TypeDef*)(GPTM5_BASE + GPTM_GPTMRTCPD_OFFSET )))
#define GPTM5_GPTMRTCPD_R                        (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMRTCPD_OFFSET)))

#define GPTM5_BITBANDING_TW_GPTMRTCPD            (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPTM5_TW_GPTMRTCPD                       (((TW_GPTMRTCPD_TypeDef*)(GPTM5_BASE + GPTM_TW_GPTMRTCPD_OFFSET )))
#define GPTM5_TW_GPTMRTCPD_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TW_GPTMRTCPD_OFFSET)))

/* GPWTM0 GPTMRTCPD*/
#define GPWTM0_BITBANDING_GPTMRTCPD              (((BITBANDING_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMRTCPD_OFFSET)*32))))
#define GPWTM0_GPTMRTCPD                         (((GPTMRTCPD_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMRTCPD_OFFSET )))
#define GPWTM0_GPTMRTCPD_R                       (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMRTCPD_OFFSET)))

#define GPWTM0_BITBANDING_TW_GPTMRTCPD           (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPWTM0_TW_GPTMRTCPD                      (((TW_GPTMRTCPD_TypeDef*)(GPWTM0_BASE + GPWTM_TW_GPTMRTCPD_OFFSET )))
#define GPWTM0_TW_GPTMRTCPD_R                    (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TW_GPTMRTCPD_OFFSET)))

/* GPWTM1 GPTMRTCPD*/
#define GPWTM1_BITBANDING_GPTMRTCPD              (((BITBANDING_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMRTCPD_OFFSET)*32))))
#define GPWTM1_GPTMRTCPD                         (((GPTMRTCPD_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMRTCPD_OFFSET )))
#define GPWTM1_GPTMRTCPD_R                       (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMRTCPD_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMRTCPD           (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPWTM1_TW_GPTMRTCPD                      (((TW_GPTMRTCPD_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMRTCPD_OFFSET )))
#define GPWTM1_TW_GPTMRTCPD_R                    (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMRTCPD_OFFSET)))

/* GPWTM2 GPTMRTCPD*/
#define GPWTM2_BITBANDING_GPTMRTCPD              (((BITBANDING_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMRTCPD_OFFSET)*32))))
#define GPWTM2_GPTMRTCPD                         (((GPTMRTCPD_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMRTCPD_OFFSET )))
#define GPWTM2_GPTMRTCPD_R                       (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMRTCPD_OFFSET)))

#define GPWTM2_BITBANDING_TW_GPTMRTCPD           (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPWTM2_TW_GPTMRTCPD                      (((TW_GPTMRTCPD_TypeDef*)(GPWTM2_BASE + GPWTM_TW_GPTMRTCPD_OFFSET )))
#define GPWTM2_TW_GPTMRTCPD_R                    (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TW_GPTMRTCPD_OFFSET)))

/* GPWTM3 GPTMRTCPD*/
#define GPWTM3_BITBANDING_GPTMRTCPD              (((BITBANDING_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMRTCPD_OFFSET)*32))))
#define GPWTM3_GPTMRTCPD                         (((GPTMRTCPD_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMRTCPD_OFFSET )))
#define GPWTM3_GPTMRTCPD_R                       (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMRTCPD_OFFSET)))

#define GPWTM3_BITBANDING_TW_GPTMRTCPD           (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPWTM3_TW_GPTMRTCPD                      (((TW_GPTMRTCPD_TypeDef*)(GPWTM3_BASE + GPWTM_TW_GPTMRTCPD_OFFSET )))
#define GPWTM3_TW_GPTMRTCPD_R                    (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TW_GPTMRTCPD_OFFSET)))

/* GPWTM4 GPTMRTCPD*/
#define GPWTM4_BITBANDING_GPTMRTCPD              (((BITBANDING_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMRTCPD_OFFSET)*32))))
#define GPWTM4_GPTMRTCPD                         (((GPTMRTCPD_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMRTCPD_OFFSET )))
#define GPWTM4_GPTMRTCPD_R                       (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMRTCPD_OFFSET)))

#define GPWTM4_BITBANDING_TW_GPTMRTCPD           (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPWTM4_TW_GPTMRTCPD                      (((TW_GPTMRTCPD_TypeDef*)(GPWTM4_BASE + GPWTM_TW_GPTMRTCPD_OFFSET )))
#define GPWTM4_TW_GPTMRTCPD_R                    (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TW_GPTMRTCPD_OFFSET)))

/* GPWTM5 GPTMRTCPD*/
#define GPWTM5_BITBANDING_GPTMRTCPD              (((BITBANDING_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMRTCPD_OFFSET)*32))))
#define GPWTM5_GPTMRTCPD                         (((GPTMRTCPD_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMRTCPD_OFFSET )))
#define GPWTM5_GPTMRTCPD_R                       (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMRTCPD_OFFSET)))

#define GPWTM5_BITBANDING_TW_GPTMRTCPD           (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPWTM5_TW_GPTMRTCPD                      (((TW_GPTMRTCPD_TypeDef*)(GPWTM5_BASE + GPWTM_TW_GPTMRTCPD_OFFSET )))
#define GPWTM5_TW_GPTMRTCPD_R                    (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TW_GPTMRTCPD_OFFSET)))


//--------
#define GPTM_GPTMRTCPD_R_RTCPD_MASK                 (0x0000FFFF)
#define GPTM_GPTMRTCPD_R_RTCPD_BIT                  (0)
#define GPTM_GPTMRTCPD_R_RTCPD_DEFAULT             (0x00007FFF)

#define GPTM_GPTMRTCPD_RTCPD_MASK                   (0x0000FFFF)
#define GPTM_GPTMRTCPD_RTCPD_DEFAULT                (0x00007FFF)
//--------

//--------
#define GPTM_TW_GPTMRTCPD_R_RTCPD_MASK              (0x0000FFFF)
#define GPTM_TW_GPTMRTCPD_R_RTCPD_BIT               (0)
#define GPTM_TW_GPTMRTCPD_R_RTCPD_DEFAULT           (0x00007FFF)


#define GPTM_TW_GPTMRTCPD_RTCPD_MASK                (0x0000FFFF)
#define GPTM_TW_GPTMRTCPD_RTCPD_DEFAULT             (0x00007FFF)
//--------

//--------
#define GPWTM_GPTMRTCPD_R_RTCPD_MASK                (0x0000FFFF)
#define GPWTM_GPTMRTCPD_R_RTCPD_BIT                 (0)
#define GPWTM_GPTMRTCPD_R_RTCPD_DEFAULT             (0x00007FFF)

#define GPWTM_GPTMRTCPD_RTCPD_MASK                  (0x0000FFFF)
#define GPWTM_GPTMRTCPD_RTCPD_DEFAULT               (0x00007FFF)
//--------

//--------
#define GPWTM_TW_GPTMRTCPD_R_RTCPD_MASK             (0x0000FFFF)
#define GPWTM_TW_GPTMRTCPD_R_RTCPD_BIT              (0)
#define GPWTM_TW_GPTMRTCPD_R_RTCPD_DEFAULT          (0x00007FFF)

#define GPWTM_TW_GPTMRTCPD_RTCPD_MASK               (0x0000FFFF)
#define GPWTM_TW_GPTMRTCPD_RTCPD_DEFAULT            (0x00007FFF)
//--------


/******************************************************************************************
************************************ 23 GPTMTAPS *********************************************
******************************************************************************************/

/* GPTM0 GPTMTAPS*/
#define GPTM0_BITBANDING_GPTMTAPS               (((BITBANDING_GPTMTAPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAPS_OFFSET)*32))))
#define GPTM0_GPTMTAPS                          (((GPTMTAPS_TypeDef*)(GPTM0_BASE + GPTM_GPTMTAPS_OFFSET )))
#define GPTM0_GPTMTAPS_R                        (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMTAPS_OFFSET)))

#define GPTM0_BITBANDING_TA_GPTMTnPS            (((BITBANDING_TA_GPTMPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TA_GPTMTnPS_OFFSET)*32))))
#define GPTM0_TA_GPTMTnPS                       (((TA_GPTMPS_TypeDef*)(GPTM0_BASE + GPTM_TA_GPTMTnPS_OFFSET )))
#define GPTM0_TA_GPTMTnPS_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TA_GPTMTnPS_OFFSET)))

/* GPTM1 GPTMTAPS*/
#define GPTM1_BITBANDING_GPTMTAPS               (((BITBANDING_GPTMTAPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAPS_OFFSET)*32))))
#define GPTM1_GPTMTAPS                          (((GPTMTAPS_TypeDef*)(GPTM1_BASE + GPTM_GPTMTAPS_OFFSET )))
#define GPTM1_GPTMTAPS_R                        (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMTAPS_OFFSET)))

#define GPTM1_BITBANDING_TA_GPTMTnPS            (((BITBANDING_TA_GPTMPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TA_GPTMTnPS_OFFSET)*32))))
#define GPTM1_TA_GPTMTnPS                       (((TA_GPTMPS_TypeDef*)(GPTM1_BASE + GPTM_TA_GPTMTnPS_OFFSET )))
#define GPTM1_TA_GPTMTnPS_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TA_GPTMTnPS_OFFSET)))

/* GPTM2 GPTMTAPS*/
#define GPTM2_BITBANDING_GPTMTAPS               (((BITBANDING_GPTMTAPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAPS_OFFSET)*32))))
#define GPTM2_GPTMTAPS                          (((GPTMTAPS_TypeDef*)(GPTM2_BASE + GPTM_GPTMTAPS_OFFSET )))
#define GPTM2_GPTMTAPS_R                        (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMTAPS_OFFSET)))

#define GPTM2_BITBANDING_TA_GPTMTnPS            (((BITBANDING_TA_GPTMPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TA_GPTMTnPS_OFFSET)*32))))
#define GPTM2_TA_GPTMTnPS                       (((TA_GPTMPS_TypeDef*)(GPTM2_BASE + GPTM_TA_GPTMTnPS_OFFSET )))
#define GPTM2_TA_GPTMTnPS_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TA_GPTMTnPS_OFFSET)))

/* GPTM3 GPTMTAPS*/
#define GPTM3_BITBANDING_GPTMTAPS               (((BITBANDING_GPTMTAPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAPS_OFFSET)*32))))
#define GPTM3_GPTMTAPS                          (((GPTMTAPS_TypeDef*)(GPTM3_BASE + GPTM_GPTMTAPS_OFFSET )))
#define GPTM3_GPTMTAPS_R                        (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMTAPS_OFFSET)))

#define GPTM3_BITBANDING_TA_GPTMTnPS            (((BITBANDING_TA_GPTMPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TA_GPTMTnPS_OFFSET)*32))))
#define GPTM3_TA_GPTMTnPS                       (((TA_GPTMPS_TypeDef*)(GPTM3_BASE + GPTM_TA_GPTMTnPS_OFFSET )))
#define GPTM3_TA_GPTMTnPS_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TA_GPTMTnPS_OFFSET)))

/* GPTM4 GPTMTAPS*/
#define GPTM4_BITBANDING_GPTMTAPS               (((BITBANDING_GPTMTAPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAPS_OFFSET)*32))))
#define GPTM4_GPTMTAPS                          (((GPTMTAPS_TypeDef*)(GPTM4_BASE + GPTM_GPTMTAPS_OFFSET )))
#define GPTM4_GPTMTAPS_R                        (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMTAPS_OFFSET)))

#define GPTM4_BITBANDING_TA_GPTMTnPS            (((BITBANDING_TA_GPTMPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TA_GPTMTnPS_OFFSET)*32))))
#define GPTM4_TA_GPTMTnPS                       (((TA_GPTMPS_TypeDef*)(GPTM4_BASE + GPTM_TA_GPTMTnPS_OFFSET )))
#define GPTM4_TA_GPTMTnPS_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TA_GPTMTnPS_OFFSET)))

/* GPTM5 GPTMTAPS*/
#define GPTM5_BITBANDING_GPTMTAPS               (((BITBANDING_GPTMTAPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAPS_OFFSET)*32))))
#define GPTM5_GPTMTAPS                          (((GPTMTAPS_TypeDef*)(GPTM5_BASE + GPTM_GPTMTAPS_OFFSET )))
#define GPTM5_GPTMTAPS_R                        (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMTAPS_OFFSET)))

#define GPTM5_BITBANDING_TA_GPTMTnPS            (((BITBANDING_TA_GPTMPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TA_GPTMTnPS_OFFSET)*32))))
#define GPTM5_TA_GPTMTnPS                       (((TA_GPTMPS_TypeDef*)(GPTM5_BASE + GPTM_TA_GPTMTnPS_OFFSET )))
#define GPTM5_TA_GPTMTnPS_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TA_GPTMTnPS_OFFSET)))

/* GPWTM0 GPTMTAPS*/
#define GPWTM0_BITBANDING_GPTMTAPS               (((BITBANDING_GPTMTAPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAPS_OFFSET)*32))))
#define GPWTM0_GPTMTAPS                          (((GPTMTAPS_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMTAPS_OFFSET )))
#define GPWTM0_GPTMTAPS_R                        (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMTAPS_OFFSET)))

#define GPWTM0_BITBANDING_TA_GPTMTnPS            (((BITBANDING_TA_GPWTMPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnPS_OFFSET)*32))))
#define GPWTM0_TA_GPTMTnPS                       (((TA_GPWTMPS_TypeDef*)(GPWTM0_BASE + GPWTM_TA_GPTMTnPS_OFFSET )))
#define GPWTM0_TA_GPTMTnPS_R                     (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TA_GPTMTnPS_OFFSET)))

/* GPWTM1 GPTMTAPS*/
#define GPWTM1_BITBANDING_GPTMTAPS               (((BITBANDING_GPTMTAPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAPS_OFFSET)*32))))
#define GPWTM1_GPTMTAPS                          (((GPTMTAPS_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMTAPS_OFFSET )))
#define GPWTM1_GPTMTAPS_R                        (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMTAPS_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnPS            (((BITBANDING_TA_GPWTMPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnPS_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnPS                       (((TA_GPWTMPS_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnPS_OFFSET )))
#define GPWTM1_TA_GPTMTnPS_R                     (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnPS_OFFSET)))

/* GPWTM2 GPTMTAPS*/
#define GPWTM2_BITBANDING_GPTMTAPS               (((BITBANDING_GPTMTAPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAPS_OFFSET)*32))))
#define GPWTM2_GPTMTAPS                          (((GPTMTAPS_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMTAPS_OFFSET )))
#define GPWTM2_GPTMTAPS_R                        (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMTAPS_OFFSET)))

#define GPWTM2_BITBANDING_TA_GPTMTnPS            (((BITBANDING_TA_GPWTMPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnPS_OFFSET)*32))))
#define GPWTM2_TA_GPTMTnPS                       (((TA_GPWTMPS_TypeDef*)(GPWTM2_BASE + GPWTM_TA_GPTMTnPS_OFFSET )))
#define GPWTM2_TA_GPTMTnPS_R                     (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TA_GPTMTnPS_OFFSET)))

/* GPWTM3 GPTMTAPS*/
#define GPWTM3_BITBANDING_GPTMTAPS               (((BITBANDING_GPTMTAPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAPS_OFFSET)*32))))
#define GPWTM3_GPTMTAPS                          (((GPTMTAPS_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMTAPS_OFFSET )))
#define GPWTM3_GPTMTAPS_R                        (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMTAPS_OFFSET)))

#define GPWTM3_BITBANDING_TA_GPTMTnPS            (((BITBANDING_TA_GPWTMPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnPS_OFFSET)*32))))
#define GPWTM3_TA_GPTMTnPS                       (((TA_GPWTMPS_TypeDef*)(GPWTM3_BASE + GPWTM_TA_GPTMTnPS_OFFSET )))
#define GPWTM3_TA_GPTMTnPS_R                     (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TA_GPTMTnPS_OFFSET)))

/* GPWTM4 GPTMTAPS*/
#define GPWTM4_BITBANDING_GPTMTAPS               (((BITBANDING_GPTMTAPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAPS_OFFSET)*32))))
#define GPWTM4_GPTMTAPS                          (((GPTMTAPS_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMTAPS_OFFSET )))
#define GPWTM4_GPTMTAPS_R                        (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMTAPS_OFFSET)))

#define GPWTM4_BITBANDING_TA_GPTMTnPS            (((BITBANDING_TA_GPWTMPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnPS_OFFSET)*32))))
#define GPWTM4_TA_GPTMTnPS                       (((TA_GPWTMPS_TypeDef*)(GPWTM4_BASE + GPWTM_TA_GPTMTnPS_OFFSET )))
#define GPWTM4_TA_GPTMTnPS_R                     (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TA_GPTMTnPS_OFFSET)))

/* GPWTM5 GPTMTAPS*/
#define GPWTM5_BITBANDING_GPTMTAPS               (((BITBANDING_GPTMTAPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAPS_OFFSET)*32))))
#define GPWTM5_GPTMTAPS                          (((GPTMTAPS_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMTAPS_OFFSET )))
#define GPWTM5_GPTMTAPS_R                        (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMTAPS_OFFSET)))

#define GPWTM5_BITBANDING_TA_GPTMTnPS            (((BITBANDING_TA_GPWTMPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnPS_OFFSET)*32))))
#define GPWTM5_TA_GPTMTnPS                       (((TA_GPWTMPS_TypeDef*)(GPWTM5_BASE + GPWTM_TA_GPTMTnPS_OFFSET )))
#define GPWTM5_TA_GPTMTnPS_R                     (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TA_GPTMTnPS_OFFSET)))

//--------
#define GPTM_GPTMTAPS_R_PSS_MASK              (0x0000FFFF)
#define GPTM_GPTMTAPS_R_PSS_BIT               (0)

#define GPTM_GPTMTAPS_PSS_MASK                (0x0000FFFF)
//--------

//--------
#define GPTM_TA_GPTMTnPS_R_PSS_MASK           (0x0000FFFF)
#define GPTM_TA_GPTMTnPS_R_PSS_BIT            (0)

#define GPTM_TA_GPTMTnPS_PSS_MASK             (0x0000FFFF)
//--------

//--------
#define GPWTM_GPTMTAPS_R_PSS_MASK             (0x0000FFFF)
#define GPWTM_GPTMTAPS_R_PSS_BIT              (0)

#define GPWTM_GPTMTAPS_PSS_MASK               (0x0000FFFF)
//--------

//--------
#define GPWTM_TA_GPTMTnPS_R_PSS_MASK          (0x0000FFFF)
#define GPWTM_TA_GPTMTnPS_R_PSS_BIT           (0)

#define GPWTM_TA_GPTMTnPS_PSS_MASK            (0x0000FFFF)
//--------


/******************************************************************************************
************************************ 24 GPTMTBPS *********************************************
******************************************************************************************/

/* GPTM0 GPTMTBPS*/
#define GPTM0_BITBANDING_GPTMTBPS               (((BITBANDING_GPTMTBPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBPS_OFFSET)*32))))
#define GPTM0_GPTMTBPS                          (((GPTMTBPS_TypeDef*)(GPTM0_BASE + GPTM_GPTMTBPS_OFFSET )))
#define GPTM0_GPTMTBPS_R                        (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMTBPS_OFFSET)))

#define GPTM0_BITBANDING_TB_GPTMTnPS            (((BITBANDING_TB_GPTMPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TB_GPTMTnPS_OFFSET)*32))))
#define GPTM0_TB_GPTMTnPS                       (((TB_GPTMPS_TypeDef*)(GPTM0_BASE + GPTM_TB_GPTMTnPS_OFFSET )))
#define GPTM0_TB_GPTMTnPS_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TB_GPTMTnPS_OFFSET)))

/* GPTM1 GPTMTBPS*/
#define GPTM1_BITBANDING_GPTMTBPS               (((BITBANDING_GPTMTBPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBPS_OFFSET)*32))))
#define GPTM1_GPTMTBPS                          (((GPTMTBPS_TypeDef*)(GPTM1_BASE + GPTM_GPTMTBPS_OFFSET )))
#define GPTM1_GPTMTBPS_R                        (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMTBPS_OFFSET)))

#define GPTM1_BITBANDING_TB_GPTMTnPS            (((BITBANDING_TB_GPTMPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TB_GPTMTnPS_OFFSET)*32))))
#define GPTM1_TB_GPTMTnPS                       (((TB_GPTMPS_TypeDef*)(GPTM1_BASE + GPTM_TB_GPTMTnPS_OFFSET )))
#define GPTM1_TB_GPTMTnPS_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TB_GPTMTnPS_OFFSET)))

/* GPTM2 GPTMTBPS*/
#define GPTM2_BITBANDING_GPTMTBPS               (((BITBANDING_GPTMTBPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBPS_OFFSET)*32))))
#define GPTM2_GPTMTBPS                          (((GPTMTBPS_TypeDef*)(GPTM2_BASE + GPTM_GPTMTBPS_OFFSET )))
#define GPTM2_GPTMTBPS_R                        (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMTBPS_OFFSET)))

#define GPTM2_BITBANDING_TB_GPTMTnPS            (((BITBANDING_TB_GPTMPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TB_GPTMTnPS_OFFSET)*32))))
#define GPTM2_TB_GPTMTnPS                       (((TB_GPTMPS_TypeDef*)(GPTM2_BASE + GPTM_TB_GPTMTnPS_OFFSET )))
#define GPTM2_TB_GPTMTnPS_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TB_GPTMTnPS_OFFSET)))

/* GPTM3 GPTMTBPS*/
#define GPTM3_BITBANDING_GPTMTBPS               (((BITBANDING_GPTMTBPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBPS_OFFSET)*32))))
#define GPTM3_GPTMTBPS                          (((GPTMTBPS_TypeDef*)(GPTM3_BASE + GPTM_GPTMTBPS_OFFSET )))
#define GPTM3_GPTMTBPS_R                        (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMTBPS_OFFSET)))

#define GPTM3_BITBANDING_TB_GPTMTnPS            (((BITBANDING_TB_GPTMPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TB_GPTMTnPS_OFFSET)*32))))
#define GPTM3_TB_GPTMTnPS                       (((TB_GPTMPS_TypeDef*)(GPTM3_BASE + GPTM_TB_GPTMTnPS_OFFSET )))
#define GPTM3_TB_GPTMTnPS_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TB_GPTMTnPS_OFFSET)))

/* GPTM4 GPTMTBPS*/
#define GPTM4_BITBANDING_GPTMTBPS               (((BITBANDING_GPTMTBPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBPS_OFFSET)*32))))
#define GPTM4_GPTMTBPS                          (((GPTMTBPS_TypeDef*)(GPTM4_BASE + GPTM_GPTMTBPS_OFFSET )))
#define GPTM4_GPTMTBPS_R                        (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMTBPS_OFFSET)))

#define GPTM4_BITBANDING_TB_GPTMTnPS            (((BITBANDING_TB_GPTMPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TB_GPTMTnPS_OFFSET)*32))))
#define GPTM4_TB_GPTMTnPS                       (((TB_GPTMPS_TypeDef*)(GPTM4_BASE + GPTM_TB_GPTMTnPS_OFFSET )))
#define GPTM4_TB_GPTMTnPS_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TB_GPTMTnPS_OFFSET)))

/* GPTM5 GPTMTBPS*/
#define GPTM5_BITBANDING_GPTMTBPS               (((BITBANDING_GPTMTBPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBPS_OFFSET)*32))))
#define GPTM5_GPTMTBPS                          (((GPTMTBPS_TypeDef*)(GPTM5_BASE + GPTM_GPTMTBPS_OFFSET )))
#define GPTM5_GPTMTBPS_R                        (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMTBPS_OFFSET)))

#define GPTM5_BITBANDING_TB_GPTMTnPS            (((BITBANDING_TB_GPTMPS_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TB_GPTMTnPS_OFFSET)*32))))
#define GPTM5_TB_GPTMTnPS                       (((TB_GPTMPS_TypeDef*)(GPTM5_BASE + GPTM_TB_GPTMTnPS_OFFSET )))
#define GPTM5_TB_GPTMTnPS_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TB_GPTMTnPS_OFFSET)))

/* GPWTM0 GPTMTBPS*/
#define GPWTM0_BITBANDING_GPTMTBPS               (((BITBANDING_GPTMTBPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBPS_OFFSET)*32))))
#define GPWTM0_GPTMTBPS                          (((GPTMTBPS_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMTBPS_OFFSET )))
#define GPWTM0_GPTMTBPS_R                        (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMTBPS_OFFSET)))

#define GPWTM0_BITBANDING_TB_GPTMTnPS            (((BITBANDING_TB_GPWTMPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnPS_OFFSET)*32))))
#define GPWTM0_TB_GPTMTnPS                       (((TB_GPWTMPS_TypeDef*)(GPWTM0_BASE + GPWTM_TB_GPTMTnPS_OFFSET )))
#define GPWTM0_TB_GPTMTnPS_R                     (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TB_GPTMTnPS_OFFSET)))

/* GPWTM1 GPTMTBPS*/
#define GPWTM1_BITBANDING_GPTMTBPS               (((BITBANDING_GPTMTBPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBPS_OFFSET)*32))))
#define GPWTM1_GPTMTBPS                          (((GPTMTBPS_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMTBPS_OFFSET )))
#define GPWTM1_GPTMTBPS_R                        (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMTBPS_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnPS            (((BITBANDING_TB_GPWTMPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnPS_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnPS                       (((TB_GPWTMPS_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnPS_OFFSET )))
#define GPWTM1_TB_GPTMTnPS_R                     (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnPS_OFFSET)))

/* GPWTM2 GPTMTBPS*/
#define GPWTM2_BITBANDING_GPTMTBPS               (((BITBANDING_GPTMTBPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBPS_OFFSET)*32))))
#define GPWTM2_GPTMTBPS                          (((GPTMTBPS_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMTBPS_OFFSET )))
#define GPWTM2_GPTMTBPS_R                        (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMTBPS_OFFSET)))

#define GPWTM2_BITBANDING_TB_GPTMTnPS            (((BITBANDING_TB_GPWTMPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnPS_OFFSET)*32))))
#define GPWTM2_TB_GPTMTnPS                       (((TB_GPWTMPS_TypeDef*)(GPWTM2_BASE + GPWTM_TB_GPTMTnPS_OFFSET )))
#define GPWTM2_TB_GPTMTnPS_R                     (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TB_GPTMTnPS_OFFSET)))

/* GPWTM3 GPTMTBPS*/
#define GPWTM3_BITBANDING_GPTMTBPS               (((BITBANDING_GPTMTBPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBPS_OFFSET)*32))))
#define GPWTM3_GPTMTBPS                          (((GPTMTBPS_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMTBPS_OFFSET )))
#define GPWTM3_GPTMTBPS_R                        (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMTBPS_OFFSET)))

#define GPWTM3_BITBANDING_TB_GPTMTnPS            (((BITBANDING_TB_GPWTMPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnPS_OFFSET)*32))))
#define GPWTM3_TB_GPTMTnPS                       (((TB_GPWTMPS_TypeDef*)(GPWTM3_BASE + GPWTM_TB_GPTMTnPS_OFFSET )))
#define GPWTM3_TB_GPTMTnPS_R                     (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TB_GPTMTnPS_OFFSET)))

/* GPWTM4 GPTMTBPS*/
#define GPWTM4_BITBANDING_GPTMTBPS               (((BITBANDING_GPTMTBPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBPS_OFFSET)*32))))
#define GPWTM4_GPTMTBPS                          (((GPTMTBPS_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMTBPS_OFFSET )))
#define GPWTM4_GPTMTBPS_R                        (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMTBPS_OFFSET)))

#define GPWTM4_BITBANDING_TB_GPTMTnPS            (((BITBANDING_TB_GPWTMPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnPS_OFFSET)*32))))
#define GPWTM4_TB_GPTMTnPS                       (((TB_GPWTMPS_TypeDef*)(GPWTM4_BASE + GPWTM_TB_GPTMTnPS_OFFSET )))
#define GPWTM4_TB_GPTMTnPS_R                     (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TB_GPTMTnPS_OFFSET)))

/* GPWTM5 GPTMTBPS*/
#define GPWTM5_BITBANDING_GPTMTBPS               (((BITBANDING_GPTMTBPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBPS_OFFSET)*32))))
#define GPWTM5_GPTMTBPS                          (((GPTMTBPS_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMTBPS_OFFSET )))
#define GPWTM5_GPTMTBPS_R                        (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMTBPS_OFFSET)))

#define GPWTM5_BITBANDING_TB_GPTMTnPS            (((BITBANDING_TB_GPWTMPS_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnPS_OFFSET)*32))))
#define GPWTM5_TB_GPTMTnPS                       (((TB_GPWTMPS_TypeDef*)(GPWTM5_BASE + GPWTM_TB_GPTMTnPS_OFFSET )))
#define GPWTM5_TB_GPTMTnPS_R                     (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TB_GPTMTnPS_OFFSET)))

//--------
#define GPTM_GPTMTBPS_R_PSS_MASK              (0x0000FFFF)
#define GPTM_GPTMTBPS_R_PSS_BIT               (0)

#define GPTM_GPTMTBPS_PSS_MASK                (0x0000FFFF)
//--------

//--------
#define GPTM_TB_GPTMTnPS_R_PSS_MASK           (0x0000FFFF)
#define GPTM_TB_GPTMTnPS_R_PSS_BIT            (0)

#define GPTM_TB_GPTMTnPS_PSS_MASK             (0x0000FFFF)
//--------

//--------
#define GPWTM_GPTMTBPS_R_PSS_MASK             (0x0000FFFF)
#define GPWTM_GPTMTBPS_R_PSS_BIT              (0)

#define GPWTM_GPTMTBPS_PSS_MASK               (0x0000FFFF)
//--------

//--------
#define GPWTM_TB_GPTMTnPS_R_PSS_MASK          (0x0000FFFF)
#define GPWTM_TB_GPTMTnPS_R_PSS_BIT           (0)

#define GPWTM_TB_GPTMTnPS_PSS_MASK            (0x0000FFFF)
//--------


/******************************************************************************************
************************************ 22 GPTMRTCPD *********************************************
******************************************************************************************/

/* GPTM0 GPTMRTCPD*/
#define GPTM0_BITBANDING_GPTMRTCPD               (((BITBANDING_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMRTCPD_OFFSET)*32))))
#define GPTM0_GPTMRTCPD                          (((GPTMRTCPD_TypeDef*)(GPTM0_BASE + GPTM_GPTMRTCPD_OFFSET )))
#define GPTM0_GPTMRTCPD_R                        (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMRTCPD_OFFSET)))

#define GPTM0_BITBANDING_TW_GPTMRTCPD            (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPTM0_TW_GPTMRTCPD                       (((TW_GPTMRTCPD_TypeDef*)(GPTM0_BASE + GPTM_TW_GPTMRTCPD_OFFSET )))
#define GPTM0_TW_GPTMRTCPD_R                     (*((volatile uint32_t *)(GPTM0_BASE +GPTM_TW_GPTMRTCPD_OFFSET)))

/* GPTM1 GPTMRTCPD*/
#define GPTM1_BITBANDING_GPTMRTCPD               (((BITBANDING_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMRTCPD_OFFSET)*32))))
#define GPTM1_GPTMRTCPD                          (((GPTMRTCPD_TypeDef*)(GPTM1_BASE + GPTM_GPTMRTCPD_OFFSET )))
#define GPTM1_GPTMRTCPD_R                        (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMRTCPD_OFFSET)))

#define GPTM1_BITBANDING_TW_GPTMRTCPD            (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPTM1_TW_GPTMRTCPD                       (((TW_GPTMRTCPD_TypeDef*)(GPTM1_BASE + GPTM_TW_GPTMRTCPD_OFFSET )))
#define GPTM1_TW_GPTMRTCPD_R                     (*((volatile uint32_t *)(GPTM1_BASE +GPTM_TW_GPTMRTCPD_OFFSET)))

/* GPTM2 GPTMRTCPD*/
#define GPTM2_BITBANDING_GPTMRTCPD               (((BITBANDING_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMRTCPD_OFFSET)*32))))
#define GPTM2_GPTMRTCPD                          (((GPTMRTCPD_TypeDef*)(GPTM2_BASE + GPTM_GPTMRTCPD_OFFSET )))
#define GPTM2_GPTMRTCPD_R                        (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMRTCPD_OFFSET)))

#define GPTM2_BITBANDING_TW_GPTMRTCPD            (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPTM2_TW_GPTMRTCPD                       (((TW_GPTMRTCPD_TypeDef*)(GPTM2_BASE + GPTM_TW_GPTMRTCPD_OFFSET )))
#define GPTM2_TW_GPTMRTCPD_R                     (*((volatile uint32_t *)(GPTM2_BASE +GPTM_TW_GPTMRTCPD_OFFSET)))

/* GPTM3 GPTMRTCPD*/
#define GPTM3_BITBANDING_GPTMRTCPD               (((BITBANDING_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMRTCPD_OFFSET)*32))))
#define GPTM3_GPTMRTCPD                          (((GPTMRTCPD_TypeDef*)(GPTM3_BASE + GPTM_GPTMRTCPD_OFFSET )))
#define GPTM3_GPTMRTCPD_R                        (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMRTCPD_OFFSET)))

#define GPTM3_BITBANDING_TW_GPTMRTCPD            (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPTM3_TW_GPTMRTCPD                       (((TW_GPTMRTCPD_TypeDef*)(GPTM3_BASE + GPTM_TW_GPTMRTCPD_OFFSET )))
#define GPTM3_TW_GPTMRTCPD_R                     (*((volatile uint32_t *)(GPTM3_BASE +GPTM_TW_GPTMRTCPD_OFFSET)))

/* GPTM4 GPTMRTCPD*/
#define GPTM4_BITBANDING_GPTMRTCPD               (((BITBANDING_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMRTCPD_OFFSET)*32))))
#define GPTM4_GPTMRTCPD                          (((GPTMRTCPD_TypeDef*)(GPTM4_BASE + GPTM_GPTMRTCPD_OFFSET )))
#define GPTM4_GPTMRTCPD_R                        (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMRTCPD_OFFSET)))

#define GPTM4_BITBANDING_TW_GPTMRTCPD            (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPTM4_TW_GPTMRTCPD                       (((TW_GPTMRTCPD_TypeDef*)(GPTM4_BASE + GPTM_TW_GPTMRTCPD_OFFSET )))
#define GPTM4_TW_GPTMRTCPD_R                     (*((volatile uint32_t *)(GPTM4_BASE +GPTM_TW_GPTMRTCPD_OFFSET)))

/* GPTM5 GPTMRTCPD*/
#define GPTM5_BITBANDING_GPTMRTCPD               (((BITBANDING_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMRTCPD_OFFSET)*32))))
#define GPTM5_GPTMRTCPD                          (((GPTMRTCPD_TypeDef*)(GPTM5_BASE + GPTM_GPTMRTCPD_OFFSET )))
#define GPTM5_GPTMRTCPD_R                        (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMRTCPD_OFFSET)))

#define GPTM5_BITBANDING_TW_GPTMRTCPD            (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPTM5_TW_GPTMRTCPD                       (((TW_GPTMRTCPD_TypeDef*)(GPTM5_BASE + GPTM_TW_GPTMRTCPD_OFFSET )))
#define GPTM5_TW_GPTMRTCPD_R                     (*((volatile uint32_t *)(GPTM5_BASE +GPTM_TW_GPTMRTCPD_OFFSET)))

/* GPWTM0 GPTMRTCPD*/
#define GPWTM0_BITBANDING_GPTMRTCPD              (((BITBANDING_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMRTCPD_OFFSET)*32))))
#define GPWTM0_GPTMRTCPD                         (((GPTMRTCPD_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMRTCPD_OFFSET )))
#define GPWTM0_GPTMRTCPD_R                       (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMRTCPD_OFFSET)))

#define GPWTM0_BITBANDING_TW_GPTMRTCPD           (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPWTM0_TW_GPTMRTCPD                      (((TW_GPTMRTCPD_TypeDef*)(GPWTM0_BASE + GPWTM_TW_GPTMRTCPD_OFFSET )))
#define GPWTM0_TW_GPTMRTCPD_R                    (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TW_GPTMRTCPD_OFFSET)))

/* GPWTM1 GPTMRTCPD*/
#define GPWTM1_BITBANDING_GPTMRTCPD              (((BITBANDING_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMRTCPD_OFFSET)*32))))
#define GPWTM1_GPTMRTCPD                         (((GPTMRTCPD_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMRTCPD_OFFSET )))
#define GPWTM1_GPTMRTCPD_R                       (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMRTCPD_OFFSET)))

#define GPWTM1_BITBANDING_TW_GPTMRTCPD           (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPWTM1_TW_GPTMRTCPD                      (((TW_GPTMRTCPD_TypeDef*)(GPWTM1_BASE + GPWTM_TW_GPTMRTCPD_OFFSET )))
#define GPWTM1_TW_GPTMRTCPD_R                    (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TW_GPTMRTCPD_OFFSET)))

/* GPWTM2 GPTMRTCPD*/
#define GPWTM2_BITBANDING_GPTMRTCPD              (((BITBANDING_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMRTCPD_OFFSET)*32))))
#define GPWTM2_GPTMRTCPD                         (((GPTMRTCPD_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMRTCPD_OFFSET )))
#define GPWTM2_GPTMRTCPD_R                       (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMRTCPD_OFFSET)))

#define GPWTM2_BITBANDING_TW_GPTMRTCPD           (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPWTM2_TW_GPTMRTCPD                      (((TW_GPTMRTCPD_TypeDef*)(GPWTM2_BASE + GPWTM_TW_GPTMRTCPD_OFFSET )))
#define GPWTM2_TW_GPTMRTCPD_R                    (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TW_GPTMRTCPD_OFFSET)))

/* GPWTM3 GPTMRTCPD*/
#define GPWTM3_BITBANDING_GPTMRTCPD              (((BITBANDING_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMRTCPD_OFFSET)*32))))
#define GPWTM3_GPTMRTCPD                         (((GPTMRTCPD_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMRTCPD_OFFSET )))
#define GPWTM3_GPTMRTCPD_R                       (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMRTCPD_OFFSET)))

#define GPWTM3_BITBANDING_TW_GPTMRTCPD           (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPWTM3_TW_GPTMRTCPD                      (((TW_GPTMRTCPD_TypeDef*)(GPWTM3_BASE + GPWTM_TW_GPTMRTCPD_OFFSET )))
#define GPWTM3_TW_GPTMRTCPD_R                    (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TW_GPTMRTCPD_OFFSET)))

/* GPWTM4 GPTMRTCPD*/
#define GPWTM4_BITBANDING_GPTMRTCPD              (((BITBANDING_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMRTCPD_OFFSET)*32))))
#define GPWTM4_GPTMRTCPD                         (((GPTMRTCPD_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMRTCPD_OFFSET )))
#define GPWTM4_GPTMRTCPD_R                       (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMRTCPD_OFFSET)))

#define GPWTM4_BITBANDING_TW_GPTMRTCPD           (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPWTM4_TW_GPTMRTCPD                      (((TW_GPTMRTCPD_TypeDef*)(GPWTM4_BASE + GPWTM_TW_GPTMRTCPD_OFFSET )))
#define GPWTM4_TW_GPTMRTCPD_R                    (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TW_GPTMRTCPD_OFFSET)))

/* GPWTM5 GPTMRTCPD*/
#define GPWTM5_BITBANDING_GPTMRTCPD              (((BITBANDING_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMRTCPD_OFFSET)*32))))
#define GPWTM5_GPTMRTCPD                         (((GPTMRTCPD_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMRTCPD_OFFSET )))
#define GPWTM5_GPTMRTCPD_R                       (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMRTCPD_OFFSET)))

#define GPWTM5_BITBANDING_TW_GPTMRTCPD           (((BITBANDING_TW_GPTMRTCPD_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TW_GPTMRTCPD_OFFSET)*32))))
#define GPWTM5_TW_GPTMRTCPD                      (((TW_GPTMRTCPD_TypeDef*)(GPWTM5_BASE + GPWTM_TW_GPTMRTCPD_OFFSET )))
#define GPWTM5_TW_GPTMRTCPD_R                    (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TW_GPTMRTCPD_OFFSET)))


//--------
#define GPTM_GPTMRTCPD_R_RTCPD_MASK                 (0x0000FFFF)
#define GPTM_GPTMRTCPD_R_RTCPD_BIT                  (0)
#define GPTM_GPTMRTCPD_R_RTCPD_DEFAULT             (0x00007FFF)

#define GPTM_GPTMRTCPD_RTCPD_MASK                   (0x0000FFFF)
#define GPTM_GPTMRTCPD_RTCPD_DEFAULT                (0x00007FFF)
//--------

//--------
#define GPTM_TW_GPTMRTCPD_R_RTCPD_MASK              (0x0000FFFF)
#define GPTM_TW_GPTMRTCPD_R_RTCPD_BIT               (0)
#define GPTM_TW_GPTMRTCPD_R_RTCPD_DEFAULT           (0x00007FFF)


#define GPTM_TW_GPTMRTCPD_RTCPD_MASK                (0x0000FFFF)
#define GPTM_TW_GPTMRTCPD_RTCPD_DEFAULT             (0x00007FFF)
//--------

//--------
#define GPWTM_GPTMRTCPD_R_RTCPD_MASK                (0x0000FFFF)
#define GPWTM_GPTMRTCPD_R_RTCPD_BIT                 (0)
#define GPWTM_GPTMRTCPD_R_RTCPD_DEFAULT             (0x00007FFF)

#define GPWTM_GPTMRTCPD_RTCPD_MASK                  (0x0000FFFF)
#define GPWTM_GPTMRTCPD_RTCPD_DEFAULT               (0x00007FFF)
//--------

//--------
#define GPWTM_TW_GPTMRTCPD_R_RTCPD_MASK             (0x0000FFFF)
#define GPWTM_TW_GPTMRTCPD_R_RTCPD_BIT              (0)
#define GPWTM_TW_GPTMRTCPD_R_RTCPD_DEFAULT          (0x00007FFF)

#define GPWTM_TW_GPTMRTCPD_RTCPD_MASK               (0x0000FFFF)
#define GPWTM_TW_GPTMRTCPD_RTCPD_DEFAULT            (0x00007FFF)
//--------


/******************************************************************************************
************************************ 25 GPTMTAPV *********************************************
******************************************************************************************/

/* GPTM0 GPTMTAPV*/
#define GPTM0_BITBANDING_GPTMTAPV               (((BITBANDING_GPTMTAPV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTAPV_OFFSET)*32))))
#define GPTM0_GPTMTAPV                          (((GPTMTAPV_TypeDef*)(GPTM0_BASE + GPTM_GPTMTAPV_OFFSET )))
#define GPTM0_GPTMTAPV_R                        (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMTAPV_OFFSET)))

/* GPTM1 GPTMTAPV*/
#define GPTM1_BITBANDING_GPTMTAPV               (((BITBANDING_GPTMTAPV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTAPV_OFFSET)*32))))
#define GPTM1_GPTMTAPV                          (((GPTMTAPV_TypeDef*)(GPTM1_BASE + GPTM_GPTMTAPV_OFFSET )))
#define GPTM1_GPTMTAPV_R                        (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMTAPV_OFFSET)))

/* GPTM2 GPTMTAPV*/
#define GPTM2_BITBANDING_GPTMTAPV               (((BITBANDING_GPTMTAPV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTAPV_OFFSET)*32))))
#define GPTM2_GPTMTAPV                          (((GPTMTAPV_TypeDef*)(GPTM2_BASE + GPTM_GPTMTAPV_OFFSET )))
#define GPTM2_GPTMTAPV_R                        (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMTAPV_OFFSET)))

/* GPTM3 GPTMTAPV*/
#define GPTM3_BITBANDING_GPTMTAPV               (((BITBANDING_GPTMTAPV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTAPV_OFFSET)*32))))
#define GPTM3_GPTMTAPV                          (((GPTMTAPV_TypeDef*)(GPTM3_BASE + GPTM_GPTMTAPV_OFFSET )))
#define GPTM3_GPTMTAPV_R                        (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMTAPV_OFFSET)))

/* GPTM4 GPTMTAPV*/
#define GPTM4_BITBANDING_GPTMTAPV               (((BITBANDING_GPTMTAPV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTAPV_OFFSET)*32))))
#define GPTM4_GPTMTAPV                          (((GPTMTAPV_TypeDef*)(GPTM4_BASE + GPTM_GPTMTAPV_OFFSET )))
#define GPTM4_GPTMTAPV_R                        (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMTAPV_OFFSET)))

/* GPTM5 GPTMTAPV*/
#define GPTM5_BITBANDING_GPTMTAPV               (((BITBANDING_GPTMTAPV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTAPV_OFFSET)*32))))
#define GPTM5_GPTMTAPV                          (((GPTMTAPV_TypeDef*)(GPTM5_BASE + GPTM_GPTMTAPV_OFFSET )))
#define GPTM5_GPTMTAPV_R                        (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMTAPV_OFFSET)))

/* GPWTM0 GPTMTAPV*/
#define GPWTM0_BITBANDING_GPTMTAPV               (((BITBANDING_GPTMTAPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTAPV_OFFSET)*32))))
#define GPWTM0_GPTMTAPV                          (((GPTMTAPV_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMTAPV_OFFSET )))
#define GPWTM0_GPTMTAPV_R                        (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMTAPV_OFFSET)))

#define GPWTM0_BITBANDING_TA_GPTMTnPV            (((BITBANDING_TA_GPWTMPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TA_GPTMTnPV_OFFSET)*32))))
#define GPWTM0_TA_GPTMTnPV                       (((TA_GPWTMPV_TypeDef*)(GPWTM0_BASE + GPWTM_TA_GPTMTnPV_OFFSET )))
#define GPWTM0_TA_GPTMTnPV_R                     (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TA_GPTMTnPV_OFFSET)))

/* GPWTM1 GPTMTAPV*/
#define GPWTM1_BITBANDING_GPTMTAPV               (((BITBANDING_GPTMTAPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTAPV_OFFSET)*32))))
#define GPWTM1_GPTMTAPV                          (((GPTMTAPV_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMTAPV_OFFSET )))
#define GPWTM1_GPTMTAPV_R                        (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMTAPV_OFFSET)))

#define GPWTM1_BITBANDING_TA_GPTMTnPV            (((BITBANDING_TA_GPWTMPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TA_GPTMTnPV_OFFSET)*32))))
#define GPWTM1_TA_GPTMTnPV                       (((TA_GPWTMPV_TypeDef*)(GPWTM1_BASE + GPWTM_TA_GPTMTnPV_OFFSET )))
#define GPWTM1_TA_GPTMTnPV_R                     (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TA_GPTMTnPV_OFFSET)))

/* GPWTM2 GPTMTAPV*/
#define GPWTM2_BITBANDING_GPTMTAPV               (((BITBANDING_GPTMTAPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTAPV_OFFSET)*32))))
#define GPWTM2_GPTMTAPV                          (((GPTMTAPV_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMTAPV_OFFSET )))
#define GPWTM2_GPTMTAPV_R                        (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMTAPV_OFFSET)))

#define GPWTM2_BITBANDING_TA_GPTMTnPV            (((BITBANDING_TA_GPWTMPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TA_GPTMTnPV_OFFSET)*32))))
#define GPWTM2_TA_GPTMTnPV                       (((TA_GPWTMPV_TypeDef*)(GPWTM2_BASE + GPWTM_TA_GPTMTnPV_OFFSET )))
#define GPWTM2_TA_GPTMTnPV_R                     (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TA_GPTMTnPV_OFFSET)))

/* GPWTM3 GPTMTAPV*/
#define GPWTM3_BITBANDING_GPTMTAPV               (((BITBANDING_GPTMTAPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTAPV_OFFSET)*32))))
#define GPWTM3_GPTMTAPV                          (((GPTMTAPV_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMTAPV_OFFSET )))
#define GPWTM3_GPTMTAPV_R                        (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMTAPV_OFFSET)))

#define GPWTM3_BITBANDING_TA_GPTMTnPV            (((BITBANDING_TA_GPWTMPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TA_GPTMTnPV_OFFSET)*32))))
#define GPWTM3_TA_GPTMTnPV                       (((TA_GPWTMPV_TypeDef*)(GPWTM3_BASE + GPWTM_TA_GPTMTnPV_OFFSET )))
#define GPWTM3_TA_GPTMTnPV_R                     (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TA_GPTMTnPV_OFFSET)))

/* GPWTM4 GPTMTAPV*/
#define GPWTM4_BITBANDING_GPTMTAPV               (((BITBANDING_GPTMTAPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTAPV_OFFSET)*32))))
#define GPWTM4_GPTMTAPV                          (((GPTMTAPV_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMTAPV_OFFSET )))
#define GPWTM4_GPTMTAPV_R                        (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMTAPV_OFFSET)))

#define GPWTM4_BITBANDING_TA_GPTMTnPV            (((BITBANDING_TA_GPWTMPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TA_GPTMTnPV_OFFSET)*32))))
#define GPWTM4_TA_GPTMTnPV                       (((TA_GPWTMPV_TypeDef*)(GPWTM4_BASE + GPWTM_TA_GPTMTnPV_OFFSET )))
#define GPWTM4_TA_GPTMTnPV_R                     (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TA_GPTMTnPV_OFFSET)))

/* GPWTM5 GPTMTAPV*/
#define GPWTM5_BITBANDING_GPTMTAPV               (((BITBANDING_GPTMTAPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTAPV_OFFSET)*32))))
#define GPWTM5_GPTMTAPV                          (((GPTMTAPV_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMTAPV_OFFSET )))
#define GPWTM5_GPTMTAPV_R                        (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMTAPV_OFFSET)))

#define GPWTM5_BITBANDING_TA_GPTMTnPV            (((BITBANDING_TA_GPWTMPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TA_GPTMTnPV_OFFSET)*32))))
#define GPWTM5_TA_GPTMTnPV                       (((TA_GPWTMPV_TypeDef*)(GPWTM5_BASE + GPWTM_TA_GPTMTnPV_OFFSET )))
#define GPWTM5_TA_GPTMTnPV_R                     (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TA_GPTMTnPV_OFFSET)))

//--------
#define GPTM_GPTMTAPV_R_PSV_MASK              (0x0000FFFF)
#define GPTM_GPTMTAPV_R_PSV_BIT               (0)

#define GPTM_GPTMTAPV_PSV_MASK                (0x0000FFFF)
//--------

//--------
#define GPWTM_GPTMTAPV_R_PSV_MASK             (0x0000FFFF)
#define GPWTM_GPTMTAPV_R_PSV_BIT              (0)

#define GPWTM_GPTMTAPV_PSV_MASK               (0x0000FFFF)
//--------

//--------
#define GPWTM_TA_GPTMTnPV_R_PSV_MASK          (0x0000FFFF)
#define GPWTM_TA_GPTMTnPV_R_PSV_BIT           (0)

#define GPWTM_TA_GPTMTnPV_PSV_MASK            (0x0000FFFF)
//--------


/******************************************************************************************
************************************ 25 GPTMTBPV *********************************************
******************************************************************************************/

/* GPTM0 GPTMTBPV*/
#define GPTM0_BITBANDING_GPTMTBPV               (((BITBANDING_GPTMTBPV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMTBPV_OFFSET)*32))))
#define GPTM0_GPTMTBPV                          (((GPTMTBPV_TypeDef*)(GPTM0_BASE + GPTM_GPTMTBPV_OFFSET )))
#define GPTM0_GPTMTBPV_R                        (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMTBPV_OFFSET)))

/* GPTM1 GPTMTBPV*/
#define GPTM1_BITBANDING_GPTMTBPV               (((BITBANDING_GPTMTBPV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMTBPV_OFFSET)*32))))
#define GPTM1_GPTMTBPV                          (((GPTMTBPV_TypeDef*)(GPTM1_BASE + GPTM_GPTMTBPV_OFFSET )))
#define GPTM1_GPTMTBPV_R                        (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMTBPV_OFFSET)))

/* GPTM2 GPTMTBPV*/
#define GPTM2_BITBANDING_GPTMTBPV               (((BITBANDING_GPTMTBPV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMTBPV_OFFSET)*32))))
#define GPTM2_GPTMTBPV                          (((GPTMTBPV_TypeDef*)(GPTM2_BASE + GPTM_GPTMTBPV_OFFSET )))
#define GPTM2_GPTMTBPV_R                        (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMTBPV_OFFSET)))

/* GPTM3 GPTMTBPV*/
#define GPTM3_BITBANDING_GPTMTBPV               (((BITBANDING_GPTMTBPV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMTBPV_OFFSET)*32))))
#define GPTM3_GPTMTBPV                          (((GPTMTBPV_TypeDef*)(GPTM3_BASE + GPTM_GPTMTBPV_OFFSET )))
#define GPTM3_GPTMTBPV_R                        (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMTBPV_OFFSET)))

/* GPTM4 GPTMTBPV*/
#define GPTM4_BITBANDING_GPTMTBPV               (((BITBANDING_GPTMTBPV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMTBPV_OFFSET)*32))))
#define GPTM4_GPTMTBPV                          (((GPTMTBPV_TypeDef*)(GPTM4_BASE + GPTM_GPTMTBPV_OFFSET )))
#define GPTM4_GPTMTBPV_R                        (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMTBPV_OFFSET)))

/* GPTM5 GPTMTBPV*/
#define GPTM5_BITBANDING_GPTMTBPV               (((BITBANDING_GPTMTBPV_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMTBPV_OFFSET)*32))))
#define GPTM5_GPTMTBPV                          (((GPTMTBPV_TypeDef*)(GPTM5_BASE + GPTM_GPTMTBPV_OFFSET )))
#define GPTM5_GPTMTBPV_R                        (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMTBPV_OFFSET)))

/* GPWTM0 GPTMTBPV*/
#define GPWTM0_BITBANDING_GPTMTBPV               (((BITBANDING_GPTMTBPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMTBPV_OFFSET)*32))))
#define GPWTM0_GPTMTBPV                          (((GPTMTBPV_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMTBPV_OFFSET )))
#define GPWTM0_GPTMTBPV_R                        (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMTBPV_OFFSET)))

#define GPWTM0_BITBANDING_TB_GPTMTnPV            (((BITBANDING_TB_GPWTMPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_TB_GPTMTnPV_OFFSET)*32))))
#define GPWTM0_TB_GPTMTnPV                       (((TB_GPWTMPV_TypeDef*)(GPWTM0_BASE + GPWTM_TB_GPTMTnPV_OFFSET )))
#define GPWTM0_TB_GPTMTnPV_R                     (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_TB_GPTMTnPV_OFFSET)))

/* GPWTM1 GPTMTBPV*/
#define GPWTM1_BITBANDING_GPTMTBPV               (((BITBANDING_GPTMTBPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMTBPV_OFFSET)*32))))
#define GPWTM1_GPTMTBPV                          (((GPTMTBPV_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMTBPV_OFFSET )))
#define GPWTM1_GPTMTBPV_R                        (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMTBPV_OFFSET)))

#define GPWTM1_BITBANDING_TB_GPTMTnPV            (((BITBANDING_TB_GPWTMPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_TB_GPTMTnPV_OFFSET)*32))))
#define GPWTM1_TB_GPTMTnPV                       (((TB_GPWTMPV_TypeDef*)(GPWTM1_BASE + GPWTM_TB_GPTMTnPV_OFFSET )))
#define GPWTM1_TB_GPTMTnPV_R                     (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_TB_GPTMTnPV_OFFSET)))

/* GPWTM2 GPTMTBPV*/
#define GPWTM2_BITBANDING_GPTMTBPV               (((BITBANDING_GPTMTBPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMTBPV_OFFSET)*32))))
#define GPWTM2_GPTMTBPV                          (((GPTMTBPV_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMTBPV_OFFSET )))
#define GPWTM2_GPTMTBPV_R                        (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMTBPV_OFFSET)))

#define GPWTM2_BITBANDING_TB_GPTMTnPV            (((BITBANDING_TB_GPWTMPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_TB_GPTMTnPV_OFFSET)*32))))
#define GPWTM2_TB_GPTMTnPV                       (((TB_GPWTMPV_TypeDef*)(GPWTM2_BASE + GPWTM_TB_GPTMTnPV_OFFSET )))
#define GPWTM2_TB_GPTMTnPV_R                     (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_TB_GPTMTnPV_OFFSET)))

/* GPWTM3 GPTMTBPV*/
#define GPWTM3_BITBANDING_GPTMTBPV               (((BITBANDING_GPTMTBPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMTBPV_OFFSET)*32))))
#define GPWTM3_GPTMTBPV                          (((GPTMTBPV_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMTBPV_OFFSET )))
#define GPWTM3_GPTMTBPV_R                        (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMTBPV_OFFSET)))

#define GPWTM3_BITBANDING_TB_GPTMTnPV            (((BITBANDING_TB_GPWTMPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_TB_GPTMTnPV_OFFSET)*32))))
#define GPWTM3_TB_GPTMTnPV                       (((TB_GPWTMPV_TypeDef*)(GPWTM3_BASE + GPWTM_TB_GPTMTnPV_OFFSET )))
#define GPWTM3_TB_GPTMTnPV_R                     (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_TB_GPTMTnPV_OFFSET)))

/* GPWTM4 GPTMTBPV*/
#define GPWTM4_BITBANDING_GPTMTBPV               (((BITBANDING_GPTMTBPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMTBPV_OFFSET)*32))))
#define GPWTM4_GPTMTBPV                          (((GPTMTBPV_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMTBPV_OFFSET )))
#define GPWTM4_GPTMTBPV_R                        (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMTBPV_OFFSET)))

#define GPWTM4_BITBANDING_TB_GPTMTnPV            (((BITBANDING_TB_GPWTMPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_TB_GPTMTnPV_OFFSET)*32))))
#define GPWTM4_TB_GPTMTnPV                       (((TB_GPWTMPV_TypeDef*)(GPWTM4_BASE + GPWTM_TB_GPTMTnPV_OFFSET )))
#define GPWTM4_TB_GPTMTnPV_R                     (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_TB_GPTMTnPV_OFFSET)))

/* GPWTM5 GPTMTBPV*/
#define GPWTM5_BITBANDING_GPTMTBPV               (((BITBANDING_GPTMTBPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMTBPV_OFFSET)*32))))
#define GPWTM5_GPTMTBPV                          (((GPTMTBPV_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMTBPV_OFFSET )))
#define GPWTM5_GPTMTBPV_R                        (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMTBPV_OFFSET)))

#define GPWTM5_BITBANDING_TB_GPTMTnPV            (((BITBANDING_TB_GPWTMPV_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_TB_GPTMTnPV_OFFSET)*32))))
#define GPWTM5_TB_GPTMTnPV                       (((TB_GPWTMPV_TypeDef*)(GPWTM5_BASE + GPWTM_TB_GPTMTnPV_OFFSET )))
#define GPWTM5_TB_GPTMTnPV_R                     (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_TB_GPTMTnPV_OFFSET)))

//--------
#define GPTM_GPTMTBPV_R_PSV_MASK              (0x0000FFFF)
#define GPTM_GPTMTBPV_R_PSV_BIT               (0)

#define GPTM_GPTMTBPV_PSV_MASK                (0x0000FFFF)
//--------

//--------
#define GPWTM_GPTMTBPV_R_PSV_MASK             (0x0000FFFF)
#define GPWTM_GPTMTBPV_R_PSV_BIT              (0)

#define GPWTM_GPTMTBPV_PSV_MASK               (0x0000FFFF)
//--------

//--------
#define GPWTM_TB_GPTMTnPV_R_PSV_MASK          (0x0000FFFF)
#define GPWTM_TB_GPTMTnPV_R_PSV_BIT           (0)

#define GPWTM_TB_GPTMTnPV_PSV_MASK            (0x0000FFFF)
//--------


/******************************************************************************************
************************************ 27 GPTMPP *********************************************
******************************************************************************************/

/* GPTM0 GPTMPP*/
#define GPTM0_BITBANDING_GPTMPP        (((BITBANDING_GPTMPP_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_GPTMPP_OFFSET)*32))))
#define GPTM0_GPTMPP                   (((GPTMPP_TypeDef*)(GPTM0_BASE + GPTM_GPTMPP_OFFSET )))
#define GPTM0_GPTMPP_R                 (*((volatile uint32_t *)(GPTM0_BASE +GPTM_GPTMPP_OFFSET)))

#define GPTM0_BITBANDING_CTL_GPTMPP    (((BITBANDING_GPTMPP_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM0_OFFSET+GPTM_CTL_GPTMPP_OFFSET)*32))))
#define GPTM0_CTL_GPTMPP               (((GPTMPP_TypeDef*)(GPTM0_BASE + GPTM_CTL_GPTMPP_OFFSET )))
#define GPTM0_CTL_GPTMPP_R             (*((volatile uint32_t *)(GPTM0_BASE +GPTM_CTL_GPTMPP_OFFSET)))

/* GPTM1 GPTMPP*/
#define GPTM1_BITBANDING_GPTMPP        (((BITBANDING_GPTMPP_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_GPTMPP_OFFSET)*32))))
#define GPTM1_GPTMPP                   (((GPTMPP_TypeDef*)(GPTM1_BASE + GPTM_GPTMPP_OFFSET )))
#define GPTM1_GPTMPP_R                 (*((volatile uint32_t *)(GPTM1_BASE +GPTM_GPTMPP_OFFSET)))

#define GPTM1_BITBANDING_CTL_GPTMPP    (((BITBANDING_GPTMPP_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM1_OFFSET+GPTM_CTL_GPTMPP_OFFSET)*32))))
#define GPTM1_CTL_GPTMPP               (((GPTMPP_TypeDef*)(GPTM1_BASE + GPTM_CTL_GPTMPP_OFFSET )))
#define GPTM1_CTL_GPTMPP_R             (*((volatile uint32_t *)(GPTM1_BASE +GPTM_CTL_GPTMPP_OFFSET)))

/* GPTM2 GPTMPP*/
#define GPTM2_BITBANDING_GPTMPP        (((BITBANDING_GPTMPP_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_GPTMPP_OFFSET)*32))))
#define GPTM2_GPTMPP                   (((GPTMPP_TypeDef*)(GPTM2_BASE + GPTM_GPTMPP_OFFSET )))
#define GPTM2_GPTMPP_R                 (*((volatile uint32_t *)(GPTM2_BASE +GPTM_GPTMPP_OFFSET)))

#define GPTM2_BITBANDING_CTL_GPTMPP    (((BITBANDING_GPTMPP_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM2_OFFSET+GPTM_CTL_GPTMPP_OFFSET)*32))))
#define GPTM2_CTL_GPTMPP               (((GPTMPP_TypeDef*)(GPTM2_BASE + GPTM_CTL_GPTMPP_OFFSET )))
#define GPTM2_CTL_GPTMPP_R             (*((volatile uint32_t *)(GPTM2_BASE +GPTM_CTL_GPTMPP_OFFSET)))

/* GPTM3 GPTMPP*/
#define GPTM3_BITBANDING_GPTMPP        (((BITBANDING_GPTMPP_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_GPTMPP_OFFSET)*32))))
#define GPTM3_GPTMPP                   (((GPTMPP_TypeDef*)(GPTM3_BASE + GPTM_GPTMPP_OFFSET )))
#define GPTM3_GPTMPP_R                 (*((volatile uint32_t *)(GPTM3_BASE +GPTM_GPTMPP_OFFSET)))

#define GPTM3_BITBANDING_CTL_GPTMPP    (((BITBANDING_GPTMPP_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM3_OFFSET+GPTM_CTL_GPTMPP_OFFSET)*32))))
#define GPTM3_CTL_GPTMPP               (((GPTMPP_TypeDef*)(GPTM3_BASE + GPTM_CTL_GPTMPP_OFFSET )))
#define GPTM3_CTL_GPTMPP_R             (*((volatile uint32_t *)(GPTM3_BASE +GPTM_CTL_GPTMPP_OFFSET)))

/* GPTM4 GPTMPP*/
#define GPTM4_BITBANDING_GPTMPP        (((BITBANDING_GPTMPP_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_GPTMPP_OFFSET)*32))))
#define GPTM4_GPTMPP                   (((GPTMPP_TypeDef*)(GPTM4_BASE + GPTM_GPTMPP_OFFSET )))
#define GPTM4_GPTMPP_R                 (*((volatile uint32_t *)(GPTM4_BASE +GPTM_GPTMPP_OFFSET)))

#define GPTM4_BITBANDING_CTL_GPTMPP    (((BITBANDING_GPTMPP_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM4_OFFSET+GPTM_CTL_GPTMPP_OFFSET)*32))))
#define GPTM4_CTL_GPTMPP               (((GPTMPP_TypeDef*)(GPTM4_BASE + GPTM_CTL_GPTMPP_OFFSET )))
#define GPTM4_CTL_GPTMPP_R             (*((volatile uint32_t *)(GPTM4_BASE +GPTM_CTL_GPTMPP_OFFSET)))

/* GPTM5 GPTMPP*/
#define GPTM5_BITBANDING_GPTMPP        (((BITBANDING_GPTMPP_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_GPTMPP_OFFSET)*32))))
#define GPTM5_GPTMPP                   (((GPTMPP_TypeDef*)(GPTM5_BASE + GPTM_GPTMPP_OFFSET )))
#define GPTM5_GPTMPP_R                 (*((volatile uint32_t *)(GPTM5_BASE +GPTM_GPTMPP_OFFSET)))

#define GPTM5_BITBANDING_CTL_GPTMPP    (((BITBANDING_GPTMPP_TypeDef*)(GPTM_BITBANDING_BASE+((GPTM5_OFFSET+GPTM_CTL_GPTMPP_OFFSET)*32))))
#define GPTM5_CTL_GPTMPP               (((GPTMPP_TypeDef*)(GPTM5_BASE + GPTM_CTL_GPTMPP_OFFSET )))
#define GPTM5_CTL_GPTMPP_R             (*((volatile uint32_t *)(GPTM5_BASE +GPTM_CTL_GPTMPP_OFFSET)))

/* GPWTM0 GPTMPP*/
#define GPWTM0_BITBANDING_GPTMPP       (((BITBANDING_GPTMPP_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_GPTMPP_OFFSET)*32))))
#define GPWTM0_GPTMPP                  (((GPTMPP_TypeDef*)(GPWTM0_BASE + GPWTM_GPTMPP_OFFSET )))
#define GPWTM0_GPTMPP_R                (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_GPTMPP_OFFSET)))

#define GPWTM0_BITBANDING_CTL_GPTMPP   (((BITBANDING_GPTMPP_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM0_OFFSET+GPWTM_CTL_GPTMPP_OFFSET)*32))))
#define GPWTM0_CTL_GPTMPP              (((GPTMPP_TypeDef*)(GPWTM0_BASE + GPWTM_CTL_GPTMPP_OFFSET )))
#define GPWTM0_CTL_GPTMPP_R            (*((volatile uint32_t *)(GPWTM0_BASE +GPWTM_CTL_GPTMPP_OFFSET)))

/* GPWTM1 GPTMPP*/
#define GPWTM1_BITBANDING_GPTMPP       (((BITBANDING_GPTMPP_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_GPTMPP_OFFSET)*32))))
#define GPWTM1_GPTMPP                  (((GPTMPP_TypeDef*)(GPWTM1_BASE + GPWTM_GPTMPP_OFFSET )))
#define GPWTM1_GPTMPP_R                (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_GPTMPP_OFFSET)))

#define GPWTM1_BITBANDING_CTL_GPTMPP   (((BITBANDING_GPTMPP_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM1_OFFSET+GPWTM_CTL_GPTMPP_OFFSET)*32))))
#define GPWTM1_CTL_GPTMPP              (((GPTMPP_TypeDef*)(GPWTM1_BASE + GPWTM_CTL_GPTMPP_OFFSET )))
#define GPWTM1_CTL_GPTMPP_R            (*((volatile uint32_t *)(GPWTM1_BASE +GPWTM_CTL_GPTMPP_OFFSET)))

/* GPWTM2 GPTMPP*/
#define GPWTM2_BITBANDING_GPTMPP       (((BITBANDING_GPTMPP_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_GPTMPP_OFFSET)*32))))
#define GPWTM2_GPTMPP                  (((GPTMPP_TypeDef*)(GPWTM2_BASE + GPWTM_GPTMPP_OFFSET )))
#define GPWTM2_GPTMPP_R                (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_GPTMPP_OFFSET)))

#define GPWTM2_BITBANDING_CTL_GPTMPP   (((BITBANDING_GPTMPP_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM2_OFFSET+GPWTM_CTL_GPTMPP_OFFSET)*32))))
#define GPWTM2_CTL_GPTMPP              (((GPTMPP_TypeDef*)(GPWTM2_BASE + GPWTM_CTL_GPTMPP_OFFSET )))
#define GPWTM2_CTL_GPTMPP_R            (*((volatile uint32_t *)(GPWTM2_BASE +GPWTM_CTL_GPTMPP_OFFSET)))

/* GPWTM3 GPTMPP*/
#define GPWTM3_BITBANDING_GPTMPP       (((BITBANDING_GPTMPP_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_GPTMPP_OFFSET)*32))))
#define GPWTM3_GPTMPP                  (((GPTMPP_TypeDef*)(GPWTM3_BASE + GPWTM_GPTMPP_OFFSET )))
#define GPWTM3_GPTMPP_R                (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_GPTMPP_OFFSET)))

#define GPWTM3_BITBANDING_CTL_GPTMPP   (((BITBANDING_GPTMPP_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM3_OFFSET+GPWTM_CTL_GPTMPP_OFFSET)*32))))
#define GPWTM3_CTL_GPTMPP              (((GPTMPP_TypeDef*)(GPWTM3_BASE + GPWTM_CTL_GPTMPP_OFFSET )))
#define GPWTM3_CTL_GPTMPP_R            (*((volatile uint32_t *)(GPWTM3_BASE +GPWTM_CTL_GPTMPP_OFFSET)))

/* GPWTM4 GPTMPP*/
#define GPWTM4_BITBANDING_GPTMPP       (((BITBANDING_GPTMPP_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_GPTMPP_OFFSET)*32))))
#define GPWTM4_GPTMPP                  (((GPTMPP_TypeDef*)(GPWTM4_BASE + GPWTM_GPTMPP_OFFSET )))
#define GPWTM4_GPTMPP_R                (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_GPTMPP_OFFSET)))

#define GPWTM4_BITBANDING_CTL_GPTMPP   (((BITBANDING_GPTMPP_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM4_OFFSET+GPWTM_CTL_GPTMPP_OFFSET)*32))))
#define GPWTM4_CTL_GPTMPP              (((GPTMPP_TypeDef*)(GPWTM4_BASE + GPWTM_CTL_GPTMPP_OFFSET )))
#define GPWTM4_CTL_GPTMPP_R            (*((volatile uint32_t *)(GPWTM4_BASE +GPWTM_CTL_GPTMPP_OFFSET)))

/* GPWTM5 GPTMPP*/
#define GPWTM5_BITBANDING_GPTMPP       (((BITBANDING_GPTMPP_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_GPTMPP_OFFSET)*32))))
#define GPWTM5_GPTMPP                  (((GPTMPP_TypeDef*)(GPWTM5_BASE + GPWTM_GPTMPP_OFFSET )))
#define GPWTM5_GPTMPP_R                (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_GPTMPP_OFFSET)))

#define GPWTM5_BITBANDING_CTL_GPTMPP   (((BITBANDING_GPTMPP_TypeDef*)(GPWTM_BITBANDING_BASE+((GPWTM5_OFFSET+GPWTM_CTL_GPTMPP_OFFSET)*32))))
#define GPWTM5_CTL_GPTMPP              (((GPTMPP_TypeDef*)(GPWTM5_BASE + GPWTM_CTL_GPTMPP_OFFSET )))
#define GPWTM5_CTL_GPTMPP_R            (*((volatile uint32_t *)(GPWTM5_BASE +GPWTM_CTL_GPTMPP_OFFSET)))


//--------
#define GPTM_GPTMPP_R_SIZE_MASK         (0x0000000F)
#define GPTM_GPTMPP_R_SIZE_BIT          (0)
#define GPTM_GPTMPP_R_SIZE_16b          (0x00000000)
#define GPTM_GPTMPP_R_SIZE_32b          (0x00000001)

#define GPTM_GPTMPP_SIZE_MASK           (0x0000000F)
#define GPTM_GPTMPP_SIZE_BOTH           (0x00000000)
#define GPTM_GPTMPP_SIZE_16b          (0x00000000)
#define GPTM_GPTMPP_SIZE_32b          (0x00000001)
//--------

//--------
#define GPTM_CTL_GPTMPP_R_SIZE_MASK     (0x0000000F)
#define GPTM_CTL_GPTMPP_R_SIZE_BIT      (0)
#define GPTM_CTL_GPTMPP_R_SIZE_16b      (0x00000000)
#define GPTM_CTL_GPTMPP_R_SIZE_32b      (0x00000001)

#define GPTM_CTL_GPTMPP_SIZE_MASK       (0x0000000F)
#define GPTM_CTL_GPTMPP_SIZE_16b      (0x00000000)
#define GPTM_CTL_GPTMPP_SIZE_32b      (0x00000001)

//--------

//--------
#define GPWTM_GPTMPP_R_SIZE_MASK        (0x0000000F)
#define GPWTM_GPTMPP_R_SIZE_BIT         (0)
#define GWPTM_GPTMPP_R_SIZE_16b         (0x00000000)
#define GWPTM_GPTMPP_R_SIZE_32b         (0x00000001)

#define GPWTM_GPTMPP_SIZE_MASK          (0x0000000F)
#define GPWTM_GPTMPP_SIZE_16b           (0x00000000)
#define GPWTM_GPTMPP_SIZE_32b           (0x00000001)
//--------

//--------
#define GPWTM_CTL_GPTMPP_R_SIZE_MASK    (0x0000000F)
#define GPWTM_CTL_GPTMPP_R_SIZE_BIT     (0)
#define GPWTM_CTL_GPTMPP_R_SIZE_16b     (0x00000000)
#define GPWTM_CTL_GPTMPP_R_SIZE_32b     (0x00000001)

#define GPWTM_CTL_GPTMPP_SIZE_MASK      (0x0000000F)
#define GPWTM_CTL_GPTMPP_SIZE_BOTH      (0x00000000)
#define GPWTM_CTL_GPTMPP_SIZE_16b       (0x00000000)
#define GPWTM_CTL_GPTMPP_SIZE_32b       (0x00000001)
//--------

#define TIMER_MAX (5)
#define TIMER_INT (5)
#define TIMER_32  (0)
#define TIMER_64  (1)
#define TIMER_A  (0)
#define TIMER_B  (1)
#define TIMER_W  (2)

typedef enum
{
    TIMER_enNOOCCUR=0,
    TIMER_enOCCUR=1,
    TIMER_enSTATUS_UNDEF=0xFF,
}TIMER_nSTATUS;

typedef enum
{
    TIMER_enNOREADY=0,
    TIMER_enREADY=1,
}TIMER_nREADY;

typedef enum
{
    TIMER_en32=0,
    TIMER_en64=1,
}TIMER_nLETTER;

typedef enum
{
    TIMER_enA=0,
    TIMER_enB=1,
    TIMER_enW=2,
}TIMER_nWIDE;

typedef enum
{
    TIMER_enT0A=((0<<16)|(0<<8)|0),
    TIMER_enT1A=((0<<16)|(0<<8)|1),
    TIMER_enT2A=((0<<16)|(0<<8)|2),
    TIMER_enT3A=((0<<16)|(0<<8)|3),
    TIMER_enT4A=((0<<16)|(0<<8)|4),
    TIMER_enT5A=((0<<16)|(0<<8)|5),

    TIMER_enT0B=((0<<16)|(1<<8)|0),
    TIMER_enT1B=((0<<16)|(1<<8)|1),
    TIMER_enT2B=((0<<16)|(1<<8)|2),
    TIMER_enT3B=((0<<16)|(1<<8)|3),
    TIMER_enT4B=((0<<16)|(1<<8)|4),
    TIMER_enT5B=((0<<16)|(1<<8)|5),

    TIMER_enT0W=((0<<16)|(2<<8)|0),
    TIMER_enT1W=((0<<16)|(2<<8)|1),
    TIMER_enT2W=((0<<16)|(2<<8)|2),
    TIMER_enT3W=((0<<16)|(2<<8)|3),
    TIMER_enT4W=((0<<16)|(2<<8)|4),
    TIMER_enT5W=((0<<16)|(2<<8)|5),

    TIMER_enWT0A=((1<<16)|(0<<8)|0),
    TIMER_enWT1A=((1<<16)|(0<<8)|1),
    TIMER_enWT2A=((1<<16)|(0<<8)|2),
    TIMER_enWT3A=((1<<16)|(0<<8)|3),
    TIMER_enWT4A=((1<<16)|(0<<8)|4),
    TIMER_enWT5A=((1<<16)|(0<<8)|5),

    TIMER_enWT0B=((1<<16)|(1<<8)|0),
    TIMER_enWT1B=((1<<16)|(1<<8)|1),
    TIMER_enWT2B=((1<<16)|(1<<8)|2),
    TIMER_enWT3B=((1<<16)|(1<<8)|3),
    TIMER_enWT4B=((1<<16)|(1<<8)|4),
    TIMER_enWT5B=((1<<16)|(1<<8)|5),

    TIMER_enWT0W=((1<<16)|(2<<8)|0),
    TIMER_enWT1W=((1<<16)|(2<<8)|1),
    TIMER_enWT2W=((1<<16)|(2<<8)|2),
    TIMER_enWT3W=((1<<16)|(2<<8)|3),
    TIMER_enWT4W=((1<<16)|(2<<8)|4),
    TIMER_enWT5W=((1<<16)|(2<<8)|5),
}TIMER_nMODULE;

typedef enum
{
    TIMER_enTIMEOUT=0,
    TIMER_enCAPTUREMATCH=1,
    TIMER_enCAPTUREEVENT=2,
    TIMER_enMATCH=3,
    TIMER_enRTC=4,
    TIMER_enWRITEUPDATE=5,
}TIMER_nINT;

typedef enum
{
    TIMER_enTIMEOUT_TA=0x1,
    TIMER_enCAPTUREMATCH_TA=0x2,
    //TAPWMIE needs to be enabled with PWM mode
    TIMER_enCAPTUREEVENT_TA=0x4,
    //TAMIE needs to enabled with MATCH_TA
    TIMER_enMATCH_TA=0x10,
}TIMER_nINT_TA;

typedef enum
{
    TIMER_enTIMEOUT_TW=0x1,
    TIMER_enCAPTUREMATCH_TW=0x2,
    TIMER_enCAPTUREEVENT_TW=0x4,
    TIMER_enRTC_TW=0x8,
    //TWMIE needs to enabled with MATCH_TW
    TIMER_enMATCH_TW=0x10,
    TIMER_enWRITEUPDATE_TW=0x10000,
}TIMER_nINT_TW;

typedef enum
{
    TIMER_enTIMEOUT_TB=0x1<<8,
    TIMER_enCAPTUREMATCH_TB=0x2<<8,
    //TBPWMIE needs to be enabled with PWM mode
    TIMER_enCAPTUREEVENT_TB=0x4<<8,
    //TBMIE needs to enabled with MATCH_TB
    TIMER_enMATCH_TB=0x8<<8,
}TIMER_nINT_TB;

typedef enum
{
    TIMER_enPRI0=0,
    TIMER_enPRI1=1,
    TIMER_enPRI2=2,
    TIMER_enPRI3=3,
    TIMER_enPRI4=4,
    TIMER_enPRI5=5,
    TIMER_enPRI6=6,
    TIMER_enPRI7=7,
    TIMER_enDEFAULT=0xFF,
}TIMER_nPRIORITY;

typedef enum
{
    TIMER_enCONFIG_WIDE=0,
    TIMER_enCONFIG_RTC=1,
    TIMER_enCONFIG_INDIVIDUAL=4,
    TIMER_enCONFIG_UNDEF=0xFF,
}TIMER_nCONFIG;

typedef enum
{
    TIMER_enSUB_MODE_RESERVED=1,
    TIMER_enSUB_MODE_ONE_SHOT=1,
    TIMER_enSUB_MODE_PERIODIC=2,
    TIMER_enSUB_MODE_CAPTURE=3,
    TIMER_enSUB_MODE_UNDEF=0xFF,
}TIMER_nSUB_MODE;

typedef enum
{
    TIMER_enEDGE_MODE_COUNT=0,
    TIMER_enEDGE_MODE_TIME=1,
    TIMER_enEDGE_MODE_UNDEF=0xFF,
}TIMER_nEDGE_MODE;

typedef enum
{
    TIMER_enALT_MODE_CC=0,
    TIMER_enALT_MODE_PWM=1,
    TIMER_enALT_MODE_UNDEF=0xFF,
}TIMER_nALT_MODE;

typedef enum
{
    TIMER_enCOUNT_DIR_DOWN=0,
    TIMER_enCOUNT_DIR_UP=1,
    TIMER_enCOUNT_DIR_UNDEF=0xFF,
}TIMER_nCOUNT_DIR;

typedef enum
{
    TIMER_enWAIT_NOTRIGGER=0,
    TIMER_enWAIT_DAISY=1,
    TIMER_enWAIT_UNDEF=0xFF,
}TIMER_nWAIT;

typedef enum
{
    TIMER_enSNAPSHOT_DIS=0,
    TIMER_enSNAPSHOT_EN=1,
    TIMER_enSNAPSHOT_UNDEF=0xFF,
}TIMER_nSNAPSHOT;

typedef enum
{
    TIMER_enPWM_INT_DIS=0,
    TIMER_enPWM_INT_EN=1,
    TIMER_enPWM_INT_UNDEF=0xFF,
}TIMER_nPWM_INT;

typedef enum
{
    TIMER_enUPDATE_INTERVAL_CYCLE=0,
    TIMER_enUPDATE_INTERVAL_TIMEOUT=1,
    TIMER_enUPDATE_INTERVAL_UNDEF=0xFF,
}TIMER_nUPDATE_INTERVAL;

typedef enum
{
    TIMER_enUPDATE_MATCH_CYCLE=0,
    TIMER_enUPDATE_MATCH_TIMEOUT=1,
    TIMER_enUPDATE_MATCH_UNDEF=0xFF,
}TIMER_nUPDATE_MATCH;

typedef enum
{
    TIMER_enPWM_OUT_INIT_LOW=0,
    TIMER_enPWM_OUT_INIT_HIGH=1,
    TIMER_enPWM_OUT_INIT_UNDEF=0xFF,
}TIMER_nPWM_OUT_INIT;


typedef enum
{
    TIMER_enENABLE_STOP=0,
    TIMER_enENABLE_START=1,
    TIMER_enENABLE_UNDEF=0xFF,
}TIMER_nENABLE;

typedef enum
{
    TIMER_enSTALL_CONTINUE=0,
    TIMER_enSTALL_FREEZE=1,
    TIMER_enSTALL_UNDEF=0xFF,
}TIMER_nSTALL;

typedef enum
{
    TIMER_enRTC_STALL_FREEZE=0,
    TIMER_enRTC_STALL_CONTINUE=1,
    TIMER_enRTC_STALL_UNDEF=0xFF,
}TIMER_nRTC_STALL;

typedef enum
{
    TIMER_enADC_TRIGGER_DIS=0,
    TIMER_enADC_TRIGGER_EN=1,
    TIMER_enADC_TRIGGER_UNDEF=0xFF,
}TIMER_nADC_TRIGGER;

typedef enum
{
    TIMER_enPWM_OUTPUT_STRAIGHT=0,
    TIMER_enPWM_OUTPUT_INVERTED=1,
    TIMER_enPWM_OUTPUT_UNDEF=0xFF,
}TIMER_nPWM_OUTPUT;

typedef enum
{
    TIMER_enEDGE_EVENT_POSITIVE=0,
    TIMER_enEDGE_EVENT_NEGATIVE=1,
    TIMER_enEDGE_EVENT_BOTH=3,
    TIMER_enEDGE_EVENT_UNDEF=0xFF,
}TIMER_nEDGE_EVENT;

typedef enum
{
    TIMER_enSYNC_T0A=1<<0,
    TIMER_enSYNC_T0W=1<<0,
    TIMER_enSYNC_T0B=2<<0,
    TIMER_enSYNC_T1A=1<<2,
    TIMER_enSYNC_T1W=1<<2,
    TIMER_enSYNC_T1B=2<<2,
    TIMER_enSYNC_T2A=1<<4,
    TIMER_enSYNC_T2W=1<<4,
    TIMER_enSYNC_T2B=2<<4,
    TIMER_enSYNC_T3A=1<<6,
    TIMER_enSYNC_T3W=1<<6,
    TIMER_enSYNC_T3B=2<<6,
    TIMER_enSYNC_T4A=1<<8,
    TIMER_enSYNC_T4W=1<<8,
    TIMER_enSYNC_T4B=2<<8,
    TIMER_enSYNC_T5A=1<<10,
    TIMER_enSYNC_T5W=1<<10,
    TIMER_enSYNC_T5B=2<<10,
    TIMER_enSYNC_WT0A=1<<12,
    TIMER_enSYNC_WT0W=1<<12,
    TIMER_enSYNC_WT0B=2<<12,
    TIMER_enSYNC_WT1A=1<<14,
    TIMER_enSYNC_WT1W=1<<12,
    TIMER_enSYNC_WT1B=2<<14,
    TIMER_enSYNC_WT2A=1<<16,
    TIMER_enSYNC_WT2W=1<<16,
    TIMER_enSYNC_WT2B=2<<16,
    TIMER_enSYNC_WT3A=1<<18,
    TIMER_enSYNC_WT3W=1<<18,
    TIMER_enSYNC_WT3B=2<<18,
    TIMER_enSYNC_WT4A=1<<20,
    TIMER_enSYNC_WT4W=1<<20,
    TIMER_enSYNC_WT4B=2<<20,
    TIMER_enSYNC_WT5A=1<<22,
    TIMER_enSYNC_WT5W=1<<22,
    TIMER_enSYNC_WT5B=2<<22,
    TIMER_enSYNC_ALL=0xFFFFFFFFFFFF,
}TIMER_nSYNC;

typedef enum
{
    TIMER_enMODE_ONE_SHOT_INDIVIDUAL_UP=(0<<16)|(0<<8)|0,
    TIMER_enMODE_ONE_SHOT_WIDE_UP=(0<<16)|(1<<8)|0,
    TIMER_enMODE_ONE_SHOT_INDIVIDUAL_DOWN=(0<<16)|(0<<8)|1,
    TIMER_enMODE_ONE_SHOT_WIDE_DOWN=(0<<16)|(1<<8)|1,

    TIMER_enMODE_PERIODIC_INDIVIDUAL_UP=(1<<16)|(0<<8)|0,
    TIMER_enMODE_PERIODIC_WIDE_UP=(1<<16)|(1<<8)|0,
    TIMER_enMODE_PERIODIC_INDIVIDUAL_DOWN=(1<<16)|(0<<8)|1,
    TIMER_enMODE_PERIODIC_WIDE_DOWN=(1<<16)|(1<<8)|1,

    TIMER_enMODE_RTC_WIDE_UP=(2<<16)|(1<<8)|0,

    TIMER_enMODE_EDGE_COUNT_INDIVIDUAL_UP=(3<<16)|(0<<8)|0,
    TIMER_enMODE_EDGE_COUNT_INDIVIDUAL_DOWN=(3<<16)|(0<<8)|1,

    TIMER_enMODE_EDGE_TIME_INDIVIDUAL_UP=(4<<16)|(0<<8)|0,
    TIMER_enMODE_EDGE_TIME_INDIVIDUAL_DOWN=(4<<16)|(0<<8)|1,

    TIMER_enMODE_PWM_INDIVIDUAL_DOWN=(5<<16)|(0<<8)|1,

    TIMER_enMODE_UNDEF=0xFF,
}TIMER_nMODE;


void TIMER__vInit(void);
void TIMER__vRegisterISR(void (*Isr) (void),TIMER_nMODULE enModule,TIMER_nINT enInterrupt);
void TIMER__vRegisterMODULEISR(void (*Isr) (void),TIMER_nMODULE enModule);

void TIMER__vEnInterruptMODULE(TIMER_nMODULE enModule,TIMER_nPRIORITY enPriority);
void TIMER__vDisInterruptMODULE(TIMER_nMODULE enModule);

void TIMER__vSetReady(TIMER_nMODULE enModule);
void TIMER__vClearReady(TIMER_nMODULE enModule);
TIMER_nREADY TIMER__enIsReady(TIMER_nMODULE enModule);

void TIMER__vSetConfiguration(TIMER_nMODULE enModule, TIMER_nCONFIG enConf);
TIMER_nCONFIG TIMER__enGetConfiguration(TIMER_nMODULE enModule);

void TIMER__vSetSubMode(TIMER_nMODULE enModule, TIMER_nSUB_MODE enSubMode);
TIMER_nSUB_MODE TIMER__enGetSubMode(TIMER_nMODULE enModule);

void TIMER__vSetEdgeMode(TIMER_nMODULE enModule, TIMER_nEDGE_MODE enEdgeMode);
TIMER_nEDGE_MODE TIMER__enGetEdgeMode(TIMER_nMODULE enModule);

void TIMER__vSetAltMode(TIMER_nMODULE enModule, TIMER_nALT_MODE enAltMode);
TIMER_nALT_MODE TIMER__enGetAltMode(TIMER_nMODULE enModule);

void TIMER__vSetCountDir(TIMER_nMODULE enModule, TIMER_nCOUNT_DIR enCountDir);
TIMER_nCOUNT_DIR TIMER__enGetCountDir(TIMER_nMODULE enModule);

void TIMER__vSetWaitTrigger(TIMER_nMODULE enModule, TIMER_nWAIT enWaitTrigger);
TIMER_nWAIT TIMER__enGetWaitTrigger(TIMER_nMODULE enModule);

void TIMER__vSetSnapShot(TIMER_nMODULE enModule, TIMER_nSNAPSHOT enSnapShot);
TIMER_nSNAPSHOT TIMER__enGetSnapShot(TIMER_nMODULE enModule);

void TIMER__vSetUpdateIntervalMode(TIMER_nMODULE enModule, TIMER_nUPDATE_INTERVAL enUpdateIntervalMode);
TIMER_nUPDATE_INTERVAL TIMER__enGetUpdateIntervalMode(TIMER_nMODULE enModule);

void TIMER__vSetPWMInterrupt(TIMER_nMODULE enModule, TIMER_nPWM_INT enPWMInterrupt);
TIMER_nPWM_INT TIMER__enGetPWMInterrupt(TIMER_nMODULE enModule);

void TIMER__vSetUpdateMatchMode(TIMER_nMODULE enModule, TIMER_nUPDATE_MATCH enUpdateMatchMode);
TIMER_nUPDATE_MATCH TIMER__enGetUpdateMatchMode(TIMER_nMODULE enModule);

void TIMER__vSetPWMOutputInit(TIMER_nMODULE enModule, TIMER_nPWM_OUT_INIT enPWMOutputInit);
TIMER_nPWM_OUT_INIT TIMER__enGetPWMOutputInit(TIMER_nMODULE enModule);



void TIMER__vSetEnable(TIMER_nMODULE enModule, TIMER_nENABLE enEnable);
TIMER_nENABLE TIMER__enGetEnable(TIMER_nMODULE enModule);

void TIMER__vSetStall(TIMER_nMODULE enModule, TIMER_nSTALL enStall);
TIMER_nSTALL TIMER__enGetStall(TIMER_nMODULE enModule);

void TIMER__vSetEdgeEvent(TIMER_nMODULE enModule, TIMER_nEDGE_EVENT enEdgeEvent);
TIMER_nEDGE_EVENT TIMER__enGetEdgeEvent(TIMER_nMODULE enModule);

void TIMER__vSetRTCStall(TIMER_nMODULE enModule, TIMER_nRTC_STALL enRTCStall);
TIMER_nRTC_STALL TIMER__enGetRTCStall(TIMER_nMODULE enModule);

void TIMER__vSetADCTrigger(TIMER_nMODULE enModule, TIMER_nADC_TRIGGER enADCTrigger);
TIMER_nADC_TRIGGER TIMER__enGetADCTrigger(TIMER_nMODULE enModule);

void TIMER__vSetPWMOutputLevel(TIMER_nMODULE enModule, TIMER_nPWM_OUTPUT enPWMOutputLevel);
TIMER_nPWM_OUTPUT TIMER__enGetPWMOutputLevel(TIMER_nMODULE enModule);

void TIMER__vSetSyncronize(TIMER_nSYNC enSync);

#endif /* TIMER_H_ */
